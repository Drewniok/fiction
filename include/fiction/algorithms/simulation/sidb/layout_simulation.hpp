//
// Created by Jan Drewniok on 21.04.23.
//

#ifndef FICTION_LAYOUT_SIMULATION_HPP
#define FICTION_LAYOUT_SIMULATION_HPP

#include "fiction/algorithms/simulation/sidb/energy_distribution.hpp"
#include "fiction/algorithms/simulation/sidb/exhaustive_ground_state_simulation.hpp"
#include "fiction/algorithms/simulation/sidb/minimum_energy.hpp"
#include "fiction/algorithms/simulation/sidb/quicksim.hpp"
#include "fiction/algorithms/simulation/sidb/sidb_simulation_parameters.hpp"
#include "fiction/algorithms/simulation/sidb/sidb_simulation_result.hpp"
#include "fiction/io/write_sqd_layout.hpp"
#include "fiction/io/write_sqd_sim_result.hpp"
#include "fiction/layouts/bounding_box.hpp"
#include "fiction/technology/charge_distribution_surface.hpp"
#include "fiction/technology/sidb_charge_state.hpp"
#include "fiction/technology/sidb_defects.hpp"

#include <fmt/format.h>
#include <mockturtle/utils/stopwatch.hpp>

#include <algorithm>
#include <iostream>
#include <unordered_map>
#include <vector>

namespace fiction

{

namespace detail
{

template <typename Lyt>
struct layout_sim_stats
{
    mockturtle::stopwatch<>::duration                          time_total{0};
    std::vector<std::vector<charge_distribution_surface<Lyt>>> all_valid_lyts{};

    void report(std::ostream& out = std::cout) const
    {
        out << fmt::format("total time  = {:.2f} secs\n", mockturtle::to_seconds(time_total));
        if (!all_valid_lyts.empty())
        {
            for (const auto& [energy, count] : energy_distribution<Lyt>(all_valid_lyts))
            {
                out << fmt::format("energy: {} | occurance: {} \n", energy, count);
            }
            out << fmt::format("the ground state energy is  = {:.4f} \n", minimum_energy(all_valid_lyts));
        }
        else
        {
            std::cout << "no state found | if two state simulation is used, continue with three state" << std::endl;
        }
        out << fmt::format("{} physically valid charge states were found \n", all_valid_lyts.size());
        std::cout << "_____________________________________________________ \n";
    }
};

template <typename Lyt>
class layout_simulation_impl
{
  public:
    layout_simulation_impl(Lyt& lyt, const sidb_simulation_parameters& params, layout_sim_stats<Lyt>& st) :
            layout{lyt},
            parameter{params},
            statistic{st},
            charge_lyt{layout}
    {
        static_assert(is_cell_level_layout_v<Lyt>, "Lyt is not a cell-level layout");
        static_assert(has_sidb_technology_v<Lyt>, "Lyt is not an SiDB layout");
        static_assert(has_siqad_coord_v<Lyt>, "Lyt is not based on SiQAD coordinates");
        //        this->init();
        this->init_top_down();
    }

    void charge_distribution_to_index()
    {
        uint64_t counter  = 0;
        border_cell_index = 0;
        for (uint64_t i = 0; i < border_cells.size(); i++)
        {
            border_cell_index += static_cast<uint64_t>((charge_state_to_sign(border_cell_charge[i]) + 1) *
                                                       std::pow(2, this->num_cells() - 1 - counter));
            counter += 1;
        }
    }

    void index_to_charge_distribution() noexcept
    {

        auto       charge_quot = border_cell_index;
        const auto base        = 2;
        const auto num_charges = border_cells.size() - 1;
        auto       counter     = num_charges;

        if (charge_quot > 0)
        {
            while (charge_quot > 0)
            {
                const auto    charge_quot_int = static_cast<int64_t>(charge_quot);
                const auto    base_int        = static_cast<int64_t>(base);
                const int64_t quotient_int    = charge_quot_int / base_int;
                const int64_t remainder_int   = charge_quot_int % base_int;
                charge_quot                   = static_cast<uint64_t>(quotient_int);

                border_cell_charge[counter] = sign_to_charge_state(static_cast<int8_t>(remainder_int - 1));
                counter -= 1;
            }
        }
        else
        {
            for (auto i = 0u; i < border_cell_charge.size(); i++)
            {
                border_cell_charge[i] = sign_to_charge_state(static_cast<int8_t>(-1));
            }
        }
    }

    //    bool init()
    //    {
    //        //        const auto min_coordinate = wbb.get_min();
    //        //        std::cout << min_coordinate.x << std::endl;
    //        std::vector<cube::coord_t> all_cells = {};
    //        // obtain all cells in the surfaces and order them by their position to achieve a reproducible output
    //        layout.foreach_cell([this, &all_cells](const cell<Lyt>& c)
    //                            { all_cells.push_back(fiction::siqad::to_fiction_coord<cube::coord_t>(c)); });
    //
    //        int32_t x_min = 100000000;
    //        int32_t x_max = 0;
    //        int32_t y_min = 100000000;
    //        for (const auto& cells : all_cells)
    //        {
    //            if (cells.x < x_min)
    //            {
    //                x_min = cells.x;
    //            }
    //            if (cells.x > x_min)
    //            {
    //                x_min = cells.x;
    //            }
    //            if (cells.y < y_min)
    //            {
    //                y_min = cells.y;
    //            }
    //        }
    //        cells       = {};
    //        total_cells = {};
    //        start_cell  = cube::coord_t{x_min, y_min};
    //        std::cout << "finished" << std::endl;
    //    }

    bool init_top_down()
    {
        //        const auto min_coordinate = wbb.get_min();
        //        std::cout << min_coordinate.x << std::endl;
        std::vector<cube::coord_t> all_cells = {};
        // obtain all cells in the surfaces and order them by their position to achieve a reproducible output
        layout.foreach_cell([this, &all_cells](const cell<Lyt>& c)
                            { all_cells.push_back(fiction::siqad::to_fiction_coord<cube::coord_t>(c)); });

        std::sort(all_cells.begin(), all_cells.end());

        start_cell       = all_cells.front();
        start_cell.x     = start_cell.x - 60;
        left_corner_cell = start_cell;
        lowest_cell      = all_cells.back();
        int32_t x_max    = 0;
        for (const auto& cells : all_cells)
        {
            if (cells.x > x_max)
            {
                x_max = cells.x;
            }
        }
        rightest_cell = {x_max, 0};
        cells         = {};
        total_cells   = {};
        std::cout << "finished" << std::endl;
    }

    bool layout_generation_hexagon_real()
    {
        const uint64_t dim_x   = 26;
        const uint64_t dim_y   = 32;
        const uint64_t hex_dim = 60;

        uint64_t allowed   = start_cell.x + dim_x;
        uint64_t allowed_y = start_cell.y + dim_y;

        cells              = {};
        border_cells       = {};
        border_cell_charge = {};

        layout.foreach_cell(
            [&allowed, &allowed_y, this](const cell<Lyt>& c)
            {
                if (std::find(cells.begin(), cells.end(), c) == cells.end())
                {
                    auto cell_conv = fiction::siqad::to_fiction_coord<cube::coord_t>(c);
                    if (cell_conv.y <= allowed_y && cell_conv.y >= start_cell.y && cell_conv.x <= allowed &&
                        cell_conv.x >= start_cell.x)
                    {
                        cells.insert(c);
                        total_cells.insert(c);
                    }
                }
            });

        if (!cells.empty())
        {
            region_counter += 1;
            std::cout << "part cells: " << std::to_string(cells.size()) << std::endl;
            std::cout << "all collected cells: " << std::to_string(total_cells.size()) << std::endl;
            std::cout << allowed << std::endl;
            std::cout << allowed_y << std::endl;

            std::set<int64_t> x_coordinates{};
            for (const auto& cell : cells)
            {
                x_coordinates.insert(cell.x);
            }

            number_same_column = {};
            for (const auto& x_coordinate : x_coordinates)
            {
                uint64_t counter = 0;
                for (const auto& cell : cells)
                {
                    if (cell.x == x_coordinate)
                    {
                        counter += 1;
                    }
                }
                number_same_column.insert(counter);
            }
            if (*number_same_column.rbegin() == 4 && cells.size() < 14)
            {
                layout.foreach_cell(
                    [this](const cell<Lyt>& c)
                    {
                        if (std::find(cells.begin(), cells.end(), c) == cells.end())
                        {
                            uint64_t counter = 0;
                            for (auto it = cells.begin(); it != cells.end(); it++)
                            {
                                if (sidb_nanometer_distance<Lyt>(layout, *it, c, parameter) < 6)
                                {
                                    counter += 1;
                                }
                            }
                            if (counter != 0)
                            {
                                border_cells.push_back(c);
                                border_cell_charge.push_back(sidb_charge_state::NEUTRAL);
                            }
                        }
                    });
            }
            else
            {
                layout.foreach_cell(
                    [this](const cell<Lyt>& c)
                    {
                        if (std::find(cells.begin(), cells.end(), c) == cells.end())
                        {
                            uint64_t counter = 0;
                            for (auto it = cells.begin(); it != cells.end(); it++)
                            {
                                if (sidb_nanometer_distance<Lyt>(layout, *it, c, parameter) < 6)
                                {
                                    counter += 1;
                                }
                            }
                            if (counter != 0)
                            {
                                border_cells.push_back(c);
                                border_cell_charge.push_back(sidb_charge_state::NEUTRAL);
                            }
                        }
                    });
            }
            border_cell_region.insert(std::make_pair(region_counter, border_cells));

            border_cell_max_charge_index = std::pow(2, border_cells.size()) - 1;
        }
        if (allowed < rightest_cell.x)
        {
            start_cell.x = start_cell.x + hex_dim;
        }
        else
        {
            region_col_counter += 1;
            if (region_col_counter % 2 == 0)
            {
                start_cell.x = left_corner_cell.x;
                start_cell.y = left_corner_cell.y + 34 * region_col_counter;
            }
            else
            {
                start_cell.x = left_corner_cell.x + (hex_dim) / 2;
                start_cell.y = left_corner_cell.y + 34 * region_col_counter;
            }
        }
        return EXIT_SUCCESS;
    }



    uint64_t charge_distribution_external_to_index(std::vector<typename Lyt::cell>&        defect_vector,
                                                   const charge_distribution_surface<Lyt>& lyt) const
    {
        std::sort(defect_vector.begin(), defect_vector.end());
        auto sidbs = lyt.get_sidb_order();
        std::sort(sidbs.begin(), sidbs.end());
        uint64_t counter = 0;
        uint64_t index   = 0;
        for (const auto& cell : defect_vector)
        {
            if (std::find(sidbs.begin(), sidbs.end(), cell) != sidbs.end())
            {
                index += static_cast<uint64_t>((charge_state_to_sign(lyt.get_charge_state(cell)) + 1) *
                                               std::pow(2, defect_vector.size() - 1 - counter));
                counter += 1;
            }
        }
        return index;
    }

    bool defect_map_update()
    {
        defect_cell   = {};
        defect_charge = {};
        for (uint i = 0; i < border_cells.size(); i++)
        {
            defect_cell.push_back(border_cells[i]);
            defect_charge.push_back(charge_state_to_sign(border_cell_charge[i]));
        }
    }


    bool run_simulation_hexagon()
    {
        while (total_cells.size() < layout.num_cells())
        {
            uint64_t counter = 0;

            this->layout_generation_hexagon_real();
            if (!cells.empty())
            {
                Lyt lyt{};

                for (const auto& cell : cells)
                {
                    lyt.assign_cell_type(cell, Lyt::cell_type::NORMAL);
                }

                all_layouts.emplace_back(lyt);

                layout_num = lyt.num_cells();

                std::cout << "current number of cells: " << std::to_string(lyt.num_cells()) << std::endl;
                std::cout << "border cell max index: " << std::to_string(border_cell_max_charge_index) << std::endl;
                std::cout << "border cells: " << std::to_string(border_cells.size()) << std::endl;
                std::cout << "total cells: " << std::to_string(layout.num_cells()) << std::endl;
                std::set<uint64_t> charge_index{};

                border_cell_index    = 0;
                auto lyts_collection = std::vector<charge_distribution_surface<Lyt>>{};
                std::vector<std::unordered_map<typename Lyt::cell, const sidb_defect>> all_defect_confs{};
                std::vector<std::vector<int8_t>>                                       all_charge_confs{};
                while (border_cell_index <= border_cell_max_charge_index)
                {
                    this->index_to_charge_distribution();

                    this->defect_map_update();

                    ////                    if (cells.size() > 13)
                    ////                    {

                    uint64_t charge_counter = 0;
                    for (const auto& charge_sign : defect_charge)
                    {
                        if (charge_sign == -1)
                        {
                            charge_counter += 1;
                        }
                    }
                    if (charge_counter < 0.3 * defect_cell.size() || charge_counter > 0.7 * defect_cell.size())
                    {
                        border_cell_index += 1;
                        continue;
                    }

                    if (*number_same_column.rbegin() != 4 || cells.size() > 13)
                    {
                        auto num_pairs = defect_cell.size() / 2;
                        if (defect_cell.size() % 2 != 0)
                        {
                            std::cout << "not" << std::endl;
                        }
                        //

                        //                    if (charge_counter > (num_pairs + 2) ||
                        //                        charge_counter < std::max(static_cast<uint64_t>(0),
                        //                        static_cast<uint64_t>(num_pairs - 2)))
                        if (charge_counter != num_pairs)
                        {
                            border_cell_index += 1;
                            continue;
                        }

                        //
                        uint64_t counter_small_distance = 0;

                        for (auto i = 0u; i < defect_cell.size(); i++)
                        {
                            for (auto j = 0u; j < defect_cell.size(); j++)
                            {
                                if (i == j)
                                {
                                    continue;
                                }
                                else
                                {
                                    if (defect_charge[i] == -1 && defect_charge[j] == -1 &&
                                        (sidb_nanometer_distance<Lyt>(layout, defect_cell[i], defect_cell[j],
                                                                      parameter)) < 1.9)
                                    {
                                        counter_small_distance += 1;
                                    }
                                }
                            }
                        }

                        if (counter_small_distance != 0)
                        {
                            border_cell_index += 1;
                            continue;
                        }
                    }

                    //  }

                    std::vector<int8_t> charges{};
                    for (auto i = 0u; i < defect_charge.size(); i++)
                    {
                        charges.push_back(defect_charge[i]);
                    }

                    //    std::cout << charge_configuration_to_string(defect_charges) << std::endl;
                    // std::cout << border_cell_index << std::endl;
                    std::unordered_map<typename Lyt::cell, const sidb_defect> defect{};
                    std::unordered_map<typename Lyt::cell, int8_t>            charge_collection{};
                    for (uint64_t i = 0; i < defect_cell.size(); i++)
                    {
                        defect.insert({defect_cell[i],
                                       sidb_defect{sidb_defect_type::UNKNOWN, static_cast<double>(defect_charge[i])}});
                        // charge_collection.insert({defect_cell[i], static_cast<int8_t>(defect_charge[i])});
                    }
                    border_cell_index += 1;
                    all_defect_confs.push_back(defect);
                    all_charge_confs.push_back(charges);
                }

                std::cout << "defect confs:" << std::to_string(all_defect_confs.size()) << std::endl;
                exgs_stats<Lyt>       exgs_stats{};
                quicksim_stats<Lyt>   quicksim_stats{};
                const quicksim_params quicksim_params{sidb_simulation_parameters{2, -0.32}, 1000, 0.7, 1};
                // quicksim<Lyt>(lyt, quicksim_params, &quicksim_stats, all_defect_confs);

                exhaustive_ground_state_simulation(lyt, parameter, &exgs_stats, all_defect_confs);

                std::cout << "ExGS size: " << std::to_string(exgs_stats.valid_lyts.size()) << std::endl;
                //                std::cout << "quicksim size: " << std::to_string(quicksim_stats.valid_lyts.size()) <<
                //                std::endl;

                //                                exgs_stats.valid_lyts                 = quicksim_stats.valid_lyts;
                //                                exgs_stats.defect_iter_num_valid_lyts =
                //                                quicksim_stats.defect_iter_num_valid_lyts;

                for (auto i = 0u; i < exgs_stats.valid_lyts.size(); i++)
                {
                    charge_index.insert(exgs_stats.valid_lyts[i].get_charge_index().first);
                    // border_cells_and_charge.push_back(all_charge_confs);
                    //  charge_index_in.emplace_back(charge_distribution_external_to_index(defect_cell, lyt_loop));
                }
                // charge_index_innen.emplace_back(charge_index_in);
                all_charge_lyts.emplace_back(exgs_stats.valid_lyts);
                region_num.emplace_back(counter);

                // all_defect_charges.emplace_back(defect_charge);
                //  border_cell_index += 1;

                std::vector<charge_distribution_surface<Lyt>> unique_lyts{};
                std::vector<uint64_t>                         unique_defect_confs_index{};
                for (const auto& index : charge_index)
                {
                    for (auto i = 0u; i < exgs_stats.valid_lyts.size(); i++)
                    {
                        if (exgs_stats.valid_lyts[i].get_charge_index().first == index)
                        {
                            unique_lyts.push_back(exgs_stats.valid_lyts[i]);
                            unique_defect_confs_index.push_back(exgs_stats.defect_iter_num_valid_lyts[i].second);
                            break;
                        }
                    }
                }
                lyts_of_regions.emplace_back(unique_lyts);

                all_defect_cells.emplace_back(defect_cell);

                std::vector<std::vector<int8_t>> unique_charge_confs{};
                for (auto i = 0u; i < unique_defect_confs_index.size(); i++)
                {
                    unique_charge_confs.push_back(all_charge_confs[unique_defect_confs_index[i]]);
                }
                all_defect_charges.push_back(unique_charge_confs);

                std::cout << "number valid lyts: " << charge_index.size() << std::endl;

                //                        if (charge_index.size() == 1)
                //                        {
                //                            write_sqd_layout(lyt, "/Users/jandrewniok/Desktop/investi/" +
                //                            std::to_string(total_cells.size()));
                //                        }

                // ------------- collecting all neighbor configurations

                std::vector<std::vector<int64_t>> all_defect_configurations_indices_one_gate{};
                for (const auto& index : charge_index)
                {
                    std::vector<int64_t> indices_for_one_gate_layout_index{};
                    for (auto i = 0u; i < exgs_stats.valid_lyts.size(); i++)
                    {
                        if (exgs_stats.valid_lyts[i].get_charge_index().first == index)
                        {
                            indices_for_one_gate_layout_index.push_back(
                                exgs_stats.defect_iter_num_valid_lyts[i].second);
                        }
                    }
                    all_defect_configurations_indices_one_gate.push_back(indices_for_one_gate_layout_index);
                }

                std::vector<std::vector<std::vector<int8_t>>> all_defect_configurations_one_gate{};
                for (const auto& state : all_defect_configurations_indices_one_gate)
                {
                    std::vector<std::vector<int8_t>> defect_confs_one_state{};
                    defect_confs_one_state.reserve(state.size());
                    for (const auto& defect_index : state)
                    {
                        if (all_charge_confs.size() - 1 < defect_index)
                        {
                            std::cout << std::to_string(all_charge_confs.size() - 1) << std::endl;
                            std::cout << std::to_string(defect_index) << std::endl;
                            std::cout << "error" << std::endl;
                        }
                        defect_confs_one_state.push_back(all_charge_confs[defect_index]);
                    }
                    all_defect_configurations_one_gate.push_back(defect_confs_one_state);
                }

                all_defect_configrations_all_layouts.push_back(all_defect_configurations_one_gate);
                // ----------------------------------

                if (border_cell_max_charge_index == 0 && lyt.num_cells() != 0)
                {
                    fiction::exgs_stats<Lyt> exgs_stats_second{};
                    exhaustive_ground_state_simulation(lyt, parameter, &exgs_stats_second);
                    all_charge_lyts.emplace_back(exgs_stats_second.valid_lyts);
                    region_num.emplace_back(counter);
                }
                // std::cout << all_charge_lyts.size() << std::endl;
                counter += 1;
            }
        }
        return true;
    };

    void finding_nn()
    {
        std::vector<std::set<uint64_t>> all_pairs{};
        for (auto i = 0u; i < all_defect_cells.size(); i++)
        {
            std::set<uint64_t> layout_numbers{};
            for (const auto& cell : all_defect_cells[i])
            {
                for (auto j = 0u; j < all_layouts.size(); j++)
                {
                    uint64_t counter = 0;
                    if (j != i)
                    {
                        all_layouts[j].foreach_cell(
                            [this, &cell, &counter](const auto& c)
                            {
                                if (cell == c)
                                {
                                    counter += 1;
                                }
                            });
                    }
                    if (counter != 0)
                    {
                        layout_numbers.insert(j);
                    }
                }
            }
            all_pairs.push_back(layout_numbers);
        }
        all_neighbor_pairs = all_pairs;
    }

    void combining_all_12()
    {
        auto compareFunc =
            [](const charge_distribution_surface<Lyt>& lyt1, const charge_distribution_surface<Lyt>& lyt2)
        { return lyt1.get_system_energy() < lyt2.get_system_energy(); };

        std::cout << "combining starts: " << std::to_string(lyts_of_regions.size()) << std::endl;
        uint64_t counter_lyts = 1;
        for (const auto& lyts_region : lyts_of_regions)
        {
            counter_lyts *= lyts_region.size();
        }
        std::cout << "number enumerations: " << std::to_string(counter_lyts) << std::endl;

        auto lyt_one   = lyts_of_regions[0];
        auto lyt_two   = lyts_of_regions[1];
        auto lyt_three = lyts_of_regions[2];
        auto lyt_four  = lyts_of_regions[3];
        auto lyt_five  = lyts_of_regions[4];
        auto lyt_six   = lyts_of_regions[5];
        auto lyt_seven = lyts_of_regions[6];
        auto lyt_eight = lyts_of_regions[7];
        auto lyt_nine  = lyts_of_regions[8];
        auto lyt_ten   = lyts_of_regions[9];
        auto lyt_11    = lyts_of_regions[10];
        auto lyt_12    = lyts_of_regions[11];

        //        std::sort(lyt_one.begin(), lyt_one.end(), compareFunc);
        //        std::sort(lyt_two.begin(), lyt_two.end(), compareFunc);
        //        std::sort(lyt_three.begin(), lyt_three.end(), compareFunc);
        //        std::sort(lyt_four.begin(), lyt_four.end(), compareFunc);
        //        std::sort(lyt_five.begin(), lyt_five.end(), compareFunc);
        //        std::sort(lyt_six.begin(), lyt_six.end(), compareFunc);
        //        std::sort(lyt_seven.begin(), lyt_seven.end(), compareFunc);
        //        std::sort(lyt_eight.begin(), lyt_eight.end(), compareFunc);
        //        std::sort(lyt_nine.begin(), lyt_nine.end(), compareFunc);
        //        std::sort(lyt_ten.begin(), lyt_ten.end(), compareFunc);
        //        std::sort(lyt_11.begin(), lyt_11.end(), compareFunc);
        //        std::sort(lyt_12.begin(), lyt_12.end(), compareFunc);
        //        std::sort(lyt_13.begin(), lyt_13.end(), compareFunc);
        //
        //        int                                           number = 1000;
        //        std::vector<charge_distribution_surface<Lyt>> lyt_ones(
        //            lyt_one.begin(), lyt_one.begin() + std::min(number, static_cast<int>(lyt_one.size())));
        //        std::vector<charge_distribution_surface<Lyt>> lyt_twos(
        //            lyt_two.begin(), lyt_two.begin() + std::min(number, static_cast<int>(lyt_two.size())));
        //        std::vector<charge_distribution_surface<Lyt>> lyt_threes(
        //            lyt_three.begin(), lyt_three.begin() + std::min(number, static_cast<int>(lyt_three.size())));
        //        std::vector<charge_distribution_surface<Lyt>> lyt_fours(
        //            lyt_four.begin(), lyt_four.begin() + std::min(number, static_cast<int>(lyt_four.size())));
        //
        //        std::vector<charge_distribution_surface<Lyt>> lyt_fives(
        //            lyt_five.begin(), lyt_five.begin() + std::min(number, static_cast<int>(lyt_five.size())));
        //        std::vector<charge_distribution_surface<Lyt>> lyt_sixs(
        //            lyt_six.begin(), lyt_six.begin() + std::min(number, static_cast<int>(lyt_six.size())));
        //        std::vector<charge_distribution_surface<Lyt>> lyt_sevens(
        //            lyt_seven.begin(), lyt_seven.begin() + std::min(number, static_cast<int>(lyt_seven.size())));
        //        std::vector<charge_distribution_surface<Lyt>> lyt_eights(
        //            lyt_eight.begin(), lyt_eight.begin() + std::min(number, static_cast<int>(lyt_eight.size())));
        //
        //        std::vector<charge_distribution_surface<Lyt>> lyt_nines(
        //            lyt_nine.begin(), lyt_nine.begin() + std::min(number, static_cast<int>(lyt_nine.size())));
        //        std::vector<charge_distribution_surface<Lyt>> lyt_tens(
        //            lyt_ten.begin(), lyt_ten.begin() + std::min(number, static_cast<int>(lyt_ten.size())));
        //        std::vector<charge_distribution_surface<Lyt>> lyt_11s(
        //            lyt_11.begin(), lyt_11.begin() + std::min(number, static_cast<int>(lyt_11.size())));
        //
        //        std::vector<charge_distribution_surface<Lyt>> lyt_12s(
        //            lyt_12.begin(), lyt_12.begin() + std::min(number, static_cast<int>(lyt_12.size())));
        //        std::vector<charge_distribution_surface<Lyt>> lyt_13s(
        //            lyt_13.begin(), lyt_13.begin() + std::min(number, static_cast<int>(lyt_13.size())));

        charge_distribution_surface<Lyt> charge_lyt{layout};
        uint64_t                         counter = 0;
        std::vector<double>              valid_energies{};
        double                           energy_threas = 1000;
        for (const auto& lyts_one : lyt_one)
        {
            for (const auto& lyts_two : lyt_two)
            {
                for (const auto& lyts_three : lyt_three)
                {
                    for (const auto& lyts_four : lyt_four)
                    {
                        for (const auto& lyts_five : lyt_five)
                        {
                            for (const auto& lyts_six : lyt_six)
                            {
                                for (const auto& lyts_seven : lyt_seven)
                                {
                                    for (const auto& lyts_eight : lyt_eight)
                                    {
                                        for (const auto& lyts_nine : lyt_nine)
                                        {
                                            for (const auto& lyts_ten : lyt_ten)
                                            {
                                                for (const auto& lyts_11 : lyt_11)
                                                {
                                                    for (const auto& lyts_12 : lyt_12)
                                                    {

                                                        lyts_one.foreach_cell(
                                                            [this, &charge_lyt, &lyts_one](const auto& c1) {
                                                                charge_lyt.assign_charge_state(
                                                                    c1, lyts_one.get_charge_state(c1), false);
                                                            });
                                                        lyts_two.foreach_cell(
                                                            [this, &charge_lyt, &lyts_two](const auto& c1) {
                                                                charge_lyt.assign_charge_state(
                                                                    c1, lyts_two.get_charge_state(c1), false);
                                                            });
                                                        lyts_three.foreach_cell(
                                                            [this, &charge_lyt, &lyts_three](const auto& c1) {
                                                                charge_lyt.assign_charge_state(
                                                                    c1, lyts_three.get_charge_state(c1), false);
                                                            });
                                                        lyts_four.foreach_cell(
                                                            [this, &charge_lyt, &lyts_four](const auto& c1) {
                                                                charge_lyt.assign_charge_state(
                                                                    c1, lyts_four.get_charge_state(c1), false);
                                                            });
                                                        lyts_five.foreach_cell(
                                                            [this, &charge_lyt, &lyts_five](const auto& c1) {
                                                                charge_lyt.assign_charge_state(
                                                                    c1, lyts_five.get_charge_state(c1), false);
                                                            });
                                                        lyts_six.foreach_cell(
                                                            [this, &charge_lyt, &lyts_six](const auto& c1) {
                                                                charge_lyt.assign_charge_state(
                                                                    c1, lyts_six.get_charge_state(c1), false);
                                                            });
                                                        lyts_seven.foreach_cell(
                                                            [this, &charge_lyt, &lyts_seven](const auto& c1) {
                                                                charge_lyt.assign_charge_state(
                                                                    c1, lyts_seven.get_charge_state(c1), false);
                                                            });
                                                        lyts_eight.foreach_cell(
                                                            [this, &charge_lyt, &lyts_eight](const auto& c1) {
                                                                charge_lyt.assign_charge_state(
                                                                    c1, lyts_eight.get_charge_state(c1), false);
                                                            });
                                                        lyts_nine.foreach_cell(
                                                            [this, &charge_lyt, &lyts_nine](const auto& c1) {
                                                                charge_lyt.assign_charge_state(
                                                                    c1, lyts_nine.get_charge_state(c1), false);
                                                            });
                                                        lyts_ten.foreach_cell(
                                                            [this, &charge_lyt, &lyts_ten](const auto& c1) {
                                                                charge_lyt.assign_charge_state(
                                                                    c1, lyts_ten.get_charge_state(c1), false);
                                                            });
                                                        lyts_11.foreach_cell(
                                                            [this, &charge_lyt, &lyts_11](const auto& c1) {
                                                                charge_lyt.assign_charge_state(
                                                                    c1, lyts_11.get_charge_state(c1), false);
                                                            });
                                                        lyts_12.foreach_cell(
                                                            [this, &charge_lyt, &lyts_12](const auto& c1) {
                                                                charge_lyt.assign_charge_state(
                                                                    c1, lyts_12.get_charge_state(c1), false);
                                                            });
                                                        charge_lyt.update_after_charge_change();
                                                        if (charge_lyt.is_physically_valid())
                                                        {
                                                            if (charge_lyt.get_system_energy() < energy_threas)
                                                            {
                                                                std::vector<charge_distribution_surface<Lyt>> lyts{};
                                                                std::cout << charge_lyt.get_system_energy()
                                                                          << std::endl;

                                                                sidb_simulation_result<Lyt> sim_result{};
                                                                sim_result.algorithm_name = "ExGS";
                                                                charge_distribution_surface<Lyt> charge_lyt_copy{
                                                                    charge_lyt};
                                                                lyts.emplace_back(charge_lyt_copy);
                                                                sim_result.charge_distributions = lyts;
                                                                energy_threas = charge_lyt.get_system_energy();
                                                                write_sqd_sim_result<Lyt>(
                                                                    sim_result, "/Users/jandrewniok/CLionProjects/"
                                                                                "fiction_fork/experiments/"
                                                                                "result.xml");
                                                            }
                                                        }
                                                        counter += 1;
                                                        if (counter % 1000000 == 0)
                                                        {
                                                            std::cout << counter << std::endl;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    void combining_all_16_old()
    {
        auto compareFunc =
            [](const charge_distribution_surface<Lyt>& lyt1, const charge_distribution_surface<Lyt>& lyt2)
        { return lyt1.get_system_energy() < lyt2.get_system_energy(); };

        std::cout << "combining starts: " << std::to_string(lyts_of_regions.size()) << std::endl;
        uint64_t counter_lyts = 1;
        for (const auto& lyts_region : lyts_of_regions)
        {
            counter_lyts *= lyts_region.size();
        }
        std::cout << "number enumerations: " << std::to_string(counter_lyts) << std::endl;

        auto lyt_one   = lyts_of_regions[0];
        auto lyt_two   = lyts_of_regions[1];
        auto lyt_three = lyts_of_regions[2];
        auto lyt_four  = lyts_of_regions[3];
        auto lyt_five  = lyts_of_regions[4];
        auto lyt_six   = lyts_of_regions[5];
        auto lyt_seven = lyts_of_regions[6];
        auto lyt_eight = lyts_of_regions[7];
        auto lyt_nine  = lyts_of_regions[8];
        auto lyt_ten   = lyts_of_regions[9];
        auto lyt_11    = lyts_of_regions[10];
        auto lyt_12    = lyts_of_regions[11];
        auto lyt_13    = lyts_of_regions[12];
        auto lyt_14    = lyts_of_regions[13];
        auto lyt_15    = lyts_of_regions[14];
        auto lyt_16    = lyts_of_regions[15];

        std::sort(lyt_one.begin(), lyt_one.end(), compareFunc);
        std::sort(lyt_two.begin(), lyt_two.end(), compareFunc);
        std::sort(lyt_three.begin(), lyt_three.end(), compareFunc);
        std::sort(lyt_four.begin(), lyt_four.end(), compareFunc);
        std::sort(lyt_five.begin(), lyt_five.end(), compareFunc);
        std::sort(lyt_six.begin(), lyt_six.end(), compareFunc);
        std::sort(lyt_seven.begin(), lyt_seven.end(), compareFunc);
        std::sort(lyt_eight.begin(), lyt_eight.end(), compareFunc);
        std::sort(lyt_nine.begin(), lyt_nine.end(), compareFunc);
        std::sort(lyt_ten.begin(), lyt_ten.end(), compareFunc);
        std::sort(lyt_11.begin(), lyt_11.end(), compareFunc);
        std::sort(lyt_12.begin(), lyt_12.end(), compareFunc);
        std::sort(lyt_13.begin(), lyt_13.end(), compareFunc);
        //
        //        int                                           number = 1000;
        //        std::vector<charge_distribution_surface<Lyt>> lyt_ones(
        //            lyt_one.begin(), lyt_one.begin() + std::min(number, static_cast<int>(lyt_one.size())));
        //        std::vector<charge_distribution_surface<Lyt>> lyt_twos(
        //            lyt_two.begin(), lyt_two.begin() + std::min(number, static_cast<int>(lyt_two.size())));
        //        std::vector<charge_distribution_surface<Lyt>> lyt_threes(
        //            lyt_three.begin(), lyt_three.begin() + std::min(number, static_cast<int>(lyt_three.size())));
        //        std::vector<charge_distribution_surface<Lyt>> lyt_fours(
        //            lyt_four.begin(), lyt_four.begin() + std::min(number, static_cast<int>(lyt_four.size())));
        //
        //        std::vector<charge_distribution_surface<Lyt>> lyt_fives(
        //            lyt_five.begin(), lyt_five.begin() + std::min(number, static_cast<int>(lyt_five.size())));
        //        std::vector<charge_distribution_surface<Lyt>> lyt_sixs(
        //            lyt_six.begin(), lyt_six.begin() + std::min(number, static_cast<int>(lyt_six.size())));
        //        std::vector<charge_distribution_surface<Lyt>> lyt_sevens(
        //            lyt_seven.begin(), lyt_seven.begin() + std::min(number, static_cast<int>(lyt_seven.size())));
        //        std::vector<charge_distribution_surface<Lyt>> lyt_eights(
        //            lyt_eight.begin(), lyt_eight.begin() + std::min(number, static_cast<int>(lyt_eight.size())));
        //
        //        std::vector<charge_distribution_surface<Lyt>> lyt_nines(
        //            lyt_nine.begin(), lyt_nine.begin() + std::min(number, static_cast<int>(lyt_nine.size())));
        //        std::vector<charge_distribution_surface<Lyt>> lyt_tens(
        //            lyt_ten.begin(), lyt_ten.begin() + std::min(number, static_cast<int>(lyt_ten.size())));
        //        std::vector<charge_distribution_surface<Lyt>> lyt_11s(
        //            lyt_11.begin(), lyt_11.begin() + std::min(number, static_cast<int>(lyt_11.size())));
        //
        //        std::vector<charge_distribution_surface<Lyt>> lyt_12s(
        //            lyt_12.begin(), lyt_12.begin() + std::min(number, static_cast<int>(lyt_12.size())));
        //        std::vector<charge_distribution_surface<Lyt>> lyt_13s(
        //            lyt_13.begin(), lyt_13.begin() + std::min(number, static_cast<int>(lyt_13.size())));

        charge_distribution_surface<Lyt> charge_lyt{layout};
        uint64_t                         counter = 0;
        std::vector<double>              valid_energies{};
        double                           energy_threas = 1000;
        for (const auto& lyts_one : lyt_one)
        {
            for (const auto& lyts_two : lyt_two)
            {
                for (const auto& lyts_three : lyt_three)
                {
                    for (const auto& lyts_four : lyt_four)
                    {
                        for (const auto& lyts_five : lyt_five)
                        {
                            for (const auto& lyts_six : lyt_six)
                            {
                                for (const auto& lyts_seven : lyt_seven)
                                {
                                    for (const auto& lyts_eight : lyt_eight)
                                    {
                                        for (const auto& lyts_nine : lyt_nine)
                                        {
                                            for (const auto& lyts_ten : lyt_ten)
                                            {
                                                for (const auto& lyts_11 : lyt_11)
                                                {
                                                    for (const auto& lyts_12 : lyt_12)
                                                    {
                                                        for (const auto& lyts_13 : lyt_13)
                                                        {
                                                            for (const auto& lyts_14 : lyt_14)
                                                            {
                                                                for (const auto& lyts_15 : lyt_15)
                                                                {
                                                                    for (const auto& lyts_16 : lyt_16)
                                                                    {
                                                                        lyts_one.foreach_cell(
                                                                            [this, &charge_lyt,
                                                                             &lyts_one](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1, lyts_one.get_charge_state(c1),
                                                                                    false);
                                                                            });
                                                                        lyts_two.foreach_cell(
                                                                            [this, &charge_lyt,
                                                                             &lyts_two](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1, lyts_two.get_charge_state(c1),
                                                                                    false);
                                                                            });
                                                                        lyts_three.foreach_cell(
                                                                            [this, &charge_lyt,
                                                                             &lyts_three](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1, lyts_three.get_charge_state(c1),
                                                                                    false);
                                                                            });
                                                                        lyts_four.foreach_cell(
                                                                            [this, &charge_lyt,
                                                                             &lyts_four](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1, lyts_four.get_charge_state(c1),
                                                                                    false);
                                                                            });
                                                                        lyts_five.foreach_cell(
                                                                            [this, &charge_lyt,
                                                                             &lyts_five](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1, lyts_five.get_charge_state(c1),
                                                                                    false);
                                                                            });
                                                                        lyts_six.foreach_cell(
                                                                            [this, &charge_lyt,
                                                                             &lyts_six](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1, lyts_six.get_charge_state(c1),
                                                                                    false);
                                                                            });
                                                                        lyts_seven.foreach_cell(
                                                                            [this, &charge_lyt,
                                                                             &lyts_seven](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1, lyts_seven.get_charge_state(c1),
                                                                                    false);
                                                                            });
                                                                        lyts_eight.foreach_cell(
                                                                            [this, &charge_lyt,
                                                                             &lyts_eight](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1, lyts_eight.get_charge_state(c1),
                                                                                    false);
                                                                            });
                                                                        lyts_nine.foreach_cell(
                                                                            [this, &charge_lyt,
                                                                             &lyts_nine](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1, lyts_nine.get_charge_state(c1),
                                                                                    false);
                                                                            });
                                                                        lyts_ten.foreach_cell(
                                                                            [this, &charge_lyt,
                                                                             &lyts_ten](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1, lyts_ten.get_charge_state(c1),
                                                                                    false);
                                                                            });
                                                                        lyts_11.foreach_cell(
                                                                            [this, &charge_lyt,
                                                                             &lyts_11](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1, lyts_11.get_charge_state(c1),
                                                                                    false);
                                                                            });
                                                                        lyts_12.foreach_cell(
                                                                            [this, &charge_lyt,
                                                                             &lyts_12](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1, lyts_12.get_charge_state(c1),
                                                                                    false);
                                                                            });
                                                                        lyts_13.foreach_cell(
                                                                            [this, &charge_lyt,
                                                                             &lyts_13](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1, lyts_13.get_charge_state(c1),
                                                                                    false);
                                                                            });
                                                                        lyts_14.foreach_cell(
                                                                            [this, &charge_lyt,
                                                                             &lyts_14](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1, lyts_14.get_charge_state(c1),
                                                                                    false);
                                                                            });
                                                                        lyts_15.foreach_cell(
                                                                            [this, &charge_lyt,
                                                                             &lyts_15](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1, lyts_15.get_charge_state(c1),
                                                                                    false);
                                                                            });
                                                                        lyts_16.foreach_cell(
                                                                            [this, &charge_lyt,
                                                                             &lyts_16](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1, lyts_16.get_charge_state(c1),
                                                                                    false);
                                                                            });
                                                                        charge_lyt.update_after_charge_change();
                                                                        if (charge_lyt.is_physically_valid())
                                                                        {
                                                                            if (charge_lyt.get_system_energy() <
                                                                                energy_threas)
                                                                            {
                                                                                std::vector<
                                                                                    charge_distribution_surface<Lyt>>
                                                                                    lyts{};
                                                                                std::cout
                                                                                    << charge_lyt.get_system_energy()
                                                                                    << std::endl;

                                                                                sidb_simulation_result<Lyt>
                                                                                    sim_result{};
                                                                                sim_result.algorithm_name = "ExGS";
                                                                                charge_distribution_surface<Lyt>
                                                                                    charge_lyt_copy{charge_lyt};
                                                                                lyts.emplace_back(charge_lyt_copy);
                                                                                sim_result.charge_distributions = lyts;
                                                                                energy_threas =
                                                                                    charge_lyt.get_system_energy();
                                                                                write_sqd_sim_result<Lyt>(
                                                                                    sim_result,
                                                                                    "/Users/jandrewniok/CLionProjects/"
                                                                                    "fiction_fork/experiments/"
                                                                                    "result.xml");
                                                                            }
                                                                        }
                                                                        counter += 1;
                                                                        if (counter % 1000000 == 0)
                                                                        {
                                                                            std::cout << counter << std::endl;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    void combining_all_13()
    {
        auto compareFunc =
            [](const charge_distribution_surface<Lyt>& lyt1, const charge_distribution_surface<Lyt>& lyt2)
        { return lyt1.get_system_energy() < lyt2.get_system_energy(); };

        std::cout << "combining starts: " << std::to_string(lyts_of_regions.size()) << std::endl;
        uint64_t counter_lyts = 1;
        for (const auto& lyts_region : lyts_of_regions)
        {
            counter_lyts *= lyts_region.size();
        }
        std::cout << "number enumerations: " << std::to_string(counter_lyts) << std::endl;

        auto lyt_one   = lyts_of_regions[0];
        auto lyt_two   = lyts_of_regions[1];
        auto lyt_three = lyts_of_regions[2];
        auto lyt_four  = lyts_of_regions[3];
        auto lyt_five  = lyts_of_regions[4];
        auto lyt_six   = lyts_of_regions[5];
        auto lyt_seven = lyts_of_regions[6];
        auto lyt_eight = lyts_of_regions[7];
        auto lyt_nine  = lyts_of_regions[8];
        auto lyt_ten   = lyts_of_regions[9];
        auto lyt_11    = lyts_of_regions[10];
        auto lyt_12    = lyts_of_regions[11];
        auto lyt_13    = lyts_of_regions[12];

        std::sort(lyt_one.begin(), lyt_one.end(), compareFunc);
        std::sort(lyt_two.begin(), lyt_two.end(), compareFunc);
        std::sort(lyt_three.begin(), lyt_three.end(), compareFunc);
        std::sort(lyt_four.begin(), lyt_four.end(), compareFunc);
        std::sort(lyt_five.begin(), lyt_five.end(), compareFunc);
        std::sort(lyt_six.begin(), lyt_six.end(), compareFunc);
        std::sort(lyt_seven.begin(), lyt_seven.end(), compareFunc);
        std::sort(lyt_eight.begin(), lyt_eight.end(), compareFunc);
        std::sort(lyt_nine.begin(), lyt_nine.end(), compareFunc);
        std::sort(lyt_ten.begin(), lyt_ten.end(), compareFunc);
        std::sort(lyt_11.begin(), lyt_11.end(), compareFunc);
        std::sort(lyt_12.begin(), lyt_12.end(), compareFunc);
        std::sort(lyt_13.begin(), lyt_13.end(), compareFunc);

        int                                           number = 1000;
        std::vector<charge_distribution_surface<Lyt>> lyt_ones(
            lyt_one.begin(), lyt_one.begin() + std::min(number, static_cast<int>(lyt_one.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_twos(
            lyt_two.begin(), lyt_two.begin() + std::min(number, static_cast<int>(lyt_two.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_threes(
            lyt_three.begin(), lyt_three.begin() + std::min(number, static_cast<int>(lyt_three.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_fours(
            lyt_four.begin(), lyt_four.begin() + std::min(number, static_cast<int>(lyt_four.size())));

        std::vector<charge_distribution_surface<Lyt>> lyt_fives(
            lyt_five.begin(), lyt_five.begin() + std::min(number, static_cast<int>(lyt_five.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_sixs(
            lyt_six.begin(), lyt_six.begin() + std::min(number, static_cast<int>(lyt_six.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_sevens(
            lyt_seven.begin(), lyt_seven.begin() + std::min(number, static_cast<int>(lyt_seven.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_eights(
            lyt_eight.begin(), lyt_eight.begin() + std::min(number, static_cast<int>(lyt_eight.size())));

        std::vector<charge_distribution_surface<Lyt>> lyt_nines(
            lyt_nine.begin(), lyt_nine.begin() + std::min(number, static_cast<int>(lyt_nine.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_tens(
            lyt_ten.begin(), lyt_ten.begin() + std::min(number, static_cast<int>(lyt_ten.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_11s(
            lyt_11.begin(), lyt_11.begin() + std::min(number, static_cast<int>(lyt_11.size())));

        std::vector<charge_distribution_surface<Lyt>> lyt_12s(
            lyt_12.begin(), lyt_12.begin() + std::min(number, static_cast<int>(lyt_12.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_13s(
            lyt_13.begin(), lyt_13.begin() + std::min(number, static_cast<int>(lyt_13.size())));

        charge_distribution_surface<Lyt> charge_lyt{layout};
        uint64_t                         counter = 0;
        std::vector<double>              valid_energies{};
        double                           energy_threas = 1000;
        for (const auto& lyts_one : lyt_ones)
        {
            for (const auto& lyts_two : lyt_twos)
            {
                for (const auto& lyts_three : lyt_threes)
                {
                    for (const auto& lyts_four : lyt_fours)
                    {
                        for (const auto& lyts_five : lyt_fives)
                        {
                            for (const auto& lyts_six : lyt_sixs)
                            {
                                for (const auto& lyts_seven : lyt_sevens)
                                {
                                    for (const auto& lyts_eight : lyt_eights)
                                    {
                                        for (const auto& lyts_nine : lyt_nines)
                                        {
                                            for (const auto& lyts_ten : lyt_tens)
                                            {
                                                for (const auto& lyts_11 : lyt_11s)
                                                {
                                                    for (const auto& lyts_12 : lyt_12s)
                                                    {
                                                        for (const auto& lyts_13 : lyt_13s)
                                                        {
                                                            lyts_one.foreach_cell(
                                                                [this, &charge_lyt, &lyts_one](const auto& c1) {
                                                                    charge_lyt.assign_charge_state(
                                                                        c1, lyts_one.get_charge_state(c1), false);
                                                                });
                                                            lyts_two.foreach_cell(
                                                                [this, &charge_lyt, &lyts_two](const auto& c1) {
                                                                    charge_lyt.assign_charge_state(
                                                                        c1, lyts_two.get_charge_state(c1), false);
                                                                });
                                                            lyts_three.foreach_cell(
                                                                [this, &charge_lyt, &lyts_three](const auto& c1) {
                                                                    charge_lyt.assign_charge_state(
                                                                        c1, lyts_three.get_charge_state(c1), false);
                                                                });
                                                            lyts_four.foreach_cell(
                                                                [this, &charge_lyt, &lyts_four](const auto& c1) {
                                                                    charge_lyt.assign_charge_state(
                                                                        c1, lyts_four.get_charge_state(c1), false);
                                                                });
                                                            lyts_five.foreach_cell(
                                                                [this, &charge_lyt, &lyts_five](const auto& c1) {
                                                                    charge_lyt.assign_charge_state(
                                                                        c1, lyts_five.get_charge_state(c1), false);
                                                                });
                                                            lyts_six.foreach_cell(
                                                                [this, &charge_lyt, &lyts_six](const auto& c1) {
                                                                    charge_lyt.assign_charge_state(
                                                                        c1, lyts_six.get_charge_state(c1), false);
                                                                });
                                                            lyts_seven.foreach_cell(
                                                                [this, &charge_lyt, &lyts_seven](const auto& c1) {
                                                                    charge_lyt.assign_charge_state(
                                                                        c1, lyts_seven.get_charge_state(c1), false);
                                                                });
                                                            lyts_eight.foreach_cell(
                                                                [this, &charge_lyt, &lyts_eight](const auto& c1) {
                                                                    charge_lyt.assign_charge_state(
                                                                        c1, lyts_eight.get_charge_state(c1), false);
                                                                });
                                                            lyts_nine.foreach_cell(
                                                                [this, &charge_lyt, &lyts_nine](const auto& c1) {
                                                                    charge_lyt.assign_charge_state(
                                                                        c1, lyts_nine.get_charge_state(c1), false);
                                                                });
                                                            lyts_ten.foreach_cell(
                                                                [this, &charge_lyt, &lyts_ten](const auto& c1) {
                                                                    charge_lyt.assign_charge_state(
                                                                        c1, lyts_ten.get_charge_state(c1), false);
                                                                });
                                                            lyts_11.foreach_cell(
                                                                [this, &charge_lyt, &lyts_11](const auto& c1) {
                                                                    charge_lyt.assign_charge_state(
                                                                        c1, lyts_11.get_charge_state(c1), false);
                                                                });
                                                            lyts_12.foreach_cell(
                                                                [this, &charge_lyt, &lyts_12](const auto& c1) {
                                                                    charge_lyt.assign_charge_state(
                                                                        c1, lyts_12.get_charge_state(c1), false);
                                                                });
                                                            lyts_13.foreach_cell(
                                                                [this, &charge_lyt, &lyts_13](const auto& c1) {
                                                                    charge_lyt.assign_charge_state(
                                                                        c1, lyts_13.get_charge_state(c1), false);
                                                                });
                                                            charge_lyt.update_after_charge_change();
                                                            if (charge_lyt.is_physically_valid())
                                                            {
                                                                if (charge_lyt.get_system_energy() < energy_threas)
                                                                {
                                                                    std::vector<charge_distribution_surface<Lyt>>
                                                                        lyts{};
                                                                    std::cout << charge_lyt.get_system_energy()
                                                                              << std::endl;

                                                                    sidb_simulation_result<Lyt> sim_result{};
                                                                    sim_result.algorithm_name = "ExGS";
                                                                    charge_distribution_surface<Lyt> charge_lyt_copy{
                                                                        charge_lyt};
                                                                    lyts.emplace_back(charge_lyt_copy);
                                                                    sim_result.charge_distributions = lyts;
                                                                    energy_threas = charge_lyt.get_system_energy();
                                                                    write_sqd_sim_result<Lyt>(
                                                                        sim_result, "/Users/jandrewniok/CLionProjects/"
                                                                                    "fiction_fork/experiments/"
                                                                                    "result.xml");
                                                                }
                                                            }
                                                            counter += 1;
                                                            if (counter % 1000000 == 0)
                                                            {
                                                                std::cout << counter << std::endl;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    void combining_all_11()
    {
        auto compareFunc =
            [](const charge_distribution_surface<Lyt>& lyt1, const charge_distribution_surface<Lyt>& lyt2)
        { return lyt1.get_system_energy() < lyt2.get_system_energy(); };

        std::cout << "combining starts: " << std::to_string(lyts_of_regions.size()) << std::endl;
        uint64_t counter_lyts = 1;
        for (const auto& lyts_region : lyts_of_regions)
        {
            counter_lyts *= lyts_region.size();
        }
        std::cout << "number enumerations: " << std::to_string(counter_lyts) << std::endl;

        auto lyt_one   = lyts_of_regions[0];
        auto lyt_two   = lyts_of_regions[1];
        auto lyt_three = lyts_of_regions[2];
        auto lyt_four  = lyts_of_regions[3];
        auto lyt_five  = lyts_of_regions[4];
        auto lyt_six   = lyts_of_regions[5];
        auto lyt_seven = lyts_of_regions[6];
        auto lyt_eight = lyts_of_regions[7];
        auto lyt_nine  = lyts_of_regions[8];
        auto lyt_ten   = lyts_of_regions[9];
        auto lyt_11    = lyts_of_regions[10];

        std::sort(lyt_one.begin(), lyt_one.end(), compareFunc);
        std::sort(lyt_two.begin(), lyt_two.end(), compareFunc);
        std::sort(lyt_three.begin(), lyt_three.end(), compareFunc);
        std::sort(lyt_four.begin(), lyt_four.end(), compareFunc);
        std::sort(lyt_five.begin(), lyt_five.end(), compareFunc);
        std::sort(lyt_six.begin(), lyt_six.end(), compareFunc);
        std::sort(lyt_seven.begin(), lyt_seven.end(), compareFunc);
        std::sort(lyt_eight.begin(), lyt_eight.end(), compareFunc);
        std::sort(lyt_nine.begin(), lyt_nine.end(), compareFunc);
        std::sort(lyt_ten.begin(), lyt_ten.end(), compareFunc);
        std::sort(lyt_11.begin(), lyt_11.end(), compareFunc);

        int                                           number = 1000;
        std::vector<charge_distribution_surface<Lyt>> lyt_ones(
            lyt_one.begin(), lyt_one.begin() + std::min(number, static_cast<int>(lyt_one.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_twos(
            lyt_two.begin(), lyt_two.begin() + std::min(number, static_cast<int>(lyt_two.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_threes(
            lyt_three.begin(), lyt_three.begin() + std::min(number, static_cast<int>(lyt_three.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_fours(
            lyt_four.begin(), lyt_four.begin() + std::min(number, static_cast<int>(lyt_four.size())));

        std::vector<charge_distribution_surface<Lyt>> lyt_fives(
            lyt_five.begin(), lyt_five.begin() + std::min(number, static_cast<int>(lyt_five.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_sixs(
            lyt_six.begin(), lyt_six.begin() + std::min(number, static_cast<int>(lyt_six.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_sevens(
            lyt_seven.begin(), lyt_seven.begin() + std::min(number, static_cast<int>(lyt_seven.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_eights(
            lyt_eight.begin(), lyt_eight.begin() + std::min(number, static_cast<int>(lyt_eight.size())));

        std::vector<charge_distribution_surface<Lyt>> lyt_nines(
            lyt_nine.begin(), lyt_nine.begin() + std::min(number, static_cast<int>(lyt_nine.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_tens(
            lyt_ten.begin(), lyt_ten.begin() + std::min(number, static_cast<int>(lyt_ten.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_11s(
            lyt_11.begin(), lyt_11.begin() + std::min(number, static_cast<int>(lyt_11.size())));

        charge_distribution_surface<Lyt> charge_lyt{layout};
        uint64_t                         counter = 0;
        std::vector<double>              valid_energies{};
        double                           energy_threas = 1000;
        for (const auto& lyts_one : lyt_ones)
        {
            for (const auto& lyts_two : lyt_twos)
            {
                for (const auto& lyts_three : lyt_threes)
                {
                    for (const auto& lyts_four : lyt_fours)
                    {
                        for (const auto& lyts_five : lyt_fives)
                        {
                            for (const auto& lyts_six : lyt_sixs)
                            {
                                for (const auto& lyts_seven : lyt_sevens)
                                {
                                    for (const auto& lyts_eight : lyt_eights)
                                    {
                                        for (const auto& lyts_nine : lyt_nines)
                                        {
                                            for (const auto& lyts_ten : lyt_tens)
                                            {
                                                for (const auto& lyts_11 : lyt_11s)
                                                {
                                                    lyts_one.foreach_cell(
                                                        [this, &charge_lyt, &lyts_one](const auto& c1) {
                                                            charge_lyt.assign_charge_state(
                                                                c1, lyts_one.get_charge_state(c1), false);
                                                        });
                                                    lyts_two.foreach_cell(
                                                        [this, &charge_lyt, &lyts_two](const auto& c1) {
                                                            charge_lyt.assign_charge_state(
                                                                c1, lyts_two.get_charge_state(c1), false);
                                                        });
                                                    lyts_three.foreach_cell(
                                                        [this, &charge_lyt, &lyts_three](const auto& c1) {
                                                            charge_lyt.assign_charge_state(
                                                                c1, lyts_three.get_charge_state(c1), false);
                                                        });
                                                    lyts_four.foreach_cell(
                                                        [this, &charge_lyt, &lyts_four](const auto& c1) {
                                                            charge_lyt.assign_charge_state(
                                                                c1, lyts_four.get_charge_state(c1), false);
                                                        });
                                                    lyts_five.foreach_cell(
                                                        [this, &charge_lyt, &lyts_five](const auto& c1) {
                                                            charge_lyt.assign_charge_state(
                                                                c1, lyts_five.get_charge_state(c1), false);
                                                        });
                                                    lyts_six.foreach_cell(
                                                        [this, &charge_lyt, &lyts_six](const auto& c1) {
                                                            charge_lyt.assign_charge_state(
                                                                c1, lyts_six.get_charge_state(c1), false);
                                                        });
                                                    lyts_seven.foreach_cell(
                                                        [this, &charge_lyt, &lyts_seven](const auto& c1) {
                                                            charge_lyt.assign_charge_state(
                                                                c1, lyts_seven.get_charge_state(c1), false);
                                                        });
                                                    lyts_eight.foreach_cell(
                                                        [this, &charge_lyt, &lyts_eight](const auto& c1) {
                                                            charge_lyt.assign_charge_state(
                                                                c1, lyts_eight.get_charge_state(c1), false);
                                                        });
                                                    lyts_nine.foreach_cell(
                                                        [this, &charge_lyt, &lyts_nine](const auto& c1) {
                                                            charge_lyt.assign_charge_state(
                                                                c1, lyts_nine.get_charge_state(c1), false);
                                                        });
                                                    lyts_ten.foreach_cell(
                                                        [this, &charge_lyt, &lyts_ten](const auto& c1) {
                                                            charge_lyt.assign_charge_state(
                                                                c1, lyts_ten.get_charge_state(c1), false);
                                                        });
                                                    lyts_11.foreach_cell(
                                                        [this, &charge_lyt, &lyts_11](const auto& c1) {
                                                            charge_lyt.assign_charge_state(
                                                                c1, lyts_11.get_charge_state(c1), false);
                                                        });
                                                    charge_lyt.update_after_charge_change();
                                                    if (charge_lyt.is_physically_valid())
                                                    {
                                                        std::cout << charge_lyt.get_system_energy() << std::endl;
                                                        if (charge_lyt.get_system_energy() < energy_threas)
                                                        {
                                                            std::vector<charge_distribution_surface<Lyt>> lyts{};
                                                            std::cout << charge_lyt.get_system_energy() << std::endl;

                                                            sidb_simulation_result<Lyt> sim_result{};
                                                            sim_result.algorithm_name = "ExGS";
                                                            charge_distribution_surface<Lyt> charge_lyt_copy{
                                                                charge_lyt};
                                                            lyts.emplace_back(charge_lyt_copy);
                                                            sim_result.charge_distributions = lyts;
                                                            energy_threas = charge_lyt.get_system_energy();
                                                            write_sqd_sim_result<Lyt>(
                                                                sim_result, "/Users/jandrewniok/CLionProjects/"
                                                                            "fiction_fork/experiments/"
                                                                            "result.xml");
                                                        }
                                                    }
                                                    counter += 1;
                                                    if (counter % 1000000 == 0)
                                                    {
                                                        std::cout << counter << std::endl;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    void combining_all_less()
    {
        auto compareFunc =
            [](const charge_distribution_surface<Lyt>& lyt1, const charge_distribution_surface<Lyt>& lyt2)
        { return lyt1.get_system_energy() < lyt2.get_system_energy(); };

        std::cout << "combining starts: " << std::to_string(lyts_of_regions.size()) << std::endl;
        uint64_t counter_lyts = 1;
        for (const auto& lyts_region : lyts_of_regions)
        {
            counter_lyts *= lyts_region.size();
        }
        std::cout << "number enumerations: " << std::to_string(counter_lyts) << std::endl;

        auto lyt_one   = lyts_of_regions[0];
        auto lyt_two   = lyts_of_regions[1];
        auto lyt_three = lyts_of_regions[2];
        auto lyt_four  = lyts_of_regions[3];
        auto lyt_five  = lyts_of_regions[4];
        auto lyt_six   = lyts_of_regions[5];
        auto lyt_seven = lyts_of_regions[6];
        auto lyt_eight = lyts_of_regions[7];
        auto lyt_nine  = lyts_of_regions[8];
        auto lyt_ten   = lyts_of_regions[9];
        auto lyt_11    = lyts_of_regions[10];
        auto lyt_12    = lyts_of_regions[11];
        auto lyt_13    = lyts_of_regions[12];
        auto lyt_14    = lyts_of_regions[13];
        auto lyt_15    = lyts_of_regions[14];
        auto lyt_16    = lyts_of_regions[15];

        std::sort(lyt_one.begin(), lyt_one.end(), compareFunc);
        std::sort(lyt_two.begin(), lyt_two.end(), compareFunc);
        std::sort(lyt_three.begin(), lyt_three.end(), compareFunc);
        std::sort(lyt_four.begin(), lyt_four.end(), compareFunc);
        std::sort(lyt_five.begin(), lyt_five.end(), compareFunc);
        std::sort(lyt_six.begin(), lyt_six.end(), compareFunc);
        std::sort(lyt_seven.begin(), lyt_seven.end(), compareFunc);
        std::sort(lyt_eight.begin(), lyt_eight.end(), compareFunc);
        std::sort(lyt_nine.begin(), lyt_nine.end(), compareFunc);
        std::sort(lyt_ten.begin(), lyt_ten.end(), compareFunc);
        std::sort(lyt_11.begin(), lyt_11.end(), compareFunc);
        std::sort(lyt_12.begin(), lyt_12.end(), compareFunc);
        std::sort(lyt_13.begin(), lyt_13.end(), compareFunc);
        std::sort(lyt_14.begin(), lyt_14.end(), compareFunc);
        std::sort(lyt_15.begin(), lyt_15.end(), compareFunc);
        std::sort(lyt_16.begin(), lyt_16.end(), compareFunc);

        int                                           number = 5;
        std::vector<charge_distribution_surface<Lyt>> lyt_ones(
            lyt_one.begin(), lyt_one.begin() + std::min(number, static_cast<int>(lyt_one.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_twos(
            lyt_two.begin(), lyt_two.begin() + std::min(number, static_cast<int>(lyt_two.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_threes(
            lyt_three.begin(), lyt_three.begin() + std::min(number, static_cast<int>(lyt_three.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_fours(
            lyt_four.begin(), lyt_four.begin() + std::min(number, static_cast<int>(lyt_four.size())));

        std::vector<charge_distribution_surface<Lyt>> lyt_fives(
            lyt_five.begin(), lyt_five.begin() + std::min(number, static_cast<int>(lyt_five.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_sixs(
            lyt_six.begin(), lyt_six.begin() + std::min(number, static_cast<int>(lyt_six.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_sevens(
            lyt_seven.begin(), lyt_seven.begin() + std::min(number, static_cast<int>(lyt_seven.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_eights(
            lyt_eight.begin(), lyt_eight.begin() + std::min(number, static_cast<int>(lyt_eight.size())));

        std::vector<charge_distribution_surface<Lyt>> lyt_nines(
            lyt_nine.begin(), lyt_nine.begin() + std::min(number, static_cast<int>(lyt_nine.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_tens(
            lyt_ten.begin(), lyt_ten.begin() + std::min(number, static_cast<int>(lyt_ten.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_11s(
            lyt_11.begin(), lyt_11.begin() + std::min(number, static_cast<int>(lyt_11.size())));

        std::vector<charge_distribution_surface<Lyt>> lyt_12s(
            lyt_12.begin(), lyt_12.begin() + std::min(number, static_cast<int>(lyt_12.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_13s(
            lyt_13.begin(), lyt_13.begin() + std::min(number, static_cast<int>(lyt_13.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_14s(
            lyt_14.begin(), lyt_14.begin() + std::min(number, static_cast<int>(lyt_14.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_15s(
            lyt_15.begin(), lyt_15.begin() + std::min(number, static_cast<int>(lyt_15.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_16s(
            lyt_16.begin(), lyt_16.begin() + std::min(number, static_cast<int>(lyt_16.size())));

        charge_distribution_surface<Lyt> charge_lyt{layout};
        uint64_t                         counter = 0;
        std::vector<double>              valid_energies{};
        double                           energy_threas = 1000;
        for (auto i = 0u; i < lyt_one.size(); i++)
        {
            for (auto j = 0u; j < lyt_two.size(); j++)
            {
                for (auto three = 0u; three < lyt_three.size(); three++)
                {
                    for (auto four = 0u; four < lyt_four.size(); four++)
                    {
                        for (auto five = 0u; five < lyt_five.size(); five++)
                        {
                            for (const auto& lyts_six : lyt_six)
                            {
                                uint64_t counter_unmatched_one = 0;
                                for (const auto& neighbor_cell : all_defect_cells[0])
                                {
                                    lyts_six.foreach_cell(
                                        [&counter_unmatched_one, &neighbor_cell, &lyts_six, &i, this](const auto& c1)
                                        {
                                            if (c1 == neighbor_cell)
                                            {
                                                if (charge_state_to_sign(lyts_six.get_charge_state(c1)) !=
                                                    get_charge_state_defect(0, i, c1))
                                                {
                                                    counter_unmatched_one += 1;
                                                }
                                            }
                                        });
                                }
                                if (counter_unmatched_one != 0)
                                {
                                    continue;
                                }
                                //

                                uint64_t counter_unmatched_two = 0;
                                for (const auto& neighbor_cell : all_defect_cells[1])
                                {
                                    lyts_six.foreach_cell(
                                        [&counter_unmatched_two, &neighbor_cell, &lyts_six, &j, this](const auto& c1)
                                        {
                                            if (c1 == neighbor_cell)
                                            {
                                                if (charge_state_to_sign(lyts_six.get_charge_state(c1)) !=
                                                    get_charge_state_defect(1, j, c1))
                                                {
                                                    counter_unmatched_two += 1;
                                                }
                                            }
                                        });
                                }
                                if (counter_unmatched_two != 0)
                                {
                                    continue;
                                }

                                for (const auto& lyts_seven : lyt_seven)
                                {
                                    uint64_t counter_three = 0;
                                    for (const auto& neighbor_cell : all_defect_cells[2])
                                    {
                                        lyts_seven.foreach_cell(
                                            [&counter_three, &neighbor_cell, &lyts_seven, &three, this](const auto& c1)
                                            {
                                                if (c1 == neighbor_cell)
                                                {
                                                    if (charge_state_to_sign(lyts_seven.get_charge_state(c1)) !=
                                                        get_charge_state_defect(2, three, c1))
                                                    {
                                                        counter_three += 1;
                                                    }
                                                }
                                            });
                                    }
                                    if (counter_three != 0)
                                    {
                                        continue;
                                    }

                                    for (auto eight = 0u; eight < lyt_eight.size(); eight++)
                                    {
                                        uint64_t counter_unmatched_4 = 0;
                                        for (const auto& neighbor_cell_four : all_defect_cells[3])
                                        {
                                            lyt_eight[eight].foreach_cell(
                                                [&counter_unmatched_4, &neighbor_cell_four, &lyt_eight, &four, &eight,
                                                 this](const auto& c1)
                                                {
                                                    if (c1 == neighbor_cell_four)
                                                    {
                                                        if (charge_state_to_sign(lyt_eight[eight].get_charge_state(
                                                                c1)) != get_charge_state_defect(3, four, c1))
                                                        {
                                                            counter_unmatched_4 += 1;
                                                        }
                                                    }
                                                });
                                        }
                                        if (counter_unmatched_4 != 0)
                                        {
                                            continue;
                                        }

                                        for (auto nine = 0u; nine < lyt_nine.size(); nine++)
                                        {
                                            //                                            uint64_t
                                            //                                            counter_unmatched_five = 0;
                                            //                                            for (const auto&
                                            //                                            neighbor_cell_five :
                                            //                                            all_defect_cells[4])
                                            //                                            {
                                            //                                                lyt_nine[nine].foreach_cell(
                                            //                                                    [&counter_unmatched_five,
                                            //                                                    &neighbor_cell_five,
                                            //                                                    &lyt_nine, &five,
                                            //                                                    &nine, this](const
                                            //                                                    auto& c1)
                                            //                                                    {
                                            //                                                        if (c1 ==
                                            //                                                        neighbor_cell_five)
                                            //                                                        {
                                            //                                                            if
                                            //                                                            (charge_state_to_sign(lyt_nine[nine].get_charge_state(c1))
                                            //                                                            !=
                                            //                                                                get_charge_state_defect(4,
                                            //                                                                five, c1))
                                            //                                                            {
                                            //                                                                counter_unmatched_five
                                            //                                                                += 1;
                                            //                                                            }
                                            //                                                        }
                                            //                                                    });
                                            //                                            }
                                            //                                            if (counter_unmatched_five !=
                                            //                                            0)
                                            //                                            {
                                            //                                                continue;
                                            //                                            }

                                            for (auto t = 0u; t < lyt_ten.size(); t++)
                                            {
                                                for (auto l = 0u; l < lyt_11.size(); l++)
                                                {
                                                    for (const auto& lyts_12 : lyt_12)
                                                    {
                                                        //                                                        uint64_t
                                                        //                                                        counter_unmatched_9
                                                        //                                                        = 0;
                                                        //                                                        for
                                                        //                                                        (const
                                                        //                                                        auto&
                                                        //                                                        neighbor_cell_nine
                                                        //                                                        :
                                                        //                                                        all_defect_cells[8])
                                                        //                                                        {
                                                        //                                                            lyts_12.foreach_cell(
                                                        //                                                                [&counter_unmatched_9, &neighbor_cell_nine, &lyts_12, &nine, this](const auto& c1)
                                                        //                                                                {
                                                        //                                                                    if (c1 == neighbor_cell_nine)
                                                        //                                                                    {
                                                        //                                                                        if (charge_state_to_sign(lyts_12.get_charge_state(c1)) !=
                                                        //                                                                            get_charge_state_defect(8, nine, c1))
                                                        //                                                                        {
                                                        //                                                                            counter_unmatched_9 += 1;
                                                        //                                                                        }
                                                        //                                                                    }
                                                        //                                                                });
                                                        //                                                        }
                                                        //                                                        if
                                                        //                                                        (counter_unmatched_9
                                                        //                                                        != 0)
                                                        //                                                        {
                                                        //                                                            continue;
                                                        //                                                        }
                                                        //
                                                        //                                                        uint64_t
                                                        //                                                        counter_unmatched_8
                                                        //                                                        = 0;
                                                        //                                                        for
                                                        //                                                        (const
                                                        //                                                        auto&
                                                        //                                                        neighbor_cell_eight
                                                        //                                                        :
                                                        //                                                        all_defect_cells[7])
                                                        //                                                        {
                                                        //                                                            lyts_12.foreach_cell(
                                                        //                                                                [&counter_unmatched_8, &neighbor_cell_eight, &lyts_12, &eight, this](const auto& c1)
                                                        //                                                                {
                                                        //                                                                    if (c1 == neighbor_cell_eight)
                                                        //                                                                    {
                                                        //                                                                        if (charge_state_to_sign(lyts_12.get_charge_state(c1)) !=
                                                        //                                                                            get_charge_state_defect(7, eight, c1))
                                                        //                                                                        {
                                                        //                                                                            counter_unmatched_8 += 1;
                                                        //                                                                        }
                                                        //                                                                    }
                                                        //                                                                });
                                                        //                                                        }
                                                        //                                                        if
                                                        //                                                        (counter_unmatched_8
                                                        //                                                        != 0)
                                                        //                                                        {
                                                        //                                                            continue;
                                                        //                                                        }

                                                        for (const auto& lyts_13 : lyt_13)
                                                        {
                                                            //                                                            uint64_t counter_unmatched_eleven = 0;
                                                            //                                                            for (const auto& neighbor_cell : all_defect_cells[10])
                                                            //                                                            {
                                                            //                                                                lyts_13.foreach_cell(
                                                            //                                                                    [&counter_unmatched_eleven, &neighbor_cell, &lyts_13, &l, this](const auto& c1)
                                                            //                                                                    {
                                                            //                                                                        if (c1 == neighbor_cell)
                                                            //                                                                        {
                                                            //                                                                            if (charge_state_to_sign(lyts_13.get_charge_state(c1)) !=
                                                            //                                                                                get_charge_state_defect(10, l, c1))
                                                            //                                                                            {
                                                            //                                                                                counter_unmatched_eleven += 1;
                                                            //                                                                            }
                                                            //                                                                        }
                                                            //                                                                    });
                                                            //                                                            }
                                                            //                                                            if (counter_unmatched_eleven != 0)
                                                            //                                                            {
                                                            //                                                                continue;
                                                            //                                                            }
                                                            //
                                                            //                                                            uint64_t counter_unmatched_13 = 0;
                                                            //                                                            for (const auto& neighbor_cell : all_defect_cells[9])
                                                            //                                                            {
                                                            //                                                                lyts_13.foreach_cell(
                                                            //                                                                    [&counter_unmatched_13, &neighbor_cell, &lyts_13, &t, this](const auto& c1)
                                                            //                                                                    {
                                                            //                                                                        if (c1 == neighbor_cell)
                                                            //                                                                        {
                                                            //                                                                            if (charge_state_to_sign(lyts_13.get_charge_state(c1)) !=
                                                            //                                                                                get_charge_state_defect(9, t, c1))
                                                            //                                                                            {
                                                            //                                                                                counter_unmatched_13 += 1;
                                                            //                                                                            }
                                                            //                                                                        }
                                                            //                                                                    });
                                                            //                                                            }
                                                            //                                                            if (counter_unmatched_13 != 0)
                                                            //                                                            {
                                                            //                                                                continue;
                                                            //                                                            }

                                                            for (const auto& lyts_14 : lyt_14)
                                                            {
                                                                for (const auto& lyts_15 : lyt_15)
                                                                {
                                                                    for (const auto& lyts_16 : lyt_16)
                                                                    {
                                                                        lyt_one[i].foreach_cell(
                                                                            [this, &charge_lyt, &lyt_one,
                                                                             &i](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1, lyt_one[i].get_charge_state(c1),
                                                                                    false);
                                                                            });
                                                                        lyt_two[j].foreach_cell(
                                                                            [this, &charge_lyt, &lyt_two,
                                                                             &j](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1, lyt_two[j].get_charge_state(c1),
                                                                                    false);
                                                                            });
                                                                        lyt_three[three].foreach_cell(
                                                                            [this, &charge_lyt, &lyt_three,
                                                                             &three](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1,
                                                                                    lyt_three[three].get_charge_state(
                                                                                        c1),
                                                                                    false);
                                                                            });
                                                                        lyt_four[four].foreach_cell(
                                                                            [this, &charge_lyt, &lyt_four,
                                                                             &four](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1,
                                                                                    lyt_four[four].get_charge_state(c1),
                                                                                    false);
                                                                            });
                                                                        lyt_five[five].foreach_cell(
                                                                            [this, &charge_lyt, &lyt_five,
                                                                             &five](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1,
                                                                                    lyt_five[five].get_charge_state(c1),
                                                                                    false);
                                                                            });
                                                                        lyts_six.foreach_cell(
                                                                            [this, &charge_lyt,
                                                                             &lyts_six](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1, lyts_six.get_charge_state(c1),
                                                                                    false);
                                                                            });
                                                                        lyts_seven.foreach_cell(
                                                                            [this, &charge_lyt,
                                                                             &lyts_seven](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1, lyts_seven.get_charge_state(c1),
                                                                                    false);
                                                                            });
                                                                        lyt_eight[eight].foreach_cell(
                                                                            [this, &charge_lyt, &lyt_eight,
                                                                             &eight](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1,
                                                                                    lyt_eight[eight].get_charge_state(
                                                                                        c1),
                                                                                    false);
                                                                            });
                                                                        lyt_nine[nine].foreach_cell(
                                                                            [this, &charge_lyt, &lyt_nine,
                                                                             &nine](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1,
                                                                                    lyt_nine[nine].get_charge_state(c1),
                                                                                    false);
                                                                            });
                                                                        lyt_ten[t].foreach_cell(
                                                                            [this, &charge_lyt, &lyt_ten,
                                                                             &t](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1, lyt_ten[t].get_charge_state(c1),
                                                                                    false);
                                                                            });
                                                                        lyt_11[l].foreach_cell(
                                                                            [this, &charge_lyt, &lyt_11,
                                                                             &l](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1, lyt_11[l].get_charge_state(c1),
                                                                                    false);
                                                                            });
                                                                        lyts_12.foreach_cell(
                                                                            [this, &charge_lyt,
                                                                             &lyts_12](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1, lyts_12.get_charge_state(c1),
                                                                                    false);
                                                                            });
                                                                        lyts_13.foreach_cell(
                                                                            [this, &charge_lyt,
                                                                             &lyts_13](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1, lyts_13.get_charge_state(c1),
                                                                                    false);
                                                                            });
                                                                        lyts_14.foreach_cell(
                                                                            [this, &charge_lyt,
                                                                             &lyts_14](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1, lyts_14.get_charge_state(c1),
                                                                                    false);
                                                                            });
                                                                        lyts_15.foreach_cell(
                                                                            [this, &charge_lyt,
                                                                             &lyts_15](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1, lyts_15.get_charge_state(c1),
                                                                                    false);
                                                                            });

                                                                        lyts_16.foreach_cell(
                                                                            [this, &charge_lyt,
                                                                             &lyts_16](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1, lyts_16.get_charge_state(c1),
                                                                                    false);
                                                                            });
                                                                        charge_lyt.update_after_charge_change();
                                                                        if (charge_lyt.is_physically_valid())
                                                                        {
                                                                            if (charge_lyt.get_system_energy() <
                                                                                energy_threas)
                                                                            {
                                                                                std::vector<
                                                                                    charge_distribution_surface<Lyt>>
                                                                                    lyts{};
                                                                                std::cout
                                                                                    << charge_lyt.get_system_energy()
                                                                                    << std::endl;

                                                                                sidb_simulation_result<Lyt>
                                                                                    sim_result{};
                                                                                sim_result.algorithm_name = "ExGS";
                                                                                charge_distribution_surface<Lyt>
                                                                                    charge_lyt_copy{charge_lyt};
                                                                                lyts.emplace_back(charge_lyt_copy);
                                                                                sim_result.charge_distributions = lyts;
                                                                                energy_threas =
                                                                                    charge_lyt.get_system_energy();
                                                                                write_sqd_sim_result<Lyt>(
                                                                                    sim_result,
                                                                                    "/Users/jandrewniok/"
                                                                                    "CLionProjects/"
                                                                                    "fiction_fork/experiments/"
                                                                                    "result.xml");
                                                                            }
                                                                        }
                                                                        counter += 1;
                                                                        if (counter % 100000 == 0)
                                                                        {
                                                                            std::cout << counter << std::endl;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    void combining_all_14()
    {
        auto compareFunc =
            [](const charge_distribution_surface<Lyt>& lyt1, const charge_distribution_surface<Lyt>& lyt2)
        { return lyt1.get_system_energy() < lyt2.get_system_energy(); };

        std::cout << "combining starts: " << std::to_string(lyts_of_regions.size()) << std::endl;
        uint64_t counter_lyts = 1;
        for (const auto& lyts_region : lyts_of_regions)
        {
            counter_lyts *= lyts_region.size();
        }
        std::cout << "number enumerations: " << std::to_string(counter_lyts) << std::endl;

        auto lyt_one   = lyts_of_regions[0];
        auto lyt_two   = lyts_of_regions[1];
        auto lyt_three = lyts_of_regions[2];
        auto lyt_four  = lyts_of_regions[3];
        auto lyt_five  = lyts_of_regions[4];
        auto lyt_six   = lyts_of_regions[5];
        auto lyt_seven = lyts_of_regions[6];
        auto lyt_eight = lyts_of_regions[7];
        auto lyt_nine  = lyts_of_regions[8];
        auto lyt_ten   = lyts_of_regions[9];
        auto lyt_11    = lyts_of_regions[10];
        auto lyt_12    = lyts_of_regions[11];
        auto lyt_13    = lyts_of_regions[12];
        auto lyt_14    = lyts_of_regions[13];

        std::sort(lyt_one.begin(), lyt_one.end(), compareFunc);
        std::sort(lyt_two.begin(), lyt_two.end(), compareFunc);
        std::sort(lyt_three.begin(), lyt_three.end(), compareFunc);
        std::sort(lyt_four.begin(), lyt_four.end(), compareFunc);
        std::sort(lyt_five.begin(), lyt_five.end(), compareFunc);
        std::sort(lyt_six.begin(), lyt_six.end(), compareFunc);
        std::sort(lyt_seven.begin(), lyt_seven.end(), compareFunc);
        std::sort(lyt_eight.begin(), lyt_eight.end(), compareFunc);
        std::sort(lyt_nine.begin(), lyt_nine.end(), compareFunc);
        std::sort(lyt_ten.begin(), lyt_ten.end(), compareFunc);
        std::sort(lyt_11.begin(), lyt_11.end(), compareFunc);
        std::sort(lyt_12.begin(), lyt_12.end(), compareFunc);
        std::sort(lyt_13.begin(), lyt_13.end(), compareFunc);
        std::sort(lyt_14.begin(), lyt_14.end(), compareFunc);

        int                                           number = 5;
        std::vector<charge_distribution_surface<Lyt>> lyt_ones(
            lyt_one.begin(), lyt_one.begin() + std::min(number, static_cast<int>(lyt_one.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_twos(
            lyt_two.begin(), lyt_two.begin() + std::min(number, static_cast<int>(lyt_two.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_threes(
            lyt_three.begin(), lyt_three.begin() + std::min(number, static_cast<int>(lyt_three.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_fours(
            lyt_four.begin(), lyt_four.begin() + std::min(number, static_cast<int>(lyt_four.size())));

        std::vector<charge_distribution_surface<Lyt>> lyt_fives(
            lyt_five.begin(), lyt_five.begin() + std::min(number, static_cast<int>(lyt_five.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_sixs(
            lyt_six.begin(), lyt_six.begin() + std::min(number, static_cast<int>(lyt_six.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_sevens(
            lyt_seven.begin(), lyt_seven.begin() + std::min(number, static_cast<int>(lyt_seven.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_eights(
            lyt_eight.begin(), lyt_eight.begin() + std::min(number, static_cast<int>(lyt_eight.size())));

        std::vector<charge_distribution_surface<Lyt>> lyt_nines(
            lyt_nine.begin(), lyt_nine.begin() + std::min(number, static_cast<int>(lyt_nine.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_tens(
            lyt_ten.begin(), lyt_ten.begin() + std::min(number, static_cast<int>(lyt_ten.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_11s(
            lyt_11.begin(), lyt_11.begin() + std::min(number, static_cast<int>(lyt_11.size())));

        std::vector<charge_distribution_surface<Lyt>> lyt_12s(
            lyt_12.begin(), lyt_12.begin() + std::min(number, static_cast<int>(lyt_12.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_13s(
            lyt_13.begin(), lyt_13.begin() + std::min(number, static_cast<int>(lyt_13.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_14s(
            lyt_14.begin(), lyt_14.begin() + std::min(number, static_cast<int>(lyt_14.size())));

        charge_distribution_surface<Lyt> charge_lyt{layout};
        uint64_t                         counter = 0;
        std::vector<double>              valid_energies{};
        double                           energy_threas = 1000;
        for (auto i = 0u; i < lyt_one.size(); i++)
        {
            for (auto j = 0u; j < lyt_two.size(); j++)
            {
                for (auto three = 0u; three < lyt_three.size(); three++)
                {
                    for (auto four = 0u; four < lyt_four.size(); four++)
                    {
                        for (auto five = 0u; five < lyt_five.size(); five++)
                        {
                            for (const auto& lyts_six : lyt_six)
                            {
                                uint64_t counter_unmatched_one = 0;
                                for (const auto& neighbor_cell : all_defect_cells[0])
                                {
                                    lyts_six.foreach_cell(
                                        [&counter_unmatched_one, &neighbor_cell, &lyts_six, &i, this](const auto& c1)
                                        {
                                            if (c1 == neighbor_cell)
                                            {
                                                if (charge_state_to_sign(lyts_six.get_charge_state(c1)) !=
                                                    get_charge_state_defect(0, i, c1))
                                                {
                                                    counter_unmatched_one += 1;
                                                }
                                            }
                                        });
                                }
                                if (counter_unmatched_one != 0)
                                {
                                    continue;
                                }

                                uint64_t counter_unmatched = 0;
                                for (const auto& neighbor_cell : all_defect_cells[1])
                                {
                                    lyts_six.foreach_cell(
                                        [&counter_unmatched, &neighbor_cell, &lyts_six, &j, this](const auto& c1)
                                        {
                                            if (c1 == neighbor_cell)
                                            {
                                                if (charge_state_to_sign(lyts_six.get_charge_state(c1)) !=
                                                    get_charge_state_defect(1, j, c1))
                                                {
                                                    counter_unmatched += 1;
                                                }
                                            }
                                        });
                                }
                                if (counter_unmatched != 0)
                                {
                                    continue;
                                }

                                for (const auto& lyts_seven : lyt_seven)
                                {
                                    uint64_t counter_three = 0;
                                    for (const auto& neighbor_cell : all_defect_cells[2])
                                    {
                                        lyts_seven.foreach_cell(
                                            [&counter_three, &neighbor_cell, &lyts_seven, &three, this](const auto& c1)
                                            {
                                                if (c1 == neighbor_cell)
                                                {
                                                    if (charge_state_to_sign(lyts_seven.get_charge_state(c1)) !=
                                                        get_charge_state_defect(2, three, c1))
                                                    {
                                                        counter_three += 1;
                                                    }
                                                }
                                            });
                                    }
                                    if (counter_three != 0)
                                    {
                                        continue;
                                    }

                                    for (auto eight = 0u; eight < lyt_eight.size(); eight++)
                                    {
                                        uint64_t counter_unmatched_4 = 0;
                                        for (const auto& neighbor_cell_four : all_defect_cells[3])
                                        {
                                            lyt_eight[eight].foreach_cell(
                                                [&counter_unmatched_4, &neighbor_cell_four, &lyt_eight, &four, &eight,
                                                 this](const auto& c1)
                                                {
                                                    if (c1 == neighbor_cell_four)
                                                    {
                                                        if (charge_state_to_sign(lyt_eight[eight].get_charge_state(
                                                                c1)) != get_charge_state_defect(3, four, c1))
                                                        {
                                                            counter_unmatched_4 += 1;
                                                        }
                                                    }
                                                });
                                        }
                                        if (counter_unmatched_4 != 0)
                                        {
                                            continue;
                                        }

                                        for (auto nine = 0u; nine < lyt_nine.size(); nine++)
                                        {
                                            uint64_t counter_unmatched_five = 0;
                                            for (const auto& neighbor_cell_five : all_defect_cells[4])
                                            {
                                                lyt_nine[nine].foreach_cell(
                                                    [&counter_unmatched_five, &neighbor_cell_five, &lyt_nine, &five,
                                                     &nine, this](const auto& c1)
                                                    {
                                                        if (c1 == neighbor_cell_five)
                                                        {
                                                            if (charge_state_to_sign(lyt_nine[nine].get_charge_state(
                                                                    c1)) != get_charge_state_defect(4, five, c1))
                                                            {
                                                                counter_unmatched_five += 1;
                                                            }
                                                        }
                                                    });
                                            }
                                            if (counter_unmatched_five != 0)
                                            {
                                                continue;
                                            }

                                            for (auto t = 0u; t < lyt_ten.size(); t++)
                                            {
                                                uint64_t counter_unmatched_7 = 0;
                                                for (const auto& neighbor_cell_seven : all_defect_cells[6])
                                                {
                                                    lyt_ten[t].foreach_cell(
                                                        [&counter_unmatched_7, &neighbor_cell_seven, &lyt_ten, &t,
                                                         this](const auto& c1)
                                                        {
                                                            if (c1 == neighbor_cell_seven)
                                                            {
                                                                if (charge_state_to_sign(lyt_ten[t].get_charge_state(
                                                                        c1)) != get_charge_state_defect(6, t, c1))
                                                                {
                                                                    counter_unmatched_7 += 1;
                                                                }
                                                            }
                                                        });
                                                }
                                                if (counter_unmatched_7 != 0)
                                                {
                                                    continue;
                                                }

                                                for (auto l = 0u; l < lyt_11.size(); l++)
                                                {
                                                    for (const auto& lyts_12 : lyt_12)
                                                    {
                                                        uint64_t counter_unmatched_9 = 0;
                                                        for (const auto& neighbor_cell_nine : all_defect_cells[8])
                                                        {
                                                            lyts_12.foreach_cell(
                                                                [&counter_unmatched_9, &neighbor_cell_nine, &lyts_12,
                                                                 &nine, this](const auto& c1)
                                                                {
                                                                    if (c1 == neighbor_cell_nine)
                                                                    {
                                                                        if (charge_state_to_sign(
                                                                                lyts_12.get_charge_state(c1)) !=
                                                                            get_charge_state_defect(8, nine, c1))
                                                                        {
                                                                            counter_unmatched_9 += 1;
                                                                        }
                                                                    }
                                                                });
                                                        }
                                                        if (counter_unmatched_9 != 0)
                                                        {
                                                            continue;
                                                        }

                                                        uint64_t counter_unmatched_8 = 0;
                                                        for (const auto& neighbor_cell_eight : all_defect_cells[7])
                                                        {
                                                            lyts_12.foreach_cell(
                                                                [&counter_unmatched_8, &neighbor_cell_eight, &lyts_12,
                                                                 &eight, this](const auto& c1)
                                                                {
                                                                    if (c1 == neighbor_cell_eight)
                                                                    {
                                                                        if (charge_state_to_sign(
                                                                                lyts_12.get_charge_state(c1)) !=
                                                                            get_charge_state_defect(7, eight, c1))
                                                                        {
                                                                            counter_unmatched_8 += 1;
                                                                        }
                                                                    }
                                                                });
                                                        }
                                                        if (counter_unmatched_8 != 0)
                                                        {
                                                            continue;
                                                        }

                                                        for (const auto& lyts_13 : lyt_13)
                                                        {
                                                            uint64_t counter_unmatched_eleven = 0;
                                                            for (const auto& neighbor_cell : all_defect_cells[10])
                                                            {
                                                                lyts_13.foreach_cell(
                                                                    [&counter_unmatched_eleven, &neighbor_cell,
                                                                     &lyts_13, &l, this](const auto& c1)
                                                                    {
                                                                        if (c1 == neighbor_cell)
                                                                        {
                                                                            if (charge_state_to_sign(
                                                                                    lyts_13.get_charge_state(c1)) !=
                                                                                get_charge_state_defect(10, l, c1))
                                                                            {
                                                                                counter_unmatched_eleven += 1;
                                                                            }
                                                                        }
                                                                    });
                                                            }
                                                            if (counter_unmatched_eleven != 0)
                                                            {
                                                                continue;
                                                            }

                                                            uint64_t counter_unmatched_13 = 0;
                                                            for (const auto& neighbor_cell : all_defect_cells[9])
                                                            {
                                                                lyts_13.foreach_cell(
                                                                    [&counter_unmatched_13, &neighbor_cell, &lyts_13,
                                                                     &t, this](const auto& c1)
                                                                    {
                                                                        if (c1 == neighbor_cell)
                                                                        {
                                                                            if (charge_state_to_sign(
                                                                                    lyts_13.get_charge_state(c1)) !=
                                                                                get_charge_state_defect(9, t, c1))
                                                                            {
                                                                                counter_unmatched_13 += 1;
                                                                            }
                                                                        }
                                                                    });
                                                            }
                                                            if (counter_unmatched_13 != 0)
                                                            {
                                                                continue;
                                                            }

                                                            for (const auto& lyts_14 : lyt_14)
                                                            {
                                                                lyt_one[i].foreach_cell(
                                                                    [this, &charge_lyt, &lyt_one, &i](const auto& c1) {
                                                                        charge_lyt.assign_charge_state(
                                                                            c1, lyt_one[i].get_charge_state(c1), false);
                                                                    });
                                                                lyt_two[j].foreach_cell(
                                                                    [this, &charge_lyt, &lyt_two, &j](const auto& c1) {
                                                                        charge_lyt.assign_charge_state(
                                                                            c1, lyt_two[j].get_charge_state(c1), false);
                                                                    });
                                                                lyt_three[three].foreach_cell(
                                                                    [this, &charge_lyt, &lyt_three,
                                                                     &three](const auto& c1) {
                                                                        charge_lyt.assign_charge_state(
                                                                            c1, lyt_three[three].get_charge_state(c1),
                                                                            false);
                                                                    });
                                                                lyt_four[four].foreach_cell(
                                                                    [this, &charge_lyt, &lyt_four,
                                                                     &four](const auto& c1) {
                                                                        charge_lyt.assign_charge_state(
                                                                            c1, lyt_four[four].get_charge_state(c1),
                                                                            false);
                                                                    });
                                                                lyt_five[five].foreach_cell(
                                                                    [this, &charge_lyt, &lyt_five,
                                                                     &five](const auto& c1) {
                                                                        charge_lyt.assign_charge_state(
                                                                            c1, lyt_five[five].get_charge_state(c1),
                                                                            false);
                                                                    });
                                                                lyts_six.foreach_cell(
                                                                    [this, &charge_lyt, &lyts_six](const auto& c1) {
                                                                        charge_lyt.assign_charge_state(
                                                                            c1, lyts_six.get_charge_state(c1), false);
                                                                    });
                                                                lyts_seven.foreach_cell(
                                                                    [this, &charge_lyt, &lyts_seven](const auto& c1) {
                                                                        charge_lyt.assign_charge_state(
                                                                            c1, lyts_seven.get_charge_state(c1), false);
                                                                    });
                                                                lyt_eight[eight].foreach_cell(
                                                                    [this, &charge_lyt, &lyt_eight,
                                                                     &eight](const auto& c1) {
                                                                        charge_lyt.assign_charge_state(
                                                                            c1, lyt_eight[eight].get_charge_state(c1),
                                                                            false);
                                                                    });
                                                                lyt_nine[nine].foreach_cell(
                                                                    [this, &charge_lyt, &lyt_nine,
                                                                     &nine](const auto& c1) {
                                                                        charge_lyt.assign_charge_state(
                                                                            c1, lyt_nine[nine].get_charge_state(c1),
                                                                            false);
                                                                    });
                                                                lyt_ten[t].foreach_cell(
                                                                    [this, &charge_lyt, &lyt_ten, &t](const auto& c1) {
                                                                        charge_lyt.assign_charge_state(
                                                                            c1, lyt_ten[t].get_charge_state(c1), false);
                                                                    });
                                                                lyt_11[l].foreach_cell(
                                                                    [this, &charge_lyt, &lyt_11, &l](const auto& c1) {
                                                                        charge_lyt.assign_charge_state(
                                                                            c1, lyt_11[l].get_charge_state(c1), false);
                                                                    });
                                                                lyts_12.foreach_cell(
                                                                    [this, &charge_lyt, &lyts_12](const auto& c1) {
                                                                        charge_lyt.assign_charge_state(
                                                                            c1, lyts_12.get_charge_state(c1), false);
                                                                    });
                                                                lyts_13.foreach_cell(
                                                                    [this, &charge_lyt, &lyts_13](const auto& c1) {
                                                                        charge_lyt.assign_charge_state(
                                                                            c1, lyts_13.get_charge_state(c1), false);
                                                                    });
                                                                lyts_14.foreach_cell(
                                                                    [this, &charge_lyt, &lyts_14](const auto& c1) {
                                                                        charge_lyt.assign_charge_state(
                                                                            c1, lyts_14.get_charge_state(c1), false);
                                                                    });
                                                                charge_lyt.update_after_charge_change();
                                                                if (charge_lyt.is_physically_valid())
                                                                {
                                                                    if (charge_lyt.get_system_energy() < energy_threas)
                                                                    {
                                                                        std::vector<charge_distribution_surface<Lyt>>
                                                                            lyts{};
                                                                        std::cout << charge_lyt.get_system_energy()
                                                                                  << std::endl;

                                                                        sidb_simulation_result<Lyt> sim_result{};
                                                                        sim_result.algorithm_name = "ExGS";
                                                                        charge_distribution_surface<Lyt>
                                                                            charge_lyt_copy{charge_lyt};
                                                                        lyts.emplace_back(charge_lyt_copy);
                                                                        sim_result.charge_distributions = lyts;
                                                                        energy_threas = charge_lyt.get_system_energy();
                                                                        write_sqd_sim_result<Lyt>(
                                                                            sim_result, "/Users/jandrewniok/"
                                                                                        "CLionProjects/"
                                                                                        "fiction_fork/experiments/"
                                                                                        "result.xml");
                                                                    }
                                                                }
                                                                counter += 1;
                                                                if (counter % 100000 == 0)
                                                                {
                                                                    std::cout << counter << std::endl;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    void combining_all_11_test()
    {
        auto compareFunc =
            [](const charge_distribution_surface<Lyt>& lyt1, const charge_distribution_surface<Lyt>& lyt2)
        { return lyt1.get_system_energy() < lyt2.get_system_energy(); };

        std::cout << "combining starts: " << std::to_string(lyts_of_regions.size()) << std::endl;
        uint64_t counter_lyts = 1;
        for (const auto& lyts_region : lyts_of_regions)
        {
            counter_lyts *= lyts_region.size();
        }
        std::cout << "number enumerations: " << std::to_string(counter_lyts) << std::endl;

        auto lyt_one   = lyts_of_regions[0];
        auto lyt_two   = lyts_of_regions[1];
        auto lyt_three = lyts_of_regions[2];
        auto lyt_four  = lyts_of_regions[3];
        auto lyt_five  = lyts_of_regions[4];
        auto lyt_six   = lyts_of_regions[5];
        auto lyt_seven = lyts_of_regions[6];
        auto lyt_eight = lyts_of_regions[7];
        auto lyt_nine  = lyts_of_regions[8];
        auto lyt_ten   = lyts_of_regions[9];
        auto lyt_11    = lyts_of_regions[10];

        std::sort(lyt_one.begin(), lyt_one.end(), compareFunc);
        std::sort(lyt_two.begin(), lyt_two.end(), compareFunc);
        std::sort(lyt_three.begin(), lyt_three.end(), compareFunc);
        std::sort(lyt_four.begin(), lyt_four.end(), compareFunc);
        std::sort(lyt_five.begin(), lyt_five.end(), compareFunc);
        std::sort(lyt_six.begin(), lyt_six.end(), compareFunc);
        std::sort(lyt_seven.begin(), lyt_seven.end(), compareFunc);
        std::sort(lyt_eight.begin(), lyt_eight.end(), compareFunc);
        std::sort(lyt_nine.begin(), lyt_nine.end(), compareFunc);
        std::sort(lyt_ten.begin(), lyt_ten.end(), compareFunc);
        std::sort(lyt_11.begin(), lyt_11.end(), compareFunc);

        int                                           number = 5;
        std::vector<charge_distribution_surface<Lyt>> lyt_ones(
            lyt_one.begin(), lyt_one.begin() + std::min(number, static_cast<int>(lyt_one.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_twos(
            lyt_two.begin(), lyt_two.begin() + std::min(number, static_cast<int>(lyt_two.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_threes(
            lyt_three.begin(), lyt_three.begin() + std::min(number, static_cast<int>(lyt_three.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_fours(
            lyt_four.begin(), lyt_four.begin() + std::min(number, static_cast<int>(lyt_four.size())));

        std::vector<charge_distribution_surface<Lyt>> lyt_fives(
            lyt_five.begin(), lyt_five.begin() + std::min(number, static_cast<int>(lyt_five.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_sixs(
            lyt_six.begin(), lyt_six.begin() + std::min(number, static_cast<int>(lyt_six.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_sevens(
            lyt_seven.begin(), lyt_seven.begin() + std::min(number, static_cast<int>(lyt_seven.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_eights(
            lyt_eight.begin(), lyt_eight.begin() + std::min(number, static_cast<int>(lyt_eight.size())));

        std::vector<charge_distribution_surface<Lyt>> lyt_nines(
            lyt_nine.begin(), lyt_nine.begin() + std::min(number, static_cast<int>(lyt_nine.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_tens(
            lyt_ten.begin(), lyt_ten.begin() + std::min(number, static_cast<int>(lyt_ten.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_11s(
            lyt_11.begin(), lyt_11.begin() + std::min(number, static_cast<int>(lyt_11.size())));

        charge_distribution_surface<Lyt> charge_lyt{layout};
        uint64_t                         counter = 0;
        std::vector<double>              valid_energies{};
        double                           energy_threas = 1000;
        for (auto i = 0u; i < lyt_one.size(); i++)
        {
            for (auto j = 0u; j < lyt_two.size(); j++)
            {
                for (auto three = 0u; three < lyt_three.size(); three++)
                {
                    for (auto four = 0u; four < lyt_four.size(); four++)
                    {
                        for (auto five = 0u; five < lyt_five.size(); five++)
                        {
                            for (const auto& lyts_six : lyt_six)
                            {
                                for (const auto& lyts_seven : lyt_seven)
                                {
                                    for (auto eight = 0u; eight < lyt_eight.size(); eight++)
                                    {
                                        for (auto nine = 0u; nine < lyt_nine.size(); nine++)
                                        {
                                            for (auto t = 0u; t < lyt_ten.size(); t++)
                                            {
                                                for (auto l = 0u; l < lyt_11.size(); l++)
                                                {

                                                    lyt_one[i].foreach_cell(
                                                        [this, &charge_lyt, &lyt_one, &i](const auto& c1) {
                                                            charge_lyt.assign_charge_state(
                                                                c1, lyt_one[i].get_charge_state(c1), false);
                                                        });
                                                    lyt_two[j].foreach_cell(
                                                        [this, &charge_lyt, &lyt_two, &j](const auto& c1) {
                                                            charge_lyt.assign_charge_state(
                                                                c1, lyt_two[j].get_charge_state(c1), false);
                                                        });
                                                    lyt_three[three].foreach_cell(
                                                        [this, &charge_lyt, &lyt_three, &three](const auto& c1) {
                                                            charge_lyt.assign_charge_state(
                                                                c1, lyt_three[three].get_charge_state(c1), false);
                                                        });
                                                    lyt_four[four].foreach_cell(
                                                        [this, &charge_lyt, &lyt_four, &four](const auto& c1) {
                                                            charge_lyt.assign_charge_state(
                                                                c1, lyt_four[four].get_charge_state(c1), false);
                                                        });
                                                    lyt_five[five].foreach_cell(
                                                        [this, &charge_lyt, &lyt_five, &five](const auto& c1) {
                                                            charge_lyt.assign_charge_state(
                                                                c1, lyt_five[five].get_charge_state(c1), false);
                                                        });
                                                    lyts_six.foreach_cell(
                                                        [this, &charge_lyt, &lyts_six](const auto& c1) {
                                                            charge_lyt.assign_charge_state(
                                                                c1, lyts_six.get_charge_state(c1), false);
                                                        });
                                                    lyts_seven.foreach_cell(
                                                        [this, &charge_lyt, &lyts_seven](const auto& c1) {
                                                            charge_lyt.assign_charge_state(
                                                                c1, lyts_seven.get_charge_state(c1), false);
                                                        });
                                                    lyt_eight[eight].foreach_cell(
                                                        [this, &charge_lyt, &lyt_eight, &eight](const auto& c1) {
                                                            charge_lyt.assign_charge_state(
                                                                c1, lyt_eight[eight].get_charge_state(c1), false);
                                                        });
                                                    lyt_nine[nine].foreach_cell(
                                                        [this, &charge_lyt, &lyt_nine, &nine](const auto& c1) {
                                                            charge_lyt.assign_charge_state(
                                                                c1, lyt_nine[nine].get_charge_state(c1), false);
                                                        });
                                                    lyt_ten[t].foreach_cell(
                                                        [this, &charge_lyt, &lyt_ten, &t](const auto& c1) {
                                                            charge_lyt.assign_charge_state(
                                                                c1, lyt_ten[t].get_charge_state(c1), false);
                                                        });
                                                    lyt_11[l].foreach_cell(
                                                        [this, &charge_lyt, &lyt_11, &l](const auto& c1) {
                                                            charge_lyt.assign_charge_state(
                                                                c1, lyt_11[l].get_charge_state(c1), false);
                                                        });
                                                    charge_lyt.update_after_charge_change();
                                                    if (charge_lyt.is_physically_valid())
                                                    {
                                                        if (charge_lyt.get_system_energy() < energy_threas)
                                                        {
                                                            std::vector<charge_distribution_surface<Lyt>> lyts{};
                                                            std::cout << charge_lyt.get_system_energy() << std::endl;

                                                            sidb_simulation_result<Lyt> sim_result{};
                                                            sim_result.algorithm_name = "ExGS";
                                                            charge_distribution_surface<Lyt> charge_lyt_copy{
                                                                charge_lyt};
                                                            lyts.emplace_back(charge_lyt_copy);
                                                            sim_result.charge_distributions = lyts;
                                                            energy_threas = charge_lyt.get_system_energy();
                                                            write_sqd_sim_result<Lyt>(sim_result, "/Users/jandrewniok/"
                                                                                                  "CLionProjects/"
                                                                                                  "fiction_fork/"
                                                                                                  "experiments/"
                                                                                                  "result.xml");
                                                        }
                                                    }
                                                    counter += 1;
                                                    if (counter % 100000 == 0)
                                                    {
                                                        std::cout << counter << std::endl;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    void combining_all_2_small_layout_test()
    {
        auto compareFunc =
            [](const charge_distribution_surface<Lyt>& lyt1, const charge_distribution_surface<Lyt>& lyt2)
        { return lyt1.get_system_energy() < lyt2.get_system_energy(); };

        std::cout << "combining starts: " << std::to_string(lyts_of_regions.size()) << std::endl;
        uint64_t counter_lyts = 1;
        for (const auto& lyts_region : lyts_of_regions)
        {
            counter_lyts *= lyts_region.size();
        }
        std::cout << "number enumerations: " << std::to_string(counter_lyts) << std::endl;

        auto lyt_one = lyts_of_regions[0];
        auto lyt_two = lyts_of_regions[1];

        charge_distribution_surface<Lyt> charge_lyt{layout};
        uint64_t                         counter = 0;
        std::vector<double>              valid_energies{};
        double                           energy_threas = 1000;
        for (auto i = 0u; i < lyt_one.size(); i++)
        {
            for (auto j = 0u; j < lyt_two.size(); j++)
            {
                if (!layout_fullfilling_constraint(lyt_two[j], 0, i))
                {
                    continue;
                }
                if (!previous_layout_fullfilling_constraint(0, i, 1, j))
                {
                    continue;
                }

                lyt_one[i].foreach_cell(
                    [this, &charge_lyt, &lyt_one, &i](const auto& c1)
                    { charge_lyt.assign_charge_state(c1, lyt_one[i].get_charge_state(c1), false); });
                lyt_two[j].foreach_cell(
                    [this, &charge_lyt, &lyt_two, &j](const auto& c1)
                    { charge_lyt.assign_charge_state(c1, lyt_two[j].get_charge_state(c1), false); });
                charge_lyt.update_after_charge_change();
                if (charge_lyt.is_physically_valid())
                {
                    if (charge_lyt.get_system_energy() < 1000)
                    {
                        //                                std::cout << "lyt_one: " << std::to_string(i) << std::endl;
                        //                                std::cout << "lyt_two: " << std::to_string(j) << std::endl;
                        //                                std::cout << "lyt_three: " << std::to_string(three) <<
                        //                                std::endl; std::cout << "lyt_four: " << std::to_string(four)
                        //                                << std::endl;

                        std::vector<charge_distribution_surface<Lyt>> lyts{};
                        std::cout << charge_lyt.get_system_energy() << std::endl;

                        sidb_simulation_result<Lyt> sim_result{};
                        sim_result.algorithm_name = "ExGS";
                        charge_distribution_surface<Lyt> charge_lyt_copy{charge_lyt};
                        lyts.emplace_back(charge_lyt_copy);
                        sim_result.charge_distributions = lyts;
                        energy_threas                   = charge_lyt.get_system_energy();
                        write_sqd_sim_result<Lyt>(sim_result, "/Users/jandrewniok/"
                                                              "CLionProjects/"
                                                              "fiction_fork/"
                                                              "experiments/"
                                                              "result.xml");
                    }
                }
                counter += 1;
                if (counter % 1 == 0)
                {
                    std::cout << counter << std::endl;
                }
            }
        }
    }

    void combining_all_4_small_layout_test()
    {
        auto compareFunc =
            [](const charge_distribution_surface<Lyt>& lyt1, const charge_distribution_surface<Lyt>& lyt2)
        { return lyt1.get_system_energy() < lyt2.get_system_energy(); };

        std::cout << "combining starts: " << std::to_string(lyts_of_regions.size()) << std::endl;
        uint64_t counter_lyts = 1;
        for (const auto& lyts_region : lyts_of_regions)
        {
            counter_lyts *= lyts_region.size();
        }
        std::cout << "number enumerations: " << std::to_string(counter_lyts) << std::endl;

        auto lyt_one   = lyts_of_regions[0];
        auto lyt_two   = lyts_of_regions[1];
        auto lyt_three = lyts_of_regions[2];
        auto lyt_four  = lyts_of_regions[3];

        //        std::sort(lyt_one.begin(), lyt_one.end(), compareFunc);
        //        std::sort(lyt_two.begin(), lyt_two.end(), compareFunc);
        //        std::sort(lyt_three.begin(), lyt_three.end(), compareFunc);
        //        std::sort(lyt_four.begin(), lyt_four.end(), compareFunc);

        charge_distribution_surface<Lyt> charge_lyt{layout};
        uint64_t                         counter = 0;
        std::vector<double>              valid_energies{};
        double                           energy_threas = 1000;
        for (auto i = 0u; i < lyt_one.size(); i++)
        {
            for (auto j = 0u; j < lyt_two.size(); j++)
            {
                for (auto three = 0u; three < lyt_three.size(); three++)
                {
                    if (!layout_fullfilling_constraint(lyt_three[three], 0, i))
                    {
                        continue;
                    }

                    if (!layout_fullfilling_constraint(lyt_three[three], 1, j))
                    {
                        continue;
                    }

                    for (auto four = 0u; four < lyt_four.size(); four++)
                    {
                        if (!layout_fullfilling_constraint(lyt_four[four], 2, three))
                        {
                            continue;
                        }

                        lyt_one[i].foreach_cell(
                            [this, &charge_lyt, &lyt_one, &i](const auto& c1)
                            { charge_lyt.assign_charge_state(c1, lyt_one[i].get_charge_state(c1), false); });
                        lyt_two[j].foreach_cell(
                            [this, &charge_lyt, &lyt_two, &j](const auto& c1)
                            { charge_lyt.assign_charge_state(c1, lyt_two[j].get_charge_state(c1), false); });
                        lyt_three[three].foreach_cell(
                            [this, &charge_lyt, &lyt_three, &three](const auto& c1)
                            { charge_lyt.assign_charge_state(c1, lyt_three[three].get_charge_state(c1), false); });
                        lyt_four[four].foreach_cell(
                            [this, &charge_lyt, &lyt_four, &four](const auto& c1)
                            { charge_lyt.assign_charge_state(c1, lyt_four[four].get_charge_state(c1), false); });
                        charge_lyt.update_after_charge_change();
                        if (!charge_lyt.is_physically_valid())
                        {
                            if (charge_lyt.get_system_energy() < 1000)
                            {
                                //                                std::cout << "lyt_one: " << std::to_string(i) <<
                                //                                std::endl; std::cout << "lyt_two: " <<
                                //                                std::to_string(j) << std::endl; std::cout <<
                                //                                "lyt_three: " << std::to_string(three) << std::endl;
                                //                                std::cout << "lyt_four: " << std::to_string(four) <<
                                //                                std::endl;

                                std::vector<charge_distribution_surface<Lyt>> lyts{};
                                std::cout << charge_lyt.get_system_energy() << std::endl;

                                sidb_simulation_result<Lyt> sim_result{};
                                sim_result.algorithm_name = "ExGS";
                                charge_distribution_surface<Lyt> charge_lyt_copy{charge_lyt};
                                lyts.emplace_back(charge_lyt_copy);
                                sim_result.charge_distributions = lyts;
                                energy_threas                   = charge_lyt.get_system_energy();
                                write_sqd_sim_result<Lyt>(sim_result, "/Users/jandrewniok/"
                                                                      "CLionProjects/"
                                                                      "fiction_fork/"
                                                                      "experiments/"
                                                                      "result.xml");
                            }
                        }
                        counter += 1;
                        if (counter % 1 == 0)
                        {
                            // std::cout << counter << std::endl;
                        }
                    }
                }
            }
        }
    }

    void combining_all_13_test()
    {
        auto compareFunc =
            [](const charge_distribution_surface<Lyt>& lyt1, const charge_distribution_surface<Lyt>& lyt2)
        { return lyt1.get_system_energy() < lyt2.get_system_energy(); };

        std::cout << "combining starts: " << std::to_string(lyts_of_regions.size()) << std::endl;
        uint64_t counter_lyts = 1;
        for (const auto& lyts_region : lyts_of_regions)
        {
            counter_lyts *= lyts_region.size();
        }
        std::cout << "number enumerations: " << std::to_string(counter_lyts) << std::endl;

        auto lyt_one   = lyts_of_regions[0];
        auto lyt_two   = lyts_of_regions[1];
        auto lyt_three = lyts_of_regions[2];
        auto lyt_four  = lyts_of_regions[3];
        auto lyt_five  = lyts_of_regions[4];
        auto lyt_six   = lyts_of_regions[5];
        auto lyt_seven = lyts_of_regions[6];
        auto lyt_eight = lyts_of_regions[7];
        auto lyt_nine  = lyts_of_regions[8];
        auto lyt_ten   = lyts_of_regions[9];
        auto lyt_11    = lyts_of_regions[10];
        auto lyt_12    = lyts_of_regions[11];
        auto lyt_13    = lyts_of_regions[12];

        std::sort(lyt_one.begin(), lyt_one.end(), compareFunc);
        std::sort(lyt_two.begin(), lyt_two.end(), compareFunc);
        std::sort(lyt_three.begin(), lyt_three.end(), compareFunc);
        std::sort(lyt_four.begin(), lyt_four.end(), compareFunc);
        std::sort(lyt_five.begin(), lyt_five.end(), compareFunc);
        std::sort(lyt_six.begin(), lyt_six.end(), compareFunc);
        std::sort(lyt_seven.begin(), lyt_seven.end(), compareFunc);
        std::sort(lyt_eight.begin(), lyt_eight.end(), compareFunc);
        std::sort(lyt_nine.begin(), lyt_nine.end(), compareFunc);
        std::sort(lyt_ten.begin(), lyt_ten.end(), compareFunc);
        std::sort(lyt_11.begin(), lyt_11.end(), compareFunc);
        std::sort(lyt_12.begin(), lyt_12.end(), compareFunc);
        std::sort(lyt_13.begin(), lyt_13.end(), compareFunc);

        int                                           number = 5;
        std::vector<charge_distribution_surface<Lyt>> lyt_ones(
            lyt_one.begin(), lyt_one.begin() + std::min(number, static_cast<int>(lyt_one.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_twos(
            lyt_two.begin(), lyt_two.begin() + std::min(number, static_cast<int>(lyt_two.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_threes(
            lyt_three.begin(), lyt_three.begin() + std::min(number, static_cast<int>(lyt_three.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_fours(
            lyt_four.begin(), lyt_four.begin() + std::min(number, static_cast<int>(lyt_four.size())));

        std::vector<charge_distribution_surface<Lyt>> lyt_fives(
            lyt_five.begin(), lyt_five.begin() + std::min(number, static_cast<int>(lyt_five.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_sixs(
            lyt_six.begin(), lyt_six.begin() + std::min(number, static_cast<int>(lyt_six.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_sevens(
            lyt_seven.begin(), lyt_seven.begin() + std::min(number, static_cast<int>(lyt_seven.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_eights(
            lyt_eight.begin(), lyt_eight.begin() + std::min(number, static_cast<int>(lyt_eight.size())));

        std::vector<charge_distribution_surface<Lyt>> lyt_nines(
            lyt_nine.begin(), lyt_nine.begin() + std::min(number, static_cast<int>(lyt_nine.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_tens(
            lyt_ten.begin(), lyt_ten.begin() + std::min(number, static_cast<int>(lyt_ten.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_11s(
            lyt_11.begin(), lyt_11.begin() + std::min(number, static_cast<int>(lyt_11.size())));

        std::vector<charge_distribution_surface<Lyt>> lyt_12s(
            lyt_12.begin(), lyt_12.begin() + std::min(number, static_cast<int>(lyt_12.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_13s(
            lyt_13.begin(), lyt_13.begin() + std::min(number, static_cast<int>(lyt_13.size())));

        charge_distribution_surface<Lyt> charge_lyt{layout};
        uint64_t                         counter = 0;
        std::vector<double>              valid_energies{};
        double                           energy_threas = 1000;
        for (auto i = 0u; i < lyt_one.size(); i++)
        {
            for (auto j = 0u; j < lyt_two.size(); j++)
            {
                for (auto three = 0u; three < lyt_three.size(); three++)
                {
                    for (auto four = 0u; four < lyt_four.size(); four++)
                    {
                        //                        uint64_t counter_unmatched_one = 0;
                        //                        for (const auto& neighbor_cell : all_defect_cells[0])
                        //                        {
                        //                            lyt_four[four].foreach_cell(
                        //                                [&counter_unmatched_one, &neighbor_cell, &lyt_four, &i, &four,
                        //                                this](const auto& c1)
                        //                                {
                        //                                    if (c1 == neighbor_cell)
                        //                                    {
                        //                                        if
                        //                                        (charge_state_to_sign(lyt_four[four].get_charge_state(c1))
                        //                                        !=
                        //                                            get_charge_state_defect(0, i, c1))
                        //                                        {
                        //                                            counter_unmatched_one += 1;
                        //                                        }
                        //                                    }
                        //                                });
                        //                        }
                        //                        if (counter_unmatched_one != 0)
                        //                        {
                        //                            continue;
                        //                        }
                        for (auto five = 0u; five < lyt_five.size(); five++)
                        {
                            for (const auto& lyts_six : lyt_six)
                            {
                                for (const auto& lyts_seven : lyt_seven)
                                {
                                    for (auto eight = 0u; eight < lyt_eight.size(); eight++)
                                    {
                                        for (auto nine = 0u; nine < lyt_nine.size(); nine++)
                                        {
                                            for (auto t = 0u; t < lyt_ten.size(); t++)
                                            {
                                                for (auto l = 0u; l < lyt_11.size(); l++)
                                                {
                                                    for (const auto& lyts_12 : lyt_12)
                                                    {
                                                        for (const auto& lyts_13 : lyt_13)
                                                        {
                                                            lyt_one[i].foreach_cell(
                                                                [this, &charge_lyt, &lyt_one, &i](const auto& c1) {
                                                                    charge_lyt.assign_charge_state(
                                                                        c1, lyt_one[i].get_charge_state(c1), false);
                                                                });
                                                            lyt_two[j].foreach_cell(
                                                                [this, &charge_lyt, &lyt_two, &j](const auto& c1) {
                                                                    charge_lyt.assign_charge_state(
                                                                        c1, lyt_two[j].get_charge_state(c1), false);
                                                                });
                                                            lyt_three[three].foreach_cell(
                                                                [this, &charge_lyt, &lyt_three, &three](const auto& c1)
                                                                {
                                                                    charge_lyt.assign_charge_state(
                                                                        c1, lyt_three[three].get_charge_state(c1),
                                                                        false);
                                                                });
                                                            lyt_four[four].foreach_cell(
                                                                [this, &charge_lyt, &lyt_four, &four](const auto& c1) {
                                                                    charge_lyt.assign_charge_state(
                                                                        c1, lyt_four[four].get_charge_state(c1), false);
                                                                });
                                                            lyt_five[five].foreach_cell(
                                                                [this, &charge_lyt, &lyt_five, &five](const auto& c1) {
                                                                    charge_lyt.assign_charge_state(
                                                                        c1, lyt_five[five].get_charge_state(c1), false);
                                                                });
                                                            lyts_six.foreach_cell(
                                                                [this, &charge_lyt, &lyts_six](const auto& c1) {
                                                                    charge_lyt.assign_charge_state(
                                                                        c1, lyts_six.get_charge_state(c1), false);
                                                                });
                                                            lyts_seven.foreach_cell(
                                                                [this, &charge_lyt, &lyts_seven](const auto& c1) {
                                                                    charge_lyt.assign_charge_state(
                                                                        c1, lyts_seven.get_charge_state(c1), false);
                                                                });
                                                            lyt_eight[eight].foreach_cell(
                                                                [this, &charge_lyt, &lyt_eight, &eight](const auto& c1)
                                                                {
                                                                    charge_lyt.assign_charge_state(
                                                                        c1, lyt_eight[eight].get_charge_state(c1),
                                                                        false);
                                                                });
                                                            lyt_nine[nine].foreach_cell(
                                                                [this, &charge_lyt, &lyt_nine, &nine](const auto& c1) {
                                                                    charge_lyt.assign_charge_state(
                                                                        c1, lyt_nine[nine].get_charge_state(c1), false);
                                                                });
                                                            lyt_ten[t].foreach_cell(
                                                                [this, &charge_lyt, &lyt_ten, &t](const auto& c1) {
                                                                    charge_lyt.assign_charge_state(
                                                                        c1, lyt_ten[t].get_charge_state(c1), false);
                                                                });
                                                            lyt_11[l].foreach_cell(
                                                                [this, &charge_lyt, &lyt_11, &l](const auto& c1) {
                                                                    charge_lyt.assign_charge_state(
                                                                        c1, lyt_11[l].get_charge_state(c1), false);
                                                                });
                                                            lyts_12.foreach_cell(
                                                                [this, &charge_lyt, &lyts_12](const auto& c1) {
                                                                    charge_lyt.assign_charge_state(
                                                                        c1, lyts_12.get_charge_state(c1), false);
                                                                });
                                                            lyts_13.foreach_cell(
                                                                [this, &charge_lyt, &lyts_13](const auto& c1) {
                                                                    charge_lyt.assign_charge_state(
                                                                        c1, lyts_13.get_charge_state(c1), false);
                                                                });
                                                            charge_lyt.update_after_charge_change();
                                                            if (charge_lyt.is_physically_valid())
                                                            {
                                                                if (charge_lyt.get_system_energy() < energy_threas)
                                                                {
                                                                    std::vector<charge_distribution_surface<Lyt>>
                                                                        lyts{};
                                                                    std::cout << charge_lyt.get_system_energy()
                                                                              << std::endl;

                                                                    sidb_simulation_result<Lyt> sim_result{};
                                                                    sim_result.algorithm_name = "ExGS";
                                                                    charge_distribution_surface<Lyt> charge_lyt_copy{
                                                                        charge_lyt};
                                                                    lyts.emplace_back(charge_lyt_copy);
                                                                    sim_result.charge_distributions = lyts;
                                                                    energy_threas = charge_lyt.get_system_energy();
                                                                    write_sqd_sim_result<Lyt>(sim_result,
                                                                                              "/Users/jandrewniok/"
                                                                                              "CLionProjects/"
                                                                                              "fiction_fork/"
                                                                                              "experiments/"
                                                                                              "result.xml");
                                                                }
                                                            }
                                                            counter += 1;
                                                            if (counter % 100000 == 0)
                                                            {
                                                                std::cout << counter << std::endl;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    void combining_all_18_test()
    {
        auto compareFunc =
            [](const charge_distribution_surface<Lyt>& lyt1, const charge_distribution_surface<Lyt>& lyt2)
        { return lyt1.get_system_energy() < lyt2.get_system_energy(); };

        std::cout << "combining starts: " << std::to_string(lyts_of_regions.size()) << std::endl;
        uint64_t counter_lyts = 1;
        for (const auto& lyts_region : lyts_of_regions)
        {
            counter_lyts *= lyts_region.size();
        }
        std::cout << "number enumerations: " << std::to_string(counter_lyts) << std::endl;

        auto lyt_one   = lyts_of_regions[0];
        auto lyt_two   = lyts_of_regions[1];
        auto lyt_three = lyts_of_regions[2];
        auto lyt_four  = lyts_of_regions[3];
        auto lyt_five  = lyts_of_regions[4];
        auto lyt_six   = lyts_of_regions[5];
        auto lyt_seven = lyts_of_regions[6];
        auto lyt_eight = lyts_of_regions[7];
        auto lyt_nine  = lyts_of_regions[8];
        auto lyt_ten   = lyts_of_regions[9];
        auto lyt_11    = lyts_of_regions[10];
        auto lyt_12    = lyts_of_regions[11];
        auto lyt_13    = lyts_of_regions[12];
        auto lyt_14    = lyts_of_regions[13];
        auto lyt_15    = lyts_of_regions[14];
        auto lyt_16    = lyts_of_regions[15];
        auto lyt_17    = lyts_of_regions[16];
        auto lyt_18    = lyts_of_regions[17];

        std::sort(lyt_one.begin(), lyt_one.end(), compareFunc);
        std::sort(lyt_two.begin(), lyt_two.end(), compareFunc);
        std::sort(lyt_three.begin(), lyt_three.end(), compareFunc);
        std::sort(lyt_four.begin(), lyt_four.end(), compareFunc);
        std::sort(lyt_five.begin(), lyt_five.end(), compareFunc);
        std::sort(lyt_six.begin(), lyt_six.end(), compareFunc);
        std::sort(lyt_seven.begin(), lyt_seven.end(), compareFunc);
        std::sort(lyt_eight.begin(), lyt_eight.end(), compareFunc);
        std::sort(lyt_nine.begin(), lyt_nine.end(), compareFunc);
        std::sort(lyt_ten.begin(), lyt_ten.end(), compareFunc);
        std::sort(lyt_11.begin(), lyt_11.end(), compareFunc);
        std::sort(lyt_12.begin(), lyt_12.end(), compareFunc);
        std::sort(lyt_13.begin(), lyt_13.end(), compareFunc);
        std::sort(lyt_14.begin(), lyt_14.end(), compareFunc);
        std::sort(lyt_15.begin(), lyt_15.end(), compareFunc);
        std::sort(lyt_16.begin(), lyt_16.end(), compareFunc);
        std::sort(lyt_17.begin(), lyt_17.end(), compareFunc);
        std::sort(lyt_18.begin(), lyt_18.end(), compareFunc);

        int                                           number = 5;
        std::vector<charge_distribution_surface<Lyt>> lyt_ones(
            lyt_one.begin(), lyt_one.begin() + std::min(number, static_cast<int>(lyt_one.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_twos(
            lyt_two.begin(), lyt_two.begin() + std::min(number, static_cast<int>(lyt_two.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_threes(
            lyt_three.begin(), lyt_three.begin() + std::min(number, static_cast<int>(lyt_three.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_fours(
            lyt_four.begin(), lyt_four.begin() + std::min(number, static_cast<int>(lyt_four.size())));

        std::vector<charge_distribution_surface<Lyt>> lyt_fives(
            lyt_five.begin(), lyt_five.begin() + std::min(number, static_cast<int>(lyt_five.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_sixs(
            lyt_six.begin(), lyt_six.begin() + std::min(number, static_cast<int>(lyt_six.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_sevens(
            lyt_seven.begin(), lyt_seven.begin() + std::min(number, static_cast<int>(lyt_seven.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_eights(
            lyt_eight.begin(), lyt_eight.begin() + std::min(number, static_cast<int>(lyt_eight.size())));

        std::vector<charge_distribution_surface<Lyt>> lyt_nines(
            lyt_nine.begin(), lyt_nine.begin() + std::min(number, static_cast<int>(lyt_nine.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_tens(
            lyt_ten.begin(), lyt_ten.begin() + std::min(number, static_cast<int>(lyt_ten.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_11s(
            lyt_11.begin(), lyt_11.begin() + std::min(number, static_cast<int>(lyt_11.size())));

        std::vector<charge_distribution_surface<Lyt>> lyt_12s(
            lyt_12.begin(), lyt_12.begin() + std::min(number, static_cast<int>(lyt_12.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_13s(
            lyt_13.begin(), lyt_13.begin() + std::min(number, static_cast<int>(lyt_13.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_14s(
            lyt_14.begin(), lyt_14.begin() + std::min(number, static_cast<int>(lyt_14.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_15s(
            lyt_15.begin(), lyt_15.begin() + std::min(number, static_cast<int>(lyt_15.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_16s(
            lyt_16.begin(), lyt_16.begin() + std::min(number, static_cast<int>(lyt_16.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_17s(
            lyt_17.begin(), lyt_17.begin() + std::min(number, static_cast<int>(lyt_17.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_18s(
            lyt_18.begin(), lyt_18.begin() + std::min(number, static_cast<int>(lyt_18.size())));

        charge_distribution_surface<Lyt> charge_lyt{layout};
        uint64_t                         counter = 0;
        std::vector<double>              valid_energies{};
        double                           energy_threas = 1000;
        for (auto i = 0u; i < lyt_one.size(); i++)
        {
            for (auto j = 0u; j < lyt_two.size(); j++)
            {
                for (auto three = 0u; three < lyt_three.size(); three++)
                {
                    for (auto four = 0u; four < lyt_four.size(); four++)
                    {
                        for (auto five = 0u; five < lyt_five.size(); five++)
                        {
                            for (const auto& lyts_six : lyt_six)
                            {
                                //                                uint64_t counter_unmatched_one = 0;
                                //                                for (const auto& neighbor_cell :
                                //                                all_defect_cells[0])
                                //                                {
                                //                                    lyts_six.foreach_cell(
                                //                                        [&counter_unmatched_one, &neighbor_cell,
                                //                                        &lyts_six, &i, this](const auto& c1)
                                //                                        {
                                //                                            if (c1 == neighbor_cell)
                                //                                            {
                                //                                                if
                                //                                                (charge_state_to_sign(lyts_six.get_charge_state(c1))
                                //                                                !=
                                //                                                    get_charge_state_defect(0, i,
                                //                                                    c1))
                                //                                                {
                                //                                                    counter_unmatched_one += 1;
                                //                                                }
                                //                                            }
                                //                                        });
                                //                                }
                                //                                if (counter_unmatched_one != 0)
                                //                                {
                                //                                    continue;
                                //                                }
                                //
                                //                                uint64_t counter_unmatched = 0;
                                //                                for (const auto& neighbor_cell :
                                //                                all_defect_cells[1])
                                //                                {
                                //                                    lyts_six.foreach_cell(
                                //                                        [&counter_unmatched, &neighbor_cell,
                                //                                        &lyts_six, &j, this](const auto& c1)
                                //                                        {
                                //                                            if (c1 == neighbor_cell)
                                //                                            {
                                //                                                if
                                //                                                (charge_state_to_sign(lyts_six.get_charge_state(c1))
                                //                                                !=
                                //                                                    get_charge_state_defect(1, j,
                                //                                                    c1))
                                //                                                {
                                //                                                    counter_unmatched += 1;
                                //                                                }
                                //                                            }
                                //                                        });
                                //                                }
                                //                                if (counter_unmatched != 0)
                                //                                {
                                //                                    continue;
                                //                                }

                                for (const auto& lyts_seven : lyt_seven)
                                {
                                    //                                    uint64_t counter_three = 0;
                                    //                                    for (const auto& neighbor_cell :
                                    //                                    all_defect_cells[2])
                                    //                                    {
                                    //                                        lyts_seven.foreach_cell(
                                    //                                            [&counter_three, &neighbor_cell,
                                    //                                            &lyts_seven, &three, this](const
                                    //                                            auto& c1)
                                    //                                            {
                                    //                                                if (c1 == neighbor_cell)
                                    //                                                {
                                    //                                                    if
                                    //                                                    (charge_state_to_sign(lyts_seven.get_charge_state(c1))
                                    //                                                    !=
                                    //                                                        get_charge_state_defect(2,
                                    //                                                        three, c1))
                                    //                                                    {
                                    //                                                        counter_three += 1;
                                    //                                                    }
                                    //                                                }
                                    //                                            });
                                    //                                    }
                                    //                                    if (counter_three != 0)
                                    //                                    {
                                    //                                        continue;
                                    //                                    }

                                    for (auto eight = 0u; eight < lyt_eight.size(); eight++)
                                    {
                                        //                                        uint64_t counter_unmatched_4 = 0;
                                        //                                        for (const auto&
                                        //                                        neighbor_cell_four :
                                        //                                        all_defect_cells[3])
                                        //                                        {
                                        //                                            lyt_eight[eight].foreach_cell(
                                        //                                                [&counter_unmatched_4,
                                        //                                                &neighbor_cell_four,
                                        //                                                &lyt_eight, &four, &eight,
                                        //                                                 this](const auto& c1)
                                        //                                                {
                                        //                                                    if (c1 ==
                                        //                                                    neighbor_cell_four)
                                        //                                                    {
                                        //                                                        if
                                        //                                                        (charge_state_to_sign(lyt_eight[eight].get_charge_state(
                                        //                                                                c1)) !=
                                        //                                                                get_charge_state_defect(3,
                                        //                                                                four, c1))
                                        //                                                        {
                                        //                                                            counter_unmatched_4
                                        //                                                            += 1;
                                        //                                                        }
                                        //                                                    }
                                        //                                                });
                                        //                                        }
                                        //                                        if (counter_unmatched_4 != 0)
                                        //                                        {
                                        //                                            continue;
                                        //                                        }

                                        for (auto nine = 0u; nine < lyt_nine.size(); nine++)
                                        {
                                            //                                            uint64_t
                                            //                                            counter_unmatched_five =
                                            //                                            0; for (const auto&
                                            //                                            neighbor_cell_five :
                                            //                                            all_defect_cells[4])
                                            //                                            {
                                            //                                                lyt_nine[nine].foreach_cell(
                                            //                                                    [&counter_unmatched_five,
                                            //                                                    &neighbor_cell_five,
                                            //                                                    &lyt_nine, &five,
                                            //                                                     &nine,
                                            //                                                     this](const auto&
                                            //                                                     c1)
                                            //                                                    {
                                            //                                                        if (c1 ==
                                            //                                                        neighbor_cell_five)
                                            //                                                        {
                                            //                                                            if
                                            //                                                            (charge_state_to_sign(lyt_nine[nine].get_charge_state(
                                            //                                                                    c1))
                                            //                                                                    !=
                                            //                                                                    get_charge_state_defect(4,
                                            //                                                                    five,
                                            //                                                                    c1))
                                            //                                                            {
                                            //                                                                counter_unmatched_five
                                            //                                                                += 1;
                                            //                                                            }
                                            //                                                        }
                                            //                                                    });
                                            //                                            }
                                            //                                            if (counter_unmatched_five
                                            //                                            != 0)
                                            //                                            {
                                            //                                                continue;
                                            //                                            }

                                            for (auto t = 0u; t < lyt_ten.size(); t++)
                                            {
                                                //                                                uint64_t
                                                //                                                counter_unmatched_7
                                                //                                                = 0; for (const
                                                //                                                auto&
                                                //                                                neighbor_cell_seven
                                                //                                                :
                                                //                                                all_defect_cells[6])
                                                //                                                {
                                                //                                                    lyt_ten[t].foreach_cell(
                                                //                                                        [&counter_unmatched_7,
                                                //                                                        &neighbor_cell_seven,
                                                //                                                        &lyt_ten,
                                                //                                                        &t,
                                                //                                                         this](const
                                                //                                                         auto& c1)
                                                //                                                        {
                                                //                                                            if (c1
                                                //                                                            ==
                                                //                                                            neighbor_cell_seven)
                                                //                                                            {
                                                //                                                                if
                                                //                                                                (charge_state_to_sign(lyt_ten[t].get_charge_state(
                                                //                                                                        c1)) != get_charge_state_defect(6, t, c1))
                                                //                                                                {
                                                //                                                                    counter_unmatched_7
                                                //                                                                    +=
                                                //                                                                    1;
                                                //                                                                }
                                                //                                                            }
                                                //                                                        });
                                                //                                                }
                                                //                                                if
                                                //                                                (counter_unmatched_7
                                                //                                                != 0)
                                                //                                                {
                                                //                                                    continue;
                                                //                                                }

                                                for (auto l = 0u; l < lyt_11.size(); l++)
                                                {
                                                    for (const auto& lyts_12 : lyt_12)
                                                    {
                                                        //                                                        uint64_t
                                                        //                                                        counter_unmatched_9
                                                        //                                                        =
                                                        //                                                        0;
                                                        //                                                        for
                                                        //                                                        (const
                                                        //                                                        auto&
                                                        //                                                        neighbor_cell_nine
                                                        //                                                        :
                                                        //                                                        all_defect_cells[8])
                                                        //                                                        {
                                                        //                                                            lyts_12.foreach_cell(
                                                        //                                                                [&counter_unmatched_9, &neighbor_cell_nine, &lyts_12,
                                                        //                                                                 &nine, this](const auto& c1)
                                                        //                                                                {
                                                        //                                                                    if (c1 == neighbor_cell_nine)
                                                        //                                                                    {
                                                        //                                                                        if (charge_state_to_sign(
                                                        //                                                                                lyts_12.get_charge_state(c1)) !=
                                                        //                                                                            get_charge_state_defect(8, nine, c1))
                                                        //                                                                        {
                                                        //                                                                            counter_unmatched_9 += 1;
                                                        //                                                                        }
                                                        //                                                                    }
                                                        //                                                                });
                                                        //                                                        }
                                                        //                                                        if
                                                        //                                                        (counter_unmatched_9
                                                        //                                                        !=
                                                        //                                                        0)
                                                        //                                                        {
                                                        //                                                            continue;
                                                        //                                                        }

                                                        //                                                        uint64_t
                                                        //                                                        counter_unmatched_8
                                                        //                                                        =
                                                        //                                                        0;
                                                        //                                                        for
                                                        //                                                        (const
                                                        //                                                        auto&
                                                        //                                                        neighbor_cell_eight
                                                        //                                                        :
                                                        //                                                        all_defect_cells[7])
                                                        //                                                        {
                                                        //                                                            lyts_12.foreach_cell(
                                                        //                                                                [&counter_unmatched_8, &neighbor_cell_eight, &lyts_12,
                                                        //                                                                 &eight, this](const auto& c1)
                                                        //                                                                {
                                                        //                                                                    if (c1 == neighbor_cell_eight)
                                                        //                                                                    {
                                                        //                                                                        if (charge_state_to_sign(
                                                        //                                                                                lyts_12.get_charge_state(c1)) !=
                                                        //                                                                            get_charge_state_defect(7, eight, c1))
                                                        //                                                                        {
                                                        //                                                                            counter_unmatched_8 += 1;
                                                        //                                                                        }
                                                        //                                                                    }
                                                        //                                                                });
                                                        //                                                        }
                                                        //                                                        if
                                                        //                                                        (counter_unmatched_8
                                                        //                                                        !=
                                                        //                                                        0)
                                                        //                                                        {
                                                        //                                                            continue;
                                                        //                                                        }

                                                        for (const auto& lyts_13 : lyt_13)
                                                        {
                                                            //                                                            uint64_t counter_unmatched_eleven = 0;
                                                            //                                                            for (const auto& neighbor_cell : all_defect_cells[10])
                                                            //                                                            {
                                                            //                                                                lyts_13.foreach_cell(
                                                            //                                                                    [&counter_unmatched_eleven, &neighbor_cell,
                                                            //                                                                     &lyts_13, &l, this](const auto& c1)
                                                            //                                                                    {
                                                            //                                                                        if (c1 == neighbor_cell)
                                                            //                                                                        {
                                                            //                                                                            if (charge_state_to_sign(
                                                            //                                                                                    lyts_13.get_charge_state(c1)) !=
                                                            //                                                                                get_charge_state_defect(10, l, c1))
                                                            //                                                                            {
                                                            //                                                                                counter_unmatched_eleven += 1;
                                                            //                                                                            }
                                                            //                                                                        }
                                                            //                                                                    });
                                                            //                                                            }
                                                            //                                                            if (counter_unmatched_eleven != 0)
                                                            //                                                            {
                                                            //                                                                continue;
                                                            //                                                            }
                                                            //
                                                            //                                                            uint64_t counter_unmatched_13 = 0;
                                                            //                                                            for (const auto& neighbor_cell : all_defect_cells[9])
                                                            //                                                            {
                                                            //                                                                lyts_13.foreach_cell(
                                                            //                                                                    [&counter_unmatched_13, &neighbor_cell, &lyts_13,
                                                            //                                                                     &t, this](const auto& c1)
                                                            //                                                                    {
                                                            //                                                                        if (c1 == neighbor_cell)
                                                            //                                                                        {
                                                            //                                                                            if (charge_state_to_sign(
                                                            //                                                                                    lyts_13.get_charge_state(c1)) !=
                                                            //                                                                                get_charge_state_defect(9, t, c1))
                                                            //                                                                            {
                                                            //                                                                                counter_unmatched_13 += 1;
                                                            //                                                                            }
                                                            //                                                                        }
                                                            //                                                                    });
                                                            //                                                            }
                                                            //                                                            if (counter_unmatched_13 != 0)
                                                            //                                                            {
                                                            //                                                                continue;
                                                            //                                                            }

                                                            for (const auto& lyts_14 : lyt_14)
                                                            {
                                                                for (const auto& lyts_15 : lyt_15)
                                                                {
                                                                    for (const auto& lyts_16 : lyt_16)
                                                                    {
                                                                        for (const auto& lyts_17 : lyt_17)
                                                                        {
                                                                            for (const auto& lyts_18 : lyt_18)
                                                                            {
                                                                                lyt_one[i].foreach_cell(
                                                                                    [this, &charge_lyt, &lyt_one,
                                                                                     &i](const auto& c1) {
                                                                                        charge_lyt.assign_charge_state(
                                                                                            c1,
                                                                                            lyt_one[i].get_charge_state(
                                                                                                c1),
                                                                                            false);
                                                                                    });
                                                                                lyt_two[j].foreach_cell(
                                                                                    [this, &charge_lyt, &lyt_two,
                                                                                     &j](const auto& c1) {
                                                                                        charge_lyt.assign_charge_state(
                                                                                            c1,
                                                                                            lyt_two[j].get_charge_state(
                                                                                                c1),
                                                                                            false);
                                                                                    });
                                                                                lyt_three[three].foreach_cell(
                                                                                    [this, &charge_lyt, &lyt_three,
                                                                                     &three](const auto& c1) {
                                                                                        charge_lyt.assign_charge_state(
                                                                                            c1,
                                                                                            lyt_three[three]
                                                                                                .get_charge_state(c1),
                                                                                            false);
                                                                                    });
                                                                                lyt_four[four].foreach_cell(
                                                                                    [this, &charge_lyt, &lyt_four,
                                                                                     &four](const auto& c1) {
                                                                                        charge_lyt.assign_charge_state(
                                                                                            c1,
                                                                                            lyt_four[four]
                                                                                                .get_charge_state(c1),
                                                                                            false);
                                                                                    });
                                                                                lyt_five[five].foreach_cell(
                                                                                    [this, &charge_lyt, &lyt_five,
                                                                                     &five](const auto& c1) {
                                                                                        charge_lyt.assign_charge_state(
                                                                                            c1,
                                                                                            lyt_five[five]
                                                                                                .get_charge_state(c1),
                                                                                            false);
                                                                                    });
                                                                                lyts_six.foreach_cell(
                                                                                    [this, &charge_lyt,
                                                                                     &lyts_six](const auto& c1) {
                                                                                        charge_lyt.assign_charge_state(
                                                                                            c1,
                                                                                            lyts_six.get_charge_state(
                                                                                                c1),
                                                                                            false);
                                                                                    });
                                                                                lyts_seven.foreach_cell(
                                                                                    [this, &charge_lyt,
                                                                                     &lyts_seven](const auto& c1) {
                                                                                        charge_lyt.assign_charge_state(
                                                                                            c1,
                                                                                            lyts_seven.get_charge_state(
                                                                                                c1),
                                                                                            false);
                                                                                    });
                                                                                lyt_eight[eight].foreach_cell(
                                                                                    [this, &charge_lyt, &lyt_eight,
                                                                                     &eight](const auto& c1) {
                                                                                        charge_lyt.assign_charge_state(
                                                                                            c1,
                                                                                            lyt_eight[eight]
                                                                                                .get_charge_state(c1),
                                                                                            false);
                                                                                    });
                                                                                lyt_nine[nine].foreach_cell(
                                                                                    [this, &charge_lyt, &lyt_nine,
                                                                                     &nine](const auto& c1) {
                                                                                        charge_lyt.assign_charge_state(
                                                                                            c1,
                                                                                            lyt_nine[nine]
                                                                                                .get_charge_state(c1),
                                                                                            false);
                                                                                    });
                                                                                lyt_ten[t].foreach_cell(
                                                                                    [this, &charge_lyt, &lyt_ten,
                                                                                     &t](const auto& c1) {
                                                                                        charge_lyt.assign_charge_state(
                                                                                            c1,
                                                                                            lyt_ten[t].get_charge_state(
                                                                                                c1),
                                                                                            false);
                                                                                    });
                                                                                lyt_11[l].foreach_cell(
                                                                                    [this, &charge_lyt, &lyt_11,
                                                                                     &l](const auto& c1) {
                                                                                        charge_lyt.assign_charge_state(
                                                                                            c1,
                                                                                            lyt_11[l].get_charge_state(
                                                                                                c1),
                                                                                            false);
                                                                                    });
                                                                                lyts_12.foreach_cell(
                                                                                    [this, &charge_lyt,
                                                                                     &lyts_12](const auto& c1) {
                                                                                        charge_lyt.assign_charge_state(
                                                                                            c1,
                                                                                            lyts_12.get_charge_state(
                                                                                                c1),
                                                                                            false);
                                                                                    });
                                                                                lyts_13.foreach_cell(
                                                                                    [this, &charge_lyt,
                                                                                     &lyts_13](const auto& c1) {
                                                                                        charge_lyt.assign_charge_state(
                                                                                            c1,
                                                                                            lyts_13.get_charge_state(
                                                                                                c1),
                                                                                            false);
                                                                                    });
                                                                                lyts_14.foreach_cell(
                                                                                    [this, &charge_lyt,
                                                                                     &lyts_14](const auto& c1) {
                                                                                        charge_lyt.assign_charge_state(
                                                                                            c1,
                                                                                            lyts_14.get_charge_state(
                                                                                                c1),
                                                                                            false);
                                                                                    });
                                                                                lyts_15.foreach_cell(
                                                                                    [this, &charge_lyt,
                                                                                     &lyts_15](const auto& c1) {
                                                                                        charge_lyt.assign_charge_state(
                                                                                            c1,
                                                                                            lyts_15.get_charge_state(
                                                                                                c1),
                                                                                            false);
                                                                                    });
                                                                                lyts_16.foreach_cell(
                                                                                    [this, &charge_lyt,
                                                                                     &lyts_16](const auto& c1) {
                                                                                        charge_lyt.assign_charge_state(
                                                                                            c1,
                                                                                            lyts_16.get_charge_state(
                                                                                                c1),
                                                                                            false);
                                                                                    });
                                                                                lyts_17.foreach_cell(
                                                                                    [this, &charge_lyt,
                                                                                     &lyts_17](const auto& c1) {
                                                                                        charge_lyt.assign_charge_state(
                                                                                            c1,
                                                                                            lyts_17.get_charge_state(
                                                                                                c1),
                                                                                            false);
                                                                                    });
                                                                                lyts_18.foreach_cell(
                                                                                    [this, &charge_lyt,
                                                                                     &lyts_18](const auto& c1) {
                                                                                        charge_lyt.assign_charge_state(
                                                                                            c1,
                                                                                            lyts_18.get_charge_state(
                                                                                                c1),
                                                                                            false);
                                                                                    });
                                                                                charge_lyt.update_after_charge_change();
                                                                                if (charge_lyt.is_physically_valid())
                                                                                {
                                                                                    if (charge_lyt.get_system_energy() <
                                                                                        energy_threas)
                                                                                    {
                                                                                        std::vector<
                                                                                            charge_distribution_surface<
                                                                                                Lyt>>
                                                                                            lyts{};
                                                                                        std::cout
                                                                                            << charge_lyt
                                                                                                   .get_system_energy()
                                                                                            << std::endl;

                                                                                        sidb_simulation_result<Lyt>
                                                                                            sim_result{};
                                                                                        sim_result.algorithm_name =
                                                                                            "ExGS";
                                                                                        charge_distribution_surface<Lyt>
                                                                                            charge_lyt_copy{charge_lyt};
                                                                                        lyts.emplace_back(
                                                                                            charge_lyt_copy);
                                                                                        sim_result
                                                                                            .charge_distributions =
                                                                                            lyts;
                                                                                        energy_threas =
                                                                                            charge_lyt
                                                                                                .get_system_energy();
                                                                                        write_sqd_sim_result<Lyt>(
                                                                                            sim_result,
                                                                                            "/Users/jandrewniok/"
                                                                                            "CLionProjects/"
                                                                                            "fiction_fork/"
                                                                                            "experiments/"
                                                                                            "result.xml");
                                                                                    }
                                                                                }
                                                                                counter += 1;
                                                                                if (counter % 100000 == 0)
                                                                                {
                                                                                    std::cout << counter << std::endl;
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    void combining_all_16_test()
    {
        auto compareFunc =
            [](const charge_distribution_surface<Lyt>& lyt1, const charge_distribution_surface<Lyt>& lyt2)
        { return lyt1.get_system_energy() < lyt2.get_system_energy(); };

        std::cout << "combining starts: " << std::to_string(lyts_of_regions.size()) << std::endl;
        uint64_t counter_lyts = 1;
        for (const auto& lyts_region : lyts_of_regions)
        {
            counter_lyts *= lyts_region.size();
        }
        std::cout << "number enumerations: " << std::to_string(counter_lyts) << std::endl;

        auto lyt_one   = lyts_of_regions[0];
        auto lyt_two   = lyts_of_regions[1];
        auto lyt_three = lyts_of_regions[2];
        auto lyt_four  = lyts_of_regions[3];
        auto lyt_five  = lyts_of_regions[4];
        auto lyt_six   = lyts_of_regions[5];
        auto lyt_seven = lyts_of_regions[6];
        auto lyt_eight = lyts_of_regions[7];
        auto lyt_nine  = lyts_of_regions[8];
        auto lyt_ten   = lyts_of_regions[9];
        auto lyt_11    = lyts_of_regions[10];
        auto lyt_12    = lyts_of_regions[11];
        auto lyt_13    = lyts_of_regions[12];
        auto lyt_14    = lyts_of_regions[13];
        auto lyt_15    = lyts_of_regions[14];
        auto lyt_16    = lyts_of_regions[15];

        std::sort(lyt_one.begin(), lyt_one.end(), compareFunc);
        std::sort(lyt_two.begin(), lyt_two.end(), compareFunc);
        std::sort(lyt_three.begin(), lyt_three.end(), compareFunc);
        std::sort(lyt_four.begin(), lyt_four.end(), compareFunc);
        std::sort(lyt_five.begin(), lyt_five.end(), compareFunc);
        std::sort(lyt_six.begin(), lyt_six.end(), compareFunc);
        std::sort(lyt_seven.begin(), lyt_seven.end(), compareFunc);
        std::sort(lyt_eight.begin(), lyt_eight.end(), compareFunc);
        std::sort(lyt_nine.begin(), lyt_nine.end(), compareFunc);
        std::sort(lyt_ten.begin(), lyt_ten.end(), compareFunc);
        std::sort(lyt_11.begin(), lyt_11.end(), compareFunc);
        std::sort(lyt_12.begin(), lyt_12.end(), compareFunc);
        std::sort(lyt_13.begin(), lyt_13.end(), compareFunc);
        std::sort(lyt_14.begin(), lyt_14.end(), compareFunc);
        std::sort(lyt_15.begin(), lyt_15.end(), compareFunc);
        std::sort(lyt_16.begin(), lyt_16.end(), compareFunc);

        int                                           number = 5;
        std::vector<charge_distribution_surface<Lyt>> lyt_ones(
            lyt_one.begin(), lyt_one.begin() + std::min(number, static_cast<int>(lyt_one.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_twos(
            lyt_two.begin(), lyt_two.begin() + std::min(number, static_cast<int>(lyt_two.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_threes(
            lyt_three.begin(), lyt_three.begin() + std::min(number, static_cast<int>(lyt_three.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_fours(
            lyt_four.begin(), lyt_four.begin() + std::min(number, static_cast<int>(lyt_four.size())));

        std::vector<charge_distribution_surface<Lyt>> lyt_fives(
            lyt_five.begin(), lyt_five.begin() + std::min(number, static_cast<int>(lyt_five.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_sixs(
            lyt_six.begin(), lyt_six.begin() + std::min(number, static_cast<int>(lyt_six.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_sevens(
            lyt_seven.begin(), lyt_seven.begin() + std::min(number, static_cast<int>(lyt_seven.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_eights(
            lyt_eight.begin(), lyt_eight.begin() + std::min(number, static_cast<int>(lyt_eight.size())));

        std::vector<charge_distribution_surface<Lyt>> lyt_nines(
            lyt_nine.begin(), lyt_nine.begin() + std::min(number, static_cast<int>(lyt_nine.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_tens(
            lyt_ten.begin(), lyt_ten.begin() + std::min(number, static_cast<int>(lyt_ten.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_11s(
            lyt_11.begin(), lyt_11.begin() + std::min(number, static_cast<int>(lyt_11.size())));

        std::vector<charge_distribution_surface<Lyt>> lyt_12s(
            lyt_12.begin(), lyt_12.begin() + std::min(number, static_cast<int>(lyt_12.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_13s(
            lyt_13.begin(), lyt_13.begin() + std::min(number, static_cast<int>(lyt_13.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_14s(
            lyt_14.begin(), lyt_14.begin() + std::min(number, static_cast<int>(lyt_14.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_15s(
            lyt_15.begin(), lyt_15.begin() + std::min(number, static_cast<int>(lyt_15.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_16s(
            lyt_16.begin(), lyt_16.begin() + std::min(number, static_cast<int>(lyt_16.size())));

        charge_distribution_surface<Lyt> charge_lyt{layout};
        uint64_t                         counter = 0;
        std::vector<double>              valid_energies{};
        double                           energy_threas = 1000;
        for (auto i = 0u; i < lyt_one.size(); i++)
        {
            for (auto j = 0u; j < lyt_two.size(); j++)
            {
                for (auto three = 0u; three < lyt_three.size(); three++)
                {
                    for (auto four = 0u; four < lyt_four.size(); four++)
                    {
                        for (auto five = 0u; five < lyt_five.size(); five++)
                        {
                            for (const auto& lyts_six : lyt_six)
                            {
                                uint64_t counter_unmatched_one = 0;
                                for (const auto& neighbor_cell : all_defect_cells[0])
                                {
                                    lyts_six.foreach_cell(
                                        [&counter_unmatched_one, &neighbor_cell, &lyts_six, &i, this](const auto& c1)
                                        {
                                            if (c1 == neighbor_cell)
                                            {
                                                if (charge_state_to_sign(lyts_six.get_charge_state(c1)) !=
                                                    get_charge_state_defect(0, i, c1))
                                                {
                                                    counter_unmatched_one += 1;
                                                }
                                            }
                                        });
                                }
                                if (counter_unmatched_one != 0)
                                {
                                    continue;
                                }

                                uint64_t counter_unmatched = 0;
                                for (const auto& neighbor_cell : all_defect_cells[1])
                                {
                                    lyts_six.foreach_cell(
                                        [&counter_unmatched, &neighbor_cell, &lyts_six, &j, this](const auto& c1)
                                        {
                                            if (c1 == neighbor_cell)
                                            {
                                                if (charge_state_to_sign(lyts_six.get_charge_state(c1)) !=
                                                    get_charge_state_defect(1, j, c1))
                                                {
                                                    counter_unmatched += 1;
                                                }
                                            }
                                        });
                                }
                                if (counter_unmatched != 0)
                                {
                                    continue;
                                }

                                for (const auto& lyts_seven : lyt_seven)
                                {
                                    uint64_t counter_three = 0;
                                    for (const auto& neighbor_cell : all_defect_cells[2])
                                    {
                                        lyts_seven.foreach_cell(
                                            [&counter_three, &neighbor_cell, &lyts_seven, &three, this](const auto& c1)
                                            {
                                                if (c1 == neighbor_cell)
                                                {
                                                    if (charge_state_to_sign(lyts_seven.get_charge_state(c1)) !=
                                                        get_charge_state_defect(2, three, c1))
                                                    {
                                                        counter_three += 1;
                                                    }
                                                }
                                            });
                                    }
                                    if (counter_three != 0)
                                    {
                                        continue;
                                    }

                                    for (auto eight = 0u; eight < lyt_eight.size(); eight++)
                                    {
                                        uint64_t counter_unmatched_4 = 0;
                                        for (const auto& neighbor_cell_four : all_defect_cells[3])
                                        {
                                            lyt_eight[eight].foreach_cell(
                                                [&counter_unmatched_4, &neighbor_cell_four, &lyt_eight, &four, &eight,
                                                 this](const auto& c1)
                                                {
                                                    if (c1 == neighbor_cell_four)
                                                    {
                                                        if (charge_state_to_sign(lyt_eight[eight].get_charge_state(
                                                                c1)) != get_charge_state_defect(3, four, c1))
                                                        {
                                                            counter_unmatched_4 += 1;
                                                        }
                                                    }
                                                });
                                        }
                                        if (counter_unmatched_4 != 0)
                                        {
                                            continue;
                                        }

                                        for (auto nine = 0u; nine < lyt_nine.size(); nine++)
                                        {
                                            uint64_t counter_unmatched_five = 0;
                                            for (const auto& neighbor_cell_five : all_defect_cells[4])
                                            {
                                                lyt_nine[nine].foreach_cell(
                                                    [&counter_unmatched_five, &neighbor_cell_five, &lyt_nine, &five,
                                                     &nine, this](const auto& c1)
                                                    {
                                                        if (c1 == neighbor_cell_five)
                                                        {
                                                            if (charge_state_to_sign(lyt_nine[nine].get_charge_state(
                                                                    c1)) != get_charge_state_defect(4, five, c1))
                                                            {
                                                                counter_unmatched_five += 1;
                                                            }
                                                        }
                                                    });
                                            }
                                            if (counter_unmatched_five != 0)
                                            {
                                                continue;
                                            }

                                            for (auto t = 0u; t < lyt_ten.size(); t++)
                                            {

                                                for (auto l = 0u; l < lyt_11.size(); l++)
                                                {
                                                    for (const auto& lyts_12 : lyt_12)
                                                    {
                                                        uint64_t counter_unmatched_9 = 0;
                                                        for (const auto& neighbor_cell_nine : all_defect_cells[8])
                                                        {
                                                            lyts_12.foreach_cell(
                                                                [&counter_unmatched_9, &neighbor_cell_nine, &lyts_12,
                                                                 &nine, this](const auto& c1)
                                                                {
                                                                    if (c1 == neighbor_cell_nine)
                                                                    {
                                                                        if (charge_state_to_sign(
                                                                                lyts_12.get_charge_state(c1)) !=
                                                                            get_charge_state_defect(8, nine, c1))
                                                                        {
                                                                            counter_unmatched_9 += 1;
                                                                        }
                                                                    }
                                                                });
                                                        }
                                                        if (counter_unmatched_9 != 0)
                                                        {
                                                            continue;
                                                        }

                                                        uint64_t counter_unmatched_8 = 0;
                                                        for (const auto& neighbor_cell_eight : all_defect_cells[7])
                                                        {
                                                            lyts_12.foreach_cell(
                                                                [&counter_unmatched_8, &neighbor_cell_eight, &lyts_12,
                                                                 &eight, this](const auto& c1)
                                                                {
                                                                    if (c1 == neighbor_cell_eight)
                                                                    {
                                                                        if (charge_state_to_sign(
                                                                                lyts_12.get_charge_state(c1)) !=
                                                                            get_charge_state_defect(7, eight, c1))
                                                                        {
                                                                            counter_unmatched_8 += 1;
                                                                        }
                                                                    }
                                                                });
                                                        }
                                                        if (counter_unmatched_8 != 0)
                                                        {
                                                            continue;
                                                        }

                                                        for (const auto& lyts_13 : lyt_13)
                                                        {
                                                            uint64_t counter_unmatched_eleven = 0;
                                                            for (const auto& neighbor_cell : all_defect_cells[10])
                                                            {
                                                                lyts_13.foreach_cell(
                                                                    [&counter_unmatched_eleven, &neighbor_cell,
                                                                     &lyts_13, &l, this](const auto& c1)
                                                                    {
                                                                        if (c1 == neighbor_cell)
                                                                        {
                                                                            if (charge_state_to_sign(
                                                                                    lyts_13.get_charge_state(c1)) !=
                                                                                get_charge_state_defect(10, l, c1))
                                                                            {
                                                                                counter_unmatched_eleven += 1;
                                                                            }
                                                                        }
                                                                    });
                                                            }
                                                            if (counter_unmatched_eleven != 0)
                                                            {
                                                                continue;
                                                            }

                                                            uint64_t counter_unmatched_13 = 0;
                                                            for (const auto& neighbor_cell : all_defect_cells[9])
                                                            {
                                                                lyts_13.foreach_cell(
                                                                    [&counter_unmatched_13, &neighbor_cell, &lyts_13,
                                                                     &t, this](const auto& c1)
                                                                    {
                                                                        if (c1 == neighbor_cell)
                                                                        {
                                                                            if (charge_state_to_sign(
                                                                                    lyts_13.get_charge_state(c1)) !=
                                                                                get_charge_state_defect(9, t, c1))
                                                                            {
                                                                                counter_unmatched_13 += 1;
                                                                            }
                                                                        }
                                                                    });
                                                            }
                                                            if (counter_unmatched_13 != 0)
                                                            {
                                                                continue;
                                                            }

                                                            for (const auto& lyts_14 : lyt_14)
                                                            {
                                                                for (const auto& lyts_15 : lyt_15)
                                                                {
                                                                    for (const auto& lyts_16 : lyt_16)
                                                                    {
                                                                        lyt_one[i].foreach_cell(
                                                                            [this, &charge_lyt, &lyt_one,
                                                                             &i](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1, lyt_one[i].get_charge_state(c1),
                                                                                    false);
                                                                            });
                                                                        lyt_two[j].foreach_cell(
                                                                            [this, &charge_lyt, &lyt_two,
                                                                             &j](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1, lyt_two[j].get_charge_state(c1),
                                                                                    false);
                                                                            });
                                                                        lyt_three[three].foreach_cell(
                                                                            [this, &charge_lyt, &lyt_three,
                                                                             &three](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1,
                                                                                    lyt_three[three].get_charge_state(
                                                                                        c1),
                                                                                    false);
                                                                            });
                                                                        lyt_four[four].foreach_cell(
                                                                            [this, &charge_lyt, &lyt_four,
                                                                             &four](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1,
                                                                                    lyt_four[four].get_charge_state(c1),
                                                                                    false);
                                                                            });
                                                                        lyt_five[five].foreach_cell(
                                                                            [this, &charge_lyt, &lyt_five,
                                                                             &five](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1,
                                                                                    lyt_five[five].get_charge_state(c1),
                                                                                    false);
                                                                            });
                                                                        lyts_six.foreach_cell(
                                                                            [this, &charge_lyt,
                                                                             &lyts_six](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1, lyts_six.get_charge_state(c1),
                                                                                    false);
                                                                            });
                                                                        lyts_seven.foreach_cell(
                                                                            [this, &charge_lyt,
                                                                             &lyts_seven](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1, lyts_seven.get_charge_state(c1),
                                                                                    false);
                                                                            });
                                                                        lyt_eight[eight].foreach_cell(
                                                                            [this, &charge_lyt, &lyt_eight,
                                                                             &eight](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1,
                                                                                    lyt_eight[eight].get_charge_state(
                                                                                        c1),
                                                                                    false);
                                                                            });
                                                                        lyt_nine[nine].foreach_cell(
                                                                            [this, &charge_lyt, &lyt_nine,
                                                                             &nine](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1,
                                                                                    lyt_nine[nine].get_charge_state(c1),
                                                                                    false);
                                                                            });
                                                                        lyt_ten[t].foreach_cell(
                                                                            [this, &charge_lyt, &lyt_ten,
                                                                             &t](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1, lyt_ten[t].get_charge_state(c1),
                                                                                    false);
                                                                            });
                                                                        lyt_11[l].foreach_cell(
                                                                            [this, &charge_lyt, &lyt_11,
                                                                             &l](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1, lyt_11[l].get_charge_state(c1),
                                                                                    false);
                                                                            });
                                                                        lyts_12.foreach_cell(
                                                                            [this, &charge_lyt,
                                                                             &lyts_12](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1, lyts_12.get_charge_state(c1),
                                                                                    false);
                                                                            });
                                                                        lyts_13.foreach_cell(
                                                                            [this, &charge_lyt,
                                                                             &lyts_13](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1, lyts_13.get_charge_state(c1),
                                                                                    false);
                                                                            });
                                                                        lyts_14.foreach_cell(
                                                                            [this, &charge_lyt,
                                                                             &lyts_14](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1, lyts_14.get_charge_state(c1),
                                                                                    false);
                                                                            });
                                                                        lyts_15.foreach_cell(
                                                                            [this, &charge_lyt,
                                                                             &lyts_15](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1, lyts_15.get_charge_state(c1),
                                                                                    false);
                                                                            });
                                                                        lyts_16.foreach_cell(
                                                                            [this, &charge_lyt,
                                                                             &lyts_16](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1, lyts_16.get_charge_state(c1),
                                                                                    false);
                                                                            });
                                                                        charge_lyt.update_after_charge_change();
                                                                        if (charge_lyt.is_physically_valid())
                                                                        {
                                                                            if (charge_lyt.get_system_energy() <
                                                                                energy_threas)
                                                                            {
                                                                                std::vector<
                                                                                    charge_distribution_surface<Lyt>>
                                                                                    lyts{};
                                                                                std::cout
                                                                                    << charge_lyt.get_system_energy()
                                                                                    << std::endl;

                                                                                sidb_simulation_result<Lyt>
                                                                                    sim_result{};
                                                                                sim_result.algorithm_name = "ExGS";
                                                                                charge_distribution_surface<Lyt>
                                                                                    charge_lyt_copy{charge_lyt};
                                                                                lyts.emplace_back(charge_lyt_copy);
                                                                                sim_result.charge_distributions = lyts;
                                                                                energy_threas =
                                                                                    charge_lyt.get_system_energy();
                                                                                write_sqd_sim_result<Lyt>(
                                                                                    sim_result, "/Users/jandrewniok/"
                                                                                                "CLionProjects/"
                                                                                                "fiction_fork/"
                                                                                                "experiments/"
                                                                                                "result.xml");
                                                                            }
                                                                        }
                                                                        counter += 1;
                                                                        if (counter % 100000 == 0)
                                                                        {
                                                                            std::cout << counter << std::endl;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    void combining_all_22_test()
    {
        auto compareFunc =
            [](const charge_distribution_surface<Lyt>& lyt1, const charge_distribution_surface<Lyt>& lyt2)
        { return lyt1.get_system_energy() < lyt2.get_system_energy(); };

        std::cout << "combining starts: " << std::to_string(lyts_of_regions.size()) << std::endl;
        uint64_t counter_lyts = 1;
        for (const auto& lyts_region : lyts_of_regions)
        {
            counter_lyts *= lyts_region.size();
        }
        std::cout << "number enumerations: " << std::to_string(counter_lyts) << std::endl;

        auto lyt_one   = lyts_of_regions[0];
        auto lyt_two   = lyts_of_regions[1];
        auto lyt_three = lyts_of_regions[2];
        auto lyt_four  = lyts_of_regions[3];
        auto lyt_five  = lyts_of_regions[4];
        auto lyt_six   = lyts_of_regions[5];
        auto lyt_seven = lyts_of_regions[6];
        auto lyt_eight = lyts_of_regions[7];
        auto lyt_nine  = lyts_of_regions[8];
        auto lyt_ten   = lyts_of_regions[9];
        auto lyt_11    = lyts_of_regions[10];
        auto lyt_12    = lyts_of_regions[11];
        auto lyt_13    = lyts_of_regions[12];
        auto lyt_14    = lyts_of_regions[13];
        auto lyt_15    = lyts_of_regions[14];
        auto lyt_16    = lyts_of_regions[15];
        auto lyt_17    = lyts_of_regions[16];
        auto lyt_18    = lyts_of_regions[17];
        auto lyt_19    = lyts_of_regions[18];
        auto lyt_20    = lyts_of_regions[19];
        auto lyt_21    = lyts_of_regions[20];
        auto lyt_22    = lyts_of_regions[21];

        std::sort(lyt_one.begin(), lyt_one.end(), compareFunc);
        std::sort(lyt_two.begin(), lyt_two.end(), compareFunc);
        std::sort(lyt_three.begin(), lyt_three.end(), compareFunc);
        std::sort(lyt_four.begin(), lyt_four.end(), compareFunc);
        std::sort(lyt_five.begin(), lyt_five.end(), compareFunc);
        std::sort(lyt_six.begin(), lyt_six.end(), compareFunc);
        std::sort(lyt_seven.begin(), lyt_seven.end(), compareFunc);
        std::sort(lyt_eight.begin(), lyt_eight.end(), compareFunc);
        std::sort(lyt_nine.begin(), lyt_nine.end(), compareFunc);
        std::sort(lyt_ten.begin(), lyt_ten.end(), compareFunc);
        std::sort(lyt_11.begin(), lyt_11.end(), compareFunc);
        std::sort(lyt_12.begin(), lyt_12.end(), compareFunc);
        std::sort(lyt_13.begin(), lyt_13.end(), compareFunc);
        std::sort(lyt_14.begin(), lyt_14.end(), compareFunc);
        std::sort(lyt_15.begin(), lyt_15.end(), compareFunc);
        std::sort(lyt_16.begin(), lyt_16.end(), compareFunc);
        std::sort(lyt_17.begin(), lyt_17.end(), compareFunc);
        std::sort(lyt_18.begin(), lyt_18.end(), compareFunc);

        std::sort(lyt_19.begin(), lyt_19.end(), compareFunc);
        std::sort(lyt_20.begin(), lyt_20.end(), compareFunc);
        std::sort(lyt_21.begin(), lyt_21.end(), compareFunc);
        std::sort(lyt_22.begin(), lyt_22.end(), compareFunc);

        int                                           number = 5;
        std::vector<charge_distribution_surface<Lyt>> lyt_ones(
            lyt_one.begin(), lyt_one.begin() + std::min(number, static_cast<int>(lyt_one.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_twos(
            lyt_two.begin(), lyt_two.begin() + std::min(number, static_cast<int>(lyt_two.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_threes(
            lyt_three.begin(), lyt_three.begin() + std::min(number, static_cast<int>(lyt_three.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_fours(
            lyt_four.begin(), lyt_four.begin() + std::min(number, static_cast<int>(lyt_four.size())));

        std::vector<charge_distribution_surface<Lyt>> lyt_fives(
            lyt_five.begin(), lyt_five.begin() + std::min(number, static_cast<int>(lyt_five.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_sixs(
            lyt_six.begin(), lyt_six.begin() + std::min(number, static_cast<int>(lyt_six.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_sevens(
            lyt_seven.begin(), lyt_seven.begin() + std::min(number, static_cast<int>(lyt_seven.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_eights(
            lyt_eight.begin(), lyt_eight.begin() + std::min(number, static_cast<int>(lyt_eight.size())));

        std::vector<charge_distribution_surface<Lyt>> lyt_nines(
            lyt_nine.begin(), lyt_nine.begin() + std::min(number, static_cast<int>(lyt_nine.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_tens(
            lyt_ten.begin(), lyt_ten.begin() + std::min(number, static_cast<int>(lyt_ten.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_11s(
            lyt_11.begin(), lyt_11.begin() + std::min(number, static_cast<int>(lyt_11.size())));

        std::vector<charge_distribution_surface<Lyt>> lyt_12s(
            lyt_12.begin(), lyt_12.begin() + std::min(number, static_cast<int>(lyt_12.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_13s(
            lyt_13.begin(), lyt_13.begin() + std::min(number, static_cast<int>(lyt_13.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_14s(
            lyt_14.begin(), lyt_14.begin() + std::min(number, static_cast<int>(lyt_14.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_15s(
            lyt_15.begin(), lyt_15.begin() + std::min(number, static_cast<int>(lyt_15.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_16s(
            lyt_16.begin(), lyt_16.begin() + std::min(number, static_cast<int>(lyt_16.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_17s(
            lyt_17.begin(), lyt_17.begin() + std::min(number, static_cast<int>(lyt_17.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_18s(
            lyt_18.begin(), lyt_18.begin() + std::min(number, static_cast<int>(lyt_18.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_19s(
            lyt_19.begin(), lyt_19.begin() + std::min(number, static_cast<int>(lyt_19.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_20s(
            lyt_20.begin(), lyt_20.begin() + std::min(number, static_cast<int>(lyt_20.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_21s(
            lyt_21.begin(), lyt_21.begin() + std::min(number, static_cast<int>(lyt_21.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_22s(
            lyt_22.begin(), lyt_22.begin() + std::min(number, static_cast<int>(lyt_22.size())));

        charge_distribution_surface<Lyt> charge_lyt{layout};
        uint64_t                         counter = 0;
        std::vector<double>              valid_energies{};
        double                           energy_threas = 1000;
        for (auto i = 0u; i < lyt_one.size(); i++)
        {
            for (auto j = 0u; j < lyt_two.size(); j++)
            {
                for (auto three = 0u; three < lyt_three.size(); three++)
                {
                    for (auto four = 0u; four < lyt_four.size(); four++)
                    {
                        for (auto five = 0u; five < lyt_five.size(); five++)
                        {
                            for (const auto& lyts_six : lyt_six)
                            {
                                for (const auto& lyts_seven : lyt_seven)
                                {

                                    for (auto eight = 0u; eight < lyt_eight.size(); eight++)
                                    {

                                        for (auto nine = 0u; nine < lyt_nine.size(); nine++)
                                        {

                                            for (auto t = 0u; t < lyt_ten.size(); t++)
                                            {
                                                for (auto l = 0u; l < lyt_11.size(); l++)
                                                {
                                                    for (const auto& lyts_12 : lyt_12)
                                                    {

                                                        for (const auto& lyts_13 : lyt_13)
                                                        {

                                                            for (const auto& lyts_14 : lyt_14)
                                                            {
                                                                for (const auto& lyts_15 : lyt_15)
                                                                {
                                                                    for (const auto& lyts_16 : lyt_16)
                                                                    {
                                                                        for (const auto& lyts_17 : lyt_17)
                                                                        {
                                                                            for (const auto& lyts_18 : lyt_18)
                                                                            {
                                                                                for (const auto& lyts_19 : lyt_19)
                                                                                {
                                                                                    for (const auto& lyts_20 : lyt_20)
                                                                                    {
                                                                                        for (const auto& lyts_21 :
                                                                                             lyt_21)
                                                                                        {
                                                                                            for (const auto& lyts_22 :
                                                                                                 lyt_22)
                                                                                            {
                                                                                                lyt_one[i].foreach_cell(
                                                                                                    [this, &charge_lyt,
                                                                                                     &lyt_one,
                                                                                                     &i](const auto& c1)
                                                                                                    {
                                                                                                        charge_lyt.assign_charge_state(
                                                                                                            c1,
                                                                                                            lyt_one[i]
                                                                                                                .get_charge_state(
                                                                                                                    c1),
                                                                                                            false);
                                                                                                    });
                                                                                                lyt_two[j].foreach_cell(
                                                                                                    [this, &charge_lyt,
                                                                                                     &lyt_two,
                                                                                                     &j](const auto& c1)
                                                                                                    {
                                                                                                        charge_lyt.assign_charge_state(
                                                                                                            c1,
                                                                                                            lyt_two[j]
                                                                                                                .get_charge_state(
                                                                                                                    c1),
                                                                                                            false);
                                                                                                    });
                                                                                                lyt_three[three].foreach_cell(
                                                                                                    [this, &charge_lyt,
                                                                                                     &lyt_three,
                                                                                                     &three](
                                                                                                        const auto& c1)
                                                                                                    {
                                                                                                        charge_lyt.assign_charge_state(
                                                                                                            c1,
                                                                                                            lyt_three[three]
                                                                                                                .get_charge_state(
                                                                                                                    c1),
                                                                                                            false);
                                                                                                    });
                                                                                                lyt_four[four].foreach_cell(
                                                                                                    [this, &charge_lyt,
                                                                                                     &lyt_four, &four](
                                                                                                        const auto& c1)
                                                                                                    {
                                                                                                        charge_lyt.assign_charge_state(
                                                                                                            c1,
                                                                                                            lyt_four[four]
                                                                                                                .get_charge_state(
                                                                                                                    c1),
                                                                                                            false);
                                                                                                    });
                                                                                                lyt_five[five].foreach_cell(
                                                                                                    [this, &charge_lyt,
                                                                                                     &lyt_five, &five](
                                                                                                        const auto& c1)
                                                                                                    {
                                                                                                        charge_lyt.assign_charge_state(
                                                                                                            c1,
                                                                                                            lyt_five[five]
                                                                                                                .get_charge_state(
                                                                                                                    c1),
                                                                                                            false);
                                                                                                    });
                                                                                                lyts_six.foreach_cell(
                                                                                                    [this, &charge_lyt,
                                                                                                     &lyts_six](
                                                                                                        const auto& c1)
                                                                                                    {
                                                                                                        charge_lyt.assign_charge_state(
                                                                                                            c1,
                                                                                                            lyts_six
                                                                                                                .get_charge_state(
                                                                                                                    c1),
                                                                                                            false);
                                                                                                    });
                                                                                                lyts_seven.foreach_cell(
                                                                                                    [this, &charge_lyt,
                                                                                                     &lyts_seven](
                                                                                                        const auto& c1)
                                                                                                    {
                                                                                                        charge_lyt.assign_charge_state(
                                                                                                            c1,
                                                                                                            lyts_seven
                                                                                                                .get_charge_state(
                                                                                                                    c1),
                                                                                                            false);
                                                                                                    });
                                                                                                lyt_eight[eight].foreach_cell(
                                                                                                    [this, &charge_lyt,
                                                                                                     &lyt_eight,
                                                                                                     &eight](
                                                                                                        const auto& c1)
                                                                                                    {
                                                                                                        charge_lyt.assign_charge_state(
                                                                                                            c1,
                                                                                                            lyt_eight[eight]
                                                                                                                .get_charge_state(
                                                                                                                    c1),
                                                                                                            false);
                                                                                                    });
                                                                                                lyt_nine[nine].foreach_cell(
                                                                                                    [this, &charge_lyt,
                                                                                                     &lyt_nine, &nine](
                                                                                                        const auto& c1)
                                                                                                    {
                                                                                                        charge_lyt.assign_charge_state(
                                                                                                            c1,
                                                                                                            lyt_nine[nine]
                                                                                                                .get_charge_state(
                                                                                                                    c1),
                                                                                                            false);
                                                                                                    });
                                                                                                lyt_ten[t].foreach_cell(
                                                                                                    [this, &charge_lyt,
                                                                                                     &lyt_ten,
                                                                                                     &t](const auto& c1)
                                                                                                    {
                                                                                                        charge_lyt.assign_charge_state(
                                                                                                            c1,
                                                                                                            lyt_ten[t]
                                                                                                                .get_charge_state(
                                                                                                                    c1),
                                                                                                            false);
                                                                                                    });
                                                                                                lyt_11[l].foreach_cell(
                                                                                                    [this, &charge_lyt,
                                                                                                     &lyt_11,
                                                                                                     &l](const auto& c1)
                                                                                                    {
                                                                                                        charge_lyt.assign_charge_state(
                                                                                                            c1,
                                                                                                            lyt_11[l]
                                                                                                                .get_charge_state(
                                                                                                                    c1),
                                                                                                            false);
                                                                                                    });
                                                                                                lyts_12.foreach_cell(
                                                                                                    [this, &charge_lyt,
                                                                                                     &lyts_12](
                                                                                                        const auto& c1)
                                                                                                    {
                                                                                                        charge_lyt.assign_charge_state(
                                                                                                            c1,
                                                                                                            lyts_12
                                                                                                                .get_charge_state(
                                                                                                                    c1),
                                                                                                            false);
                                                                                                    });
                                                                                                lyts_13.foreach_cell(
                                                                                                    [this, &charge_lyt,
                                                                                                     &lyts_13](
                                                                                                        const auto& c1)
                                                                                                    {
                                                                                                        charge_lyt.assign_charge_state(
                                                                                                            c1,
                                                                                                            lyts_13
                                                                                                                .get_charge_state(
                                                                                                                    c1),
                                                                                                            false);
                                                                                                    });
                                                                                                lyts_14.foreach_cell(
                                                                                                    [this, &charge_lyt,
                                                                                                     &lyts_14](
                                                                                                        const auto& c1)
                                                                                                    {
                                                                                                        charge_lyt.assign_charge_state(
                                                                                                            c1,
                                                                                                            lyts_14
                                                                                                                .get_charge_state(
                                                                                                                    c1),
                                                                                                            false);
                                                                                                    });
                                                                                                lyts_15.foreach_cell(
                                                                                                    [this, &charge_lyt,
                                                                                                     &lyts_15](
                                                                                                        const auto& c1)
                                                                                                    {
                                                                                                        charge_lyt.assign_charge_state(
                                                                                                            c1,
                                                                                                            lyts_15
                                                                                                                .get_charge_state(
                                                                                                                    c1),
                                                                                                            false);
                                                                                                    });
                                                                                                lyts_16.foreach_cell(
                                                                                                    [this, &charge_lyt,
                                                                                                     &lyts_16](
                                                                                                        const auto& c1)
                                                                                                    {
                                                                                                        charge_lyt.assign_charge_state(
                                                                                                            c1,
                                                                                                            lyts_16
                                                                                                                .get_charge_state(
                                                                                                                    c1),
                                                                                                            false);
                                                                                                    });
                                                                                                lyts_17.foreach_cell(
                                                                                                    [this, &charge_lyt,
                                                                                                     &lyts_17](
                                                                                                        const auto& c1)
                                                                                                    {
                                                                                                        charge_lyt.assign_charge_state(
                                                                                                            c1,
                                                                                                            lyts_17
                                                                                                                .get_charge_state(
                                                                                                                    c1),
                                                                                                            false);
                                                                                                    });
                                                                                                lyts_18.foreach_cell(
                                                                                                    [this, &charge_lyt,
                                                                                                     &lyts_18](
                                                                                                        const auto& c1)
                                                                                                    {
                                                                                                        charge_lyt.assign_charge_state(
                                                                                                            c1,
                                                                                                            lyts_18
                                                                                                                .get_charge_state(
                                                                                                                    c1),
                                                                                                            false);
                                                                                                    });
                                                                                                lyts_19.foreach_cell(
                                                                                                    [this, &charge_lyt,
                                                                                                     &lyts_19](
                                                                                                        const auto& c1)
                                                                                                    {
                                                                                                        charge_lyt.assign_charge_state(
                                                                                                            c1,
                                                                                                            lyts_19
                                                                                                                .get_charge_state(
                                                                                                                    c1),
                                                                                                            false);
                                                                                                    });
                                                                                                lyts_20.foreach_cell(
                                                                                                    [this, &charge_lyt,
                                                                                                     &lyts_20](
                                                                                                        const auto& c1)
                                                                                                    {
                                                                                                        charge_lyt.assign_charge_state(
                                                                                                            c1,
                                                                                                            lyts_20
                                                                                                                .get_charge_state(
                                                                                                                    c1),
                                                                                                            false);
                                                                                                    });
                                                                                                lyts_21.foreach_cell(
                                                                                                    [this, &charge_lyt,
                                                                                                     &lyts_21](
                                                                                                        const auto& c1)
                                                                                                    {
                                                                                                        charge_lyt.assign_charge_state(
                                                                                                            c1,
                                                                                                            lyts_21
                                                                                                                .get_charge_state(
                                                                                                                    c1),
                                                                                                            false);
                                                                                                    });
                                                                                                lyts_22.foreach_cell(
                                                                                                    [this, &charge_lyt,
                                                                                                     &lyts_22](
                                                                                                        const auto& c1)
                                                                                                    {
                                                                                                        charge_lyt.assign_charge_state(
                                                                                                            c1,
                                                                                                            lyts_22
                                                                                                                .get_charge_state(
                                                                                                                    c1),
                                                                                                            false);
                                                                                                    });
                                                                                                charge_lyt
                                                                                                    .update_after_charge_change();
                                                                                                if (charge_lyt
                                                                                                        .is_physically_valid())
                                                                                                {
                                                                                                    if (charge_lyt
                                                                                                            .get_system_energy() <
                                                                                                        energy_threas)
                                                                                                    {
                                                                                                        std::vector<
                                                                                                            charge_distribution_surface<
                                                                                                                Lyt>>
                                                                                                            lyts{};
                                                                                                        std::cout
                                                                                                            << charge_lyt
                                                                                                                   .get_system_energy()
                                                                                                            << std::
                                                                                                                   endl;

                                                                                                        sidb_simulation_result<
                                                                                                            Lyt>
                                                                                                            sim_result{};
                                                                                                        sim_result
                                                                                                            .algorithm_name =
                                                                                                            "ExGS";
                                                                                                        charge_distribution_surface<
                                                                                                            Lyt>
                                                                                                            charge_lyt_copy{
                                                                                                                charge_lyt};
                                                                                                        lyts.emplace_back(
                                                                                                            charge_lyt_copy);
                                                                                                        sim_result
                                                                                                            .charge_distributions =
                                                                                                            lyts;
                                                                                                        energy_threas =
                                                                                                            charge_lyt
                                                                                                                .get_system_energy();
                                                                                                        write_sqd_sim_result<
                                                                                                            Lyt>(
                                                                                                            sim_result,
                                                                                                            "/Users"
                                                                                                            "/"
                                                                                                            "jandre"
                                                                                                            "wnio"
                                                                                                            "k/"
                                                                                                            "CLionP"
                                                                                                            "roje"
                                                                                                            "cts/"
                                                                                                            "fictio"
                                                                                                            "n_"
                                                                                                            "fork/"
                                                                                                            "experi"
                                                                                                            "ment"
                                                                                                            "s/"
                                                                                                            "result"
                                                                                                            "."
                                                                                                            "xml");
                                                                                                    }
                                                                                                }
                                                                                                counter += 1;
                                                                                                if (counter % 100000 ==
                                                                                                    0)
                                                                                                {
                                                                                                    std::cout
                                                                                                        << counter
                                                                                                        << std::endl;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    void combining_all_20_test()
    {
        auto compareFunc =
            [](const charge_distribution_surface<Lyt>& lyt1, const charge_distribution_surface<Lyt>& lyt2)
        { return lyt1.get_system_energy() < lyt2.get_system_energy(); };

        std::cout << "combining starts: " << std::to_string(lyts_of_regions.size()) << std::endl;
        uint64_t counter_lyts = 1;
        for (const auto& lyts_region : lyts_of_regions)
        {
            counter_lyts *= lyts_region.size();
        }
        std::cout << "number enumerations: " << std::to_string(counter_lyts) << std::endl;

        auto lyt_one   = lyts_of_regions[0];
        auto lyt_two   = lyts_of_regions[1];
        auto lyt_three = lyts_of_regions[2];
        auto lyt_four  = lyts_of_regions[3];
        auto lyt_five  = lyts_of_regions[4];
        auto lyt_six   = lyts_of_regions[5];
        auto lyt_seven = lyts_of_regions[6];
        auto lyt_eight = lyts_of_regions[7];
        auto lyt_nine  = lyts_of_regions[8];
        auto lyt_ten   = lyts_of_regions[9];
        auto lyt_11    = lyts_of_regions[10];
        auto lyt_12    = lyts_of_regions[11];
        auto lyt_13    = lyts_of_regions[12];
        auto lyt_14    = lyts_of_regions[13];
        auto lyt_15    = lyts_of_regions[14];
        auto lyt_16    = lyts_of_regions[15];
        auto lyt_17    = lyts_of_regions[16];
        auto lyt_18    = lyts_of_regions[17];
        auto lyt_19    = lyts_of_regions[18];
        auto lyt_20    = lyts_of_regions[19];

        std::sort(lyt_one.begin(), lyt_one.end(), compareFunc);
        std::sort(lyt_two.begin(), lyt_two.end(), compareFunc);
        std::sort(lyt_three.begin(), lyt_three.end(), compareFunc);
        std::sort(lyt_four.begin(), lyt_four.end(), compareFunc);
        std::sort(lyt_five.begin(), lyt_five.end(), compareFunc);
        std::sort(lyt_six.begin(), lyt_six.end(), compareFunc);
        std::sort(lyt_seven.begin(), lyt_seven.end(), compareFunc);
        std::sort(lyt_eight.begin(), lyt_eight.end(), compareFunc);
        std::sort(lyt_nine.begin(), lyt_nine.end(), compareFunc);
        std::sort(lyt_ten.begin(), lyt_ten.end(), compareFunc);
        std::sort(lyt_11.begin(), lyt_11.end(), compareFunc);
        std::sort(lyt_12.begin(), lyt_12.end(), compareFunc);
        std::sort(lyt_13.begin(), lyt_13.end(), compareFunc);
        std::sort(lyt_14.begin(), lyt_14.end(), compareFunc);
        std::sort(lyt_15.begin(), lyt_15.end(), compareFunc);
        std::sort(lyt_16.begin(), lyt_16.end(), compareFunc);
        std::sort(lyt_17.begin(), lyt_17.end(), compareFunc);
        std::sort(lyt_18.begin(), lyt_18.end(), compareFunc);

        std::sort(lyt_19.begin(), lyt_19.end(), compareFunc);
        std::sort(lyt_20.begin(), lyt_20.end(), compareFunc);

        int                                           number = 5;
        std::vector<charge_distribution_surface<Lyt>> lyt_ones(
            lyt_one.begin(), lyt_one.begin() + std::min(number, static_cast<int>(lyt_one.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_twos(
            lyt_two.begin(), lyt_two.begin() + std::min(number, static_cast<int>(lyt_two.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_threes(
            lyt_three.begin(), lyt_three.begin() + std::min(number, static_cast<int>(lyt_three.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_fours(
            lyt_four.begin(), lyt_four.begin() + std::min(number, static_cast<int>(lyt_four.size())));

        std::vector<charge_distribution_surface<Lyt>> lyt_fives(
            lyt_five.begin(), lyt_five.begin() + std::min(number, static_cast<int>(lyt_five.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_sixs(
            lyt_six.begin(), lyt_six.begin() + std::min(number, static_cast<int>(lyt_six.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_sevens(
            lyt_seven.begin(), lyt_seven.begin() + std::min(number, static_cast<int>(lyt_seven.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_eights(
            lyt_eight.begin(), lyt_eight.begin() + std::min(number, static_cast<int>(lyt_eight.size())));

        std::vector<charge_distribution_surface<Lyt>> lyt_nines(
            lyt_nine.begin(), lyt_nine.begin() + std::min(number, static_cast<int>(lyt_nine.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_tens(
            lyt_ten.begin(), lyt_ten.begin() + std::min(number, static_cast<int>(lyt_ten.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_11s(
            lyt_11.begin(), lyt_11.begin() + std::min(number, static_cast<int>(lyt_11.size())));

        std::vector<charge_distribution_surface<Lyt>> lyt_12s(
            lyt_12.begin(), lyt_12.begin() + std::min(number, static_cast<int>(lyt_12.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_13s(
            lyt_13.begin(), lyt_13.begin() + std::min(number, static_cast<int>(lyt_13.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_14s(
            lyt_14.begin(), lyt_14.begin() + std::min(number, static_cast<int>(lyt_14.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_15s(
            lyt_15.begin(), lyt_15.begin() + std::min(number, static_cast<int>(lyt_15.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_16s(
            lyt_16.begin(), lyt_16.begin() + std::min(number, static_cast<int>(lyt_16.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_17s(
            lyt_17.begin(), lyt_17.begin() + std::min(number, static_cast<int>(lyt_17.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_18s(
            lyt_18.begin(), lyt_18.begin() + std::min(number, static_cast<int>(lyt_18.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_19s(
            lyt_19.begin(), lyt_19.begin() + std::min(number, static_cast<int>(lyt_19.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_20s(
            lyt_20.begin(), lyt_20.begin() + std::min(number, static_cast<int>(lyt_20.size())));

        charge_distribution_surface<Lyt> charge_lyt{layout};
        uint64_t                         counter = 0;
        std::vector<double>              valid_energies{};
        double                           energy_threas = 1000;
        for (auto i = 0u; i < lyt_one.size(); i++)
        {
            for (auto j = 0u; j < lyt_two.size(); j++)
            {
                for (auto three = 0u; three < lyt_three.size(); three++)
                {
                    for (auto four = 0u; four < lyt_four.size(); four++)
                    {
                        for (auto five = 0u; five < lyt_five.size(); five++)
                        {
                            for (const auto& lyts_six : lyt_six)
                            {
                                for (const auto& lyts_seven : lyt_seven)
                                {

                                    for (auto eight = 0u; eight < lyt_eight.size(); eight++)
                                    {

                                        for (auto nine = 0u; nine < lyt_nine.size(); nine++)
                                        {

                                            for (auto t = 0u; t < lyt_ten.size(); t++)
                                            {
                                                for (auto l = 0u; l < lyt_11.size(); l++)
                                                {
                                                    for (const auto& lyts_12 : lyt_12)
                                                    {

                                                        for (const auto& lyts_13 : lyt_13)
                                                        {

                                                            for (const auto& lyts_14 : lyt_14)
                                                            {
                                                                for (const auto& lyts_15 : lyt_15)
                                                                {
                                                                    for (const auto& lyts_16 : lyt_16)
                                                                    {
                                                                        for (const auto& lyts_17 : lyt_17)
                                                                        {
                                                                            for (const auto& lyts_18 : lyt_18)
                                                                            {
                                                                                for (const auto& lyts_19 : lyt_19)
                                                                                {
                                                                                    for (const auto& lyts_20 : lyt_20)
                                                                                    {
                                                                                        lyt_one[i].foreach_cell(
                                                                                            [this, &charge_lyt,
                                                                                             &lyt_one,
                                                                                             &i](const auto& c1) {
                                                                                                charge_lyt
                                                                                                    .assign_charge_state(
                                                                                                        c1,
                                                                                                        lyt_one[i]
                                                                                                            .get_charge_state(
                                                                                                                c1),
                                                                                                        false);
                                                                                            });
                                                                                        lyt_two[j].foreach_cell(
                                                                                            [this, &charge_lyt,
                                                                                             &lyt_two,
                                                                                             &j](const auto& c1) {
                                                                                                charge_lyt
                                                                                                    .assign_charge_state(
                                                                                                        c1,
                                                                                                        lyt_two[j]
                                                                                                            .get_charge_state(
                                                                                                                c1),
                                                                                                        false);
                                                                                            });
                                                                                        lyt_three[three].foreach_cell(
                                                                                            [this, &charge_lyt,
                                                                                             &lyt_three,
                                                                                             &three](const auto& c1) {
                                                                                                charge_lyt
                                                                                                    .assign_charge_state(
                                                                                                        c1,
                                                                                                        lyt_three[three]
                                                                                                            .get_charge_state(
                                                                                                                c1),
                                                                                                        false);
                                                                                            });
                                                                                        lyt_four[four].foreach_cell(
                                                                                            [this, &charge_lyt,
                                                                                             &lyt_four,
                                                                                             &four](const auto& c1) {
                                                                                                charge_lyt
                                                                                                    .assign_charge_state(
                                                                                                        c1,
                                                                                                        lyt_four[four]
                                                                                                            .get_charge_state(
                                                                                                                c1),
                                                                                                        false);
                                                                                            });
                                                                                        lyt_five[five].foreach_cell(
                                                                                            [this, &charge_lyt,
                                                                                             &lyt_five,
                                                                                             &five](const auto& c1) {
                                                                                                charge_lyt
                                                                                                    .assign_charge_state(
                                                                                                        c1,
                                                                                                        lyt_five[five]
                                                                                                            .get_charge_state(
                                                                                                                c1),
                                                                                                        false);
                                                                                            });
                                                                                        lyts_six.foreach_cell(
                                                                                            [this, &charge_lyt,
                                                                                             &lyts_six](const auto& c1)
                                                                                            {
                                                                                                charge_lyt
                                                                                                    .assign_charge_state(
                                                                                                        c1,
                                                                                                        lyts_six
                                                                                                            .get_charge_state(
                                                                                                                c1),
                                                                                                        false);
                                                                                            });
                                                                                        lyts_seven.foreach_cell(
                                                                                            [this, &charge_lyt,
                                                                                             &lyts_seven](
                                                                                                const auto& c1) {
                                                                                                charge_lyt
                                                                                                    .assign_charge_state(
                                                                                                        c1,
                                                                                                        lyts_seven
                                                                                                            .get_charge_state(
                                                                                                                c1),
                                                                                                        false);
                                                                                            });
                                                                                        lyt_eight[eight].foreach_cell(
                                                                                            [this, &charge_lyt,
                                                                                             &lyt_eight,
                                                                                             &eight](const auto& c1) {
                                                                                                charge_lyt
                                                                                                    .assign_charge_state(
                                                                                                        c1,
                                                                                                        lyt_eight[eight]
                                                                                                            .get_charge_state(
                                                                                                                c1),
                                                                                                        false);
                                                                                            });
                                                                                        lyt_nine[nine].foreach_cell(
                                                                                            [this, &charge_lyt,
                                                                                             &lyt_nine,
                                                                                             &nine](const auto& c1) {
                                                                                                charge_lyt
                                                                                                    .assign_charge_state(
                                                                                                        c1,
                                                                                                        lyt_nine[nine]
                                                                                                            .get_charge_state(
                                                                                                                c1),
                                                                                                        false);
                                                                                            });
                                                                                        lyt_ten[t].foreach_cell(
                                                                                            [this, &charge_lyt,
                                                                                             &lyt_ten,
                                                                                             &t](const auto& c1) {
                                                                                                charge_lyt
                                                                                                    .assign_charge_state(
                                                                                                        c1,
                                                                                                        lyt_ten[t]
                                                                                                            .get_charge_state(
                                                                                                                c1),
                                                                                                        false);
                                                                                            });
                                                                                        lyt_11[l].foreach_cell(
                                                                                            [this, &charge_lyt, &lyt_11,
                                                                                             &l](const auto& c1) {
                                                                                                charge_lyt
                                                                                                    .assign_charge_state(
                                                                                                        c1,
                                                                                                        lyt_11[l]
                                                                                                            .get_charge_state(
                                                                                                                c1),
                                                                                                        false);
                                                                                            });
                                                                                        lyts_12.foreach_cell(
                                                                                            [this, &charge_lyt,
                                                                                             &lyts_12](const auto& c1) {
                                                                                                charge_lyt
                                                                                                    .assign_charge_state(
                                                                                                        c1,
                                                                                                        lyts_12
                                                                                                            .get_charge_state(
                                                                                                                c1),
                                                                                                        false);
                                                                                            });
                                                                                        lyts_13.foreach_cell(
                                                                                            [this, &charge_lyt,
                                                                                             &lyts_13](const auto& c1) {
                                                                                                charge_lyt
                                                                                                    .assign_charge_state(
                                                                                                        c1,
                                                                                                        lyts_13
                                                                                                            .get_charge_state(
                                                                                                                c1),
                                                                                                        false);
                                                                                            });
                                                                                        lyts_14.foreach_cell(
                                                                                            [this, &charge_lyt,
                                                                                             &lyts_14](const auto& c1) {
                                                                                                charge_lyt
                                                                                                    .assign_charge_state(
                                                                                                        c1,
                                                                                                        lyts_14
                                                                                                            .get_charge_state(
                                                                                                                c1),
                                                                                                        false);
                                                                                            });
                                                                                        lyts_15.foreach_cell(
                                                                                            [this, &charge_lyt,
                                                                                             &lyts_15](const auto& c1) {
                                                                                                charge_lyt
                                                                                                    .assign_charge_state(
                                                                                                        c1,
                                                                                                        lyts_15
                                                                                                            .get_charge_state(
                                                                                                                c1),
                                                                                                        false);
                                                                                            });
                                                                                        lyts_16.foreach_cell(
                                                                                            [this, &charge_lyt,
                                                                                             &lyts_16](const auto& c1) {
                                                                                                charge_lyt
                                                                                                    .assign_charge_state(
                                                                                                        c1,
                                                                                                        lyts_16
                                                                                                            .get_charge_state(
                                                                                                                c1),
                                                                                                        false);
                                                                                            });
                                                                                        lyts_17.foreach_cell(
                                                                                            [this, &charge_lyt,
                                                                                             &lyts_17](const auto& c1) {
                                                                                                charge_lyt
                                                                                                    .assign_charge_state(
                                                                                                        c1,
                                                                                                        lyts_17
                                                                                                            .get_charge_state(
                                                                                                                c1),
                                                                                                        false);
                                                                                            });
                                                                                        lyts_18.foreach_cell(
                                                                                            [this, &charge_lyt,
                                                                                             &lyts_18](const auto& c1) {
                                                                                                charge_lyt
                                                                                                    .assign_charge_state(
                                                                                                        c1,
                                                                                                        lyts_18
                                                                                                            .get_charge_state(
                                                                                                                c1),
                                                                                                        false);
                                                                                            });
                                                                                        lyts_19.foreach_cell(
                                                                                            [this, &charge_lyt,
                                                                                             &lyts_19](const auto& c1) {
                                                                                                charge_lyt
                                                                                                    .assign_charge_state(
                                                                                                        c1,
                                                                                                        lyts_19
                                                                                                            .get_charge_state(
                                                                                                                c1),
                                                                                                        false);
                                                                                            });
                                                                                        lyts_20.foreach_cell(
                                                                                            [this, &charge_lyt,
                                                                                             &lyts_20](const auto& c1) {
                                                                                                charge_lyt
                                                                                                    .assign_charge_state(
                                                                                                        c1,
                                                                                                        lyts_20
                                                                                                            .get_charge_state(
                                                                                                                c1),
                                                                                                        false);
                                                                                            });
                                                                                        charge_lyt
                                                                                            .update_after_charge_change();
                                                                                        if (charge_lyt
                                                                                                .is_physically_valid())
                                                                                        {
                                                                                            if (charge_lyt
                                                                                                    .get_system_energy() <
                                                                                                energy_threas)
                                                                                            {
                                                                                                std::vector<
                                                                                                    charge_distribution_surface<
                                                                                                        Lyt>>
                                                                                                    lyts{};
                                                                                                std::cout
                                                                                                    << charge_lyt
                                                                                                           .get_system_energy()
                                                                                                    << std::endl;

                                                                                                sidb_simulation_result<
                                                                                                    Lyt>
                                                                                                    sim_result{};
                                                                                                sim_result
                                                                                                    .algorithm_name =
                                                                                                    "ExGS";
                                                                                                charge_distribution_surface<
                                                                                                    Lyt>
                                                                                                    charge_lyt_copy{
                                                                                                        charge_lyt};
                                                                                                lyts.emplace_back(
                                                                                                    charge_lyt_copy);
                                                                                                sim_result
                                                                                                    .charge_distributions =
                                                                                                    lyts;
                                                                                                energy_threas =
                                                                                                    charge_lyt
                                                                                                        .get_system_energy();
                                                                                                write_sqd_sim_result<
                                                                                                    Lyt>(
                                                                                                    sim_result,
                                                                                                    "/Users/"
                                                                                                    "jandrewniok/"
                                                                                                    "CLionProjects/"
                                                                                                    "fiction_fork/"
                                                                                                    "experiments/"
                                                                                                    "result.xml");
                                                                                            }
                                                                                        }
                                                                                        counter += 1;
                                                                                        if (counter % 100000 == 0)
                                                                                        {
                                                                                            std::cout << counter
                                                                                                      << std::endl;
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    void combining_all_21_test()
    {
        auto compareFunc =
            [](const charge_distribution_surface<Lyt>& lyt1, const charge_distribution_surface<Lyt>& lyt2)
        { return lyt1.get_system_energy() < lyt2.get_system_energy(); };

        std::cout << "combining starts: " << std::to_string(lyts_of_regions.size()) << std::endl;
        uint64_t counter_lyts = 1;
        for (const auto& lyts_region : lyts_of_regions)
        {
            counter_lyts *= lyts_region.size();
        }
        std::cout << "number enumerations: " << std::to_string(counter_lyts) << std::endl;

        auto lyt_one   = lyts_of_regions[0];
        auto lyt_two   = lyts_of_regions[1];
        auto lyt_three = lyts_of_regions[2];
        auto lyt_four  = lyts_of_regions[3];
        auto lyt_five  = lyts_of_regions[4];
        auto lyt_six   = lyts_of_regions[5];
        auto lyt_seven = lyts_of_regions[6];
        auto lyt_eight = lyts_of_regions[7];
        auto lyt_nine  = lyts_of_regions[8];
        auto lyt_ten   = lyts_of_regions[9];
        auto lyt_11    = lyts_of_regions[10];
        auto lyt_12    = lyts_of_regions[11];
        auto lyt_13    = lyts_of_regions[12];
        auto lyt_14    = lyts_of_regions[13];
        auto lyt_15    = lyts_of_regions[14];
        auto lyt_16    = lyts_of_regions[15];
        auto lyt_17    = lyts_of_regions[16];
        auto lyt_18    = lyts_of_regions[17];
        auto lyt_19    = lyts_of_regions[18];
        auto lyt_20    = lyts_of_regions[19];
        auto lyt_21    = lyts_of_regions[20];

        std::sort(lyt_one.begin(), lyt_one.end(), compareFunc);
        std::sort(lyt_two.begin(), lyt_two.end(), compareFunc);
        std::sort(lyt_three.begin(), lyt_three.end(), compareFunc);
        std::sort(lyt_four.begin(), lyt_four.end(), compareFunc);
        std::sort(lyt_five.begin(), lyt_five.end(), compareFunc);
        std::sort(lyt_six.begin(), lyt_six.end(), compareFunc);
        std::sort(lyt_seven.begin(), lyt_seven.end(), compareFunc);
        std::sort(lyt_eight.begin(), lyt_eight.end(), compareFunc);
        std::sort(lyt_nine.begin(), lyt_nine.end(), compareFunc);
        std::sort(lyt_ten.begin(), lyt_ten.end(), compareFunc);
        std::sort(lyt_11.begin(), lyt_11.end(), compareFunc);
        std::sort(lyt_12.begin(), lyt_12.end(), compareFunc);
        std::sort(lyt_13.begin(), lyt_13.end(), compareFunc);
        std::sort(lyt_14.begin(), lyt_14.end(), compareFunc);
        std::sort(lyt_15.begin(), lyt_15.end(), compareFunc);
        std::sort(lyt_16.begin(), lyt_16.end(), compareFunc);
        std::sort(lyt_17.begin(), lyt_17.end(), compareFunc);
        std::sort(lyt_18.begin(), lyt_18.end(), compareFunc);

        std::sort(lyt_19.begin(), lyt_19.end(), compareFunc);
        std::sort(lyt_20.begin(), lyt_20.end(), compareFunc);
        std::sort(lyt_21.begin(), lyt_21.end(), compareFunc);

        int                                           number = 5;
        std::vector<charge_distribution_surface<Lyt>> lyt_ones(
            lyt_one.begin(), lyt_one.begin() + std::min(number, static_cast<int>(lyt_one.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_twos(
            lyt_two.begin(), lyt_two.begin() + std::min(number, static_cast<int>(lyt_two.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_threes(
            lyt_three.begin(), lyt_three.begin() + std::min(number, static_cast<int>(lyt_three.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_fours(
            lyt_four.begin(), lyt_four.begin() + std::min(number, static_cast<int>(lyt_four.size())));

        std::vector<charge_distribution_surface<Lyt>> lyt_fives(
            lyt_five.begin(), lyt_five.begin() + std::min(number, static_cast<int>(lyt_five.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_sixs(
            lyt_six.begin(), lyt_six.begin() + std::min(number, static_cast<int>(lyt_six.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_sevens(
            lyt_seven.begin(), lyt_seven.begin() + std::min(number, static_cast<int>(lyt_seven.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_eights(
            lyt_eight.begin(), lyt_eight.begin() + std::min(number, static_cast<int>(lyt_eight.size())));

        std::vector<charge_distribution_surface<Lyt>> lyt_nines(
            lyt_nine.begin(), lyt_nine.begin() + std::min(number, static_cast<int>(lyt_nine.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_tens(
            lyt_ten.begin(), lyt_ten.begin() + std::min(number, static_cast<int>(lyt_ten.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_11s(
            lyt_11.begin(), lyt_11.begin() + std::min(number, static_cast<int>(lyt_11.size())));

        std::vector<charge_distribution_surface<Lyt>> lyt_12s(
            lyt_12.begin(), lyt_12.begin() + std::min(number, static_cast<int>(lyt_12.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_13s(
            lyt_13.begin(), lyt_13.begin() + std::min(number, static_cast<int>(lyt_13.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_14s(
            lyt_14.begin(), lyt_14.begin() + std::min(number, static_cast<int>(lyt_14.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_15s(
            lyt_15.begin(), lyt_15.begin() + std::min(number, static_cast<int>(lyt_15.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_16s(
            lyt_16.begin(), lyt_16.begin() + std::min(number, static_cast<int>(lyt_16.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_17s(
            lyt_17.begin(), lyt_17.begin() + std::min(number, static_cast<int>(lyt_17.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_18s(
            lyt_18.begin(), lyt_18.begin() + std::min(number, static_cast<int>(lyt_18.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_19s(
            lyt_19.begin(), lyt_19.begin() + std::min(number, static_cast<int>(lyt_19.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_20s(
            lyt_20.begin(), lyt_20.begin() + std::min(number, static_cast<int>(lyt_20.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_21s(
            lyt_21.begin(), lyt_21.begin() + std::min(number, static_cast<int>(lyt_21.size())));

        charge_distribution_surface<Lyt> charge_lyt{layout};
        uint64_t                         counter = 0;
        std::vector<double>              valid_energies{};
        double                           energy_threas = 1000;
        for (auto i = 0u; i < lyt_one.size(); i++)
        {
            for (auto j = 0u; j < lyt_two.size(); j++)
            {
                for (auto three = 0u; three < lyt_three.size(); three++)
                {
                    for (auto four = 0u; four < lyt_four.size(); four++)
                    {
                        for (auto five = 0u; five < lyt_five.size(); five++)
                        {
                            for (const auto& lyts_six : lyt_six)
                            {
                                for (const auto& lyts_seven : lyt_seven)
                                {

                                    for (auto eight = 0u; eight < lyt_eight.size(); eight++)
                                    {

                                        for (auto nine = 0u; nine < lyt_nine.size(); nine++)
                                        {

                                            for (auto t = 0u; t < lyt_ten.size(); t++)
                                            {
                                                for (auto l = 0u; l < lyt_11.size(); l++)
                                                {
                                                    for (const auto& lyts_12 : lyt_12)
                                                    {

                                                        for (const auto& lyts_13 : lyt_13)
                                                        {

                                                            for (const auto& lyts_14 : lyt_14)
                                                            {
                                                                for (const auto& lyts_15 : lyt_15)
                                                                {
                                                                    for (const auto& lyts_16 : lyt_16)
                                                                    {
                                                                        for (const auto& lyts_17 : lyt_17)
                                                                        {
                                                                            for (const auto& lyts_18 : lyt_18)
                                                                            {
                                                                                for (const auto& lyts_19 : lyt_19)
                                                                                {
                                                                                    for (const auto& lyts_20 : lyt_20)
                                                                                    {
                                                                                        for (const auto& lyts_21 :
                                                                                             lyt_21)
                                                                                        {
                                                                                            lyt_one[i].foreach_cell(
                                                                                                [this, &charge_lyt,
                                                                                                 &lyt_one,
                                                                                                 &i](const auto& c1) {
                                                                                                    charge_lyt
                                                                                                        .assign_charge_state(
                                                                                                            c1,
                                                                                                            lyt_one[i]
                                                                                                                .get_charge_state(
                                                                                                                    c1),
                                                                                                            false);
                                                                                                });
                                                                                            lyt_two[j].foreach_cell(
                                                                                                [this, &charge_lyt,
                                                                                                 &lyt_two,
                                                                                                 &j](const auto& c1) {
                                                                                                    charge_lyt
                                                                                                        .assign_charge_state(
                                                                                                            c1,
                                                                                                            lyt_two[j]
                                                                                                                .get_charge_state(
                                                                                                                    c1),
                                                                                                            false);
                                                                                                });
                                                                                            lyt_three[three].foreach_cell(
                                                                                                [this, &charge_lyt,
                                                                                                 &lyt_three, &three](
                                                                                                    const auto& c1) {
                                                                                                    charge_lyt.assign_charge_state(
                                                                                                        c1,
                                                                                                        lyt_three[three]
                                                                                                            .get_charge_state(
                                                                                                                c1),
                                                                                                        false);
                                                                                                });
                                                                                            lyt_four[four].foreach_cell(
                                                                                                [this, &charge_lyt,
                                                                                                 &lyt_four, &four](
                                                                                                    const auto& c1) {
                                                                                                    charge_lyt
                                                                                                        .assign_charge_state(
                                                                                                            c1,
                                                                                                            lyt_four[four]
                                                                                                                .get_charge_state(
                                                                                                                    c1),
                                                                                                            false);
                                                                                                });
                                                                                            lyt_five[five].foreach_cell(
                                                                                                [this, &charge_lyt,
                                                                                                 &lyt_five, &five](
                                                                                                    const auto& c1) {
                                                                                                    charge_lyt
                                                                                                        .assign_charge_state(
                                                                                                            c1,
                                                                                                            lyt_five[five]
                                                                                                                .get_charge_state(
                                                                                                                    c1),
                                                                                                            false);
                                                                                                });
                                                                                            lyts_six.foreach_cell(
                                                                                                [this, &charge_lyt,
                                                                                                 &lyts_six](
                                                                                                    const auto& c1) {
                                                                                                    charge_lyt
                                                                                                        .assign_charge_state(
                                                                                                            c1,
                                                                                                            lyts_six
                                                                                                                .get_charge_state(
                                                                                                                    c1),
                                                                                                            false);
                                                                                                });
                                                                                            lyts_seven.foreach_cell(
                                                                                                [this, &charge_lyt,
                                                                                                 &lyts_seven](
                                                                                                    const auto& c1) {
                                                                                                    charge_lyt
                                                                                                        .assign_charge_state(
                                                                                                            c1,
                                                                                                            lyts_seven
                                                                                                                .get_charge_state(
                                                                                                                    c1),
                                                                                                            false);
                                                                                                });
                                                                                            lyt_eight[eight].foreach_cell(
                                                                                                [this, &charge_lyt,
                                                                                                 &lyt_eight, &eight](
                                                                                                    const auto& c1) {
                                                                                                    charge_lyt.assign_charge_state(
                                                                                                        c1,
                                                                                                        lyt_eight[eight]
                                                                                                            .get_charge_state(
                                                                                                                c1),
                                                                                                        false);
                                                                                                });
                                                                                            lyt_nine[nine].foreach_cell(
                                                                                                [this, &charge_lyt,
                                                                                                 &lyt_nine, &nine](
                                                                                                    const auto& c1) {
                                                                                                    charge_lyt
                                                                                                        .assign_charge_state(
                                                                                                            c1,
                                                                                                            lyt_nine[nine]
                                                                                                                .get_charge_state(
                                                                                                                    c1),
                                                                                                            false);
                                                                                                });
                                                                                            lyt_ten[t].foreach_cell(
                                                                                                [this, &charge_lyt,
                                                                                                 &lyt_ten,
                                                                                                 &t](const auto& c1) {
                                                                                                    charge_lyt
                                                                                                        .assign_charge_state(
                                                                                                            c1,
                                                                                                            lyt_ten[t]
                                                                                                                .get_charge_state(
                                                                                                                    c1),
                                                                                                            false);
                                                                                                });
                                                                                            lyt_11[l].foreach_cell(
                                                                                                [this, &charge_lyt,
                                                                                                 &lyt_11,
                                                                                                 &l](const auto& c1) {
                                                                                                    charge_lyt
                                                                                                        .assign_charge_state(
                                                                                                            c1,
                                                                                                            lyt_11[l]
                                                                                                                .get_charge_state(
                                                                                                                    c1),
                                                                                                            false);
                                                                                                });
                                                                                            lyts_12.foreach_cell(
                                                                                                [this, &charge_lyt,
                                                                                                 &lyts_12](
                                                                                                    const auto& c1) {
                                                                                                    charge_lyt
                                                                                                        .assign_charge_state(
                                                                                                            c1,
                                                                                                            lyts_12
                                                                                                                .get_charge_state(
                                                                                                                    c1),
                                                                                                            false);
                                                                                                });
                                                                                            lyts_13.foreach_cell(
                                                                                                [this, &charge_lyt,
                                                                                                 &lyts_13](
                                                                                                    const auto& c1) {
                                                                                                    charge_lyt
                                                                                                        .assign_charge_state(
                                                                                                            c1,
                                                                                                            lyts_13
                                                                                                                .get_charge_state(
                                                                                                                    c1),
                                                                                                            false);
                                                                                                });
                                                                                            lyts_14.foreach_cell(
                                                                                                [this, &charge_lyt,
                                                                                                 &lyts_14](
                                                                                                    const auto& c1) {
                                                                                                    charge_lyt
                                                                                                        .assign_charge_state(
                                                                                                            c1,
                                                                                                            lyts_14
                                                                                                                .get_charge_state(
                                                                                                                    c1),
                                                                                                            false);
                                                                                                });
                                                                                            lyts_15.foreach_cell(
                                                                                                [this, &charge_lyt,
                                                                                                 &lyts_15](
                                                                                                    const auto& c1) {
                                                                                                    charge_lyt
                                                                                                        .assign_charge_state(
                                                                                                            c1,
                                                                                                            lyts_15
                                                                                                                .get_charge_state(
                                                                                                                    c1),
                                                                                                            false);
                                                                                                });
                                                                                            lyts_16.foreach_cell(
                                                                                                [this, &charge_lyt,
                                                                                                 &lyts_16](
                                                                                                    const auto& c1) {
                                                                                                    charge_lyt
                                                                                                        .assign_charge_state(
                                                                                                            c1,
                                                                                                            lyts_16
                                                                                                                .get_charge_state(
                                                                                                                    c1),
                                                                                                            false);
                                                                                                });
                                                                                            lyts_17.foreach_cell(
                                                                                                [this, &charge_lyt,
                                                                                                 &lyts_17](
                                                                                                    const auto& c1) {
                                                                                                    charge_lyt
                                                                                                        .assign_charge_state(
                                                                                                            c1,
                                                                                                            lyts_17
                                                                                                                .get_charge_state(
                                                                                                                    c1),
                                                                                                            false);
                                                                                                });
                                                                                            lyts_18.foreach_cell(
                                                                                                [this, &charge_lyt,
                                                                                                 &lyts_18](
                                                                                                    const auto& c1) {
                                                                                                    charge_lyt
                                                                                                        .assign_charge_state(
                                                                                                            c1,
                                                                                                            lyts_18
                                                                                                                .get_charge_state(
                                                                                                                    c1),
                                                                                                            false);
                                                                                                });
                                                                                            lyts_19.foreach_cell(
                                                                                                [this, &charge_lyt,
                                                                                                 &lyts_19](
                                                                                                    const auto& c1) {
                                                                                                    charge_lyt
                                                                                                        .assign_charge_state(
                                                                                                            c1,
                                                                                                            lyts_19
                                                                                                                .get_charge_state(
                                                                                                                    c1),
                                                                                                            false);
                                                                                                });
                                                                                            lyts_20.foreach_cell(
                                                                                                [this, &charge_lyt,
                                                                                                 &lyts_20](
                                                                                                    const auto& c1) {
                                                                                                    charge_lyt
                                                                                                        .assign_charge_state(
                                                                                                            c1,
                                                                                                            lyts_20
                                                                                                                .get_charge_state(
                                                                                                                    c1),
                                                                                                            false);
                                                                                                });
                                                                                            lyts_21.foreach_cell(
                                                                                                [this, &charge_lyt,
                                                                                                 &lyts_21](
                                                                                                    const auto& c1) {
                                                                                                    charge_lyt
                                                                                                        .assign_charge_state(
                                                                                                            c1,
                                                                                                            lyts_21
                                                                                                                .get_charge_state(
                                                                                                                    c1),
                                                                                                            false);
                                                                                                });
                                                                                            charge_lyt
                                                                                                .update_after_charge_change();
                                                                                            if (charge_lyt
                                                                                                    .is_physically_valid())
                                                                                            {
                                                                                                if (charge_lyt
                                                                                                        .get_system_energy() <
                                                                                                    energy_threas)
                                                                                                {
                                                                                                    std::vector<
                                                                                                        charge_distribution_surface<
                                                                                                            Lyt>>
                                                                                                        lyts{};
                                                                                                    std::cout
                                                                                                        << charge_lyt
                                                                                                               .get_system_energy()
                                                                                                        << std::endl;

                                                                                                    sidb_simulation_result<
                                                                                                        Lyt>
                                                                                                        sim_result{};
                                                                                                    sim_result
                                                                                                        .algorithm_name =
                                                                                                        "ExGS";
                                                                                                    charge_distribution_surface<
                                                                                                        Lyt>
                                                                                                        charge_lyt_copy{
                                                                                                            charge_lyt};
                                                                                                    lyts.emplace_back(
                                                                                                        charge_lyt_copy);
                                                                                                    sim_result
                                                                                                        .charge_distributions =
                                                                                                        lyts;
                                                                                                    energy_threas =
                                                                                                        charge_lyt
                                                                                                            .get_system_energy();
                                                                                                    write_sqd_sim_result<
                                                                                                        Lyt>(
                                                                                                        sim_result,
                                                                                                        "/Users/"
                                                                                                        "jandrewnio"
                                                                                                        "k/"
                                                                                                        "CLionProje"
                                                                                                        "cts/"
                                                                                                        "fiction_"
                                                                                                        "fork/"
                                                                                                        "experiment"
                                                                                                        "s/"
                                                                                                        "result."
                                                                                                        "xml");
                                                                                                }
                                                                                            }
                                                                                            counter += 1;
                                                                                            if (counter % 100000 == 0)
                                                                                            {
                                                                                                std::cout << counter
                                                                                                          << std::endl;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    void combining_all_19_real_test()
    {
        auto compareFunc =
            [](const charge_distribution_surface<Lyt>& lyt1, const charge_distribution_surface<Lyt>& lyt2)
        { return lyt1.get_system_energy() < lyt2.get_system_energy(); };

        std::cout << "combining starts: " << std::to_string(lyts_of_regions.size()) << std::endl;
        uint64_t counter_lyts = 1;
        for (const auto& lyts_region : lyts_of_regions)
        {
            counter_lyts *= lyts_region.size();
        }
        std::cout << "number enumerations: " << std::to_string(counter_lyts) << std::endl;

        auto lyt_one   = lyts_of_regions[0];
        auto lyt_two   = lyts_of_regions[1];
        auto lyt_three = lyts_of_regions[2];
        auto lyt_four  = lyts_of_regions[3];
        auto lyt_five  = lyts_of_regions[4];
        auto lyt_six   = lyts_of_regions[5];
        auto lyt_seven = lyts_of_regions[6];
        auto lyt_eight = lyts_of_regions[7];
        auto lyt_nine  = lyts_of_regions[8];
        auto lyt_ten   = lyts_of_regions[9];
        auto lyt_11    = lyts_of_regions[10];
        auto lyt_12    = lyts_of_regions[11];
        auto lyt_13    = lyts_of_regions[12];
        auto lyt_14    = lyts_of_regions[13];
        auto lyt_15    = lyts_of_regions[14];
        auto lyt_16    = lyts_of_regions[15];
        auto lyt_17    = lyts_of_regions[16];
        auto lyt_18    = lyts_of_regions[17];
        auto lyt_19    = lyts_of_regions[18];

        std::sort(lyt_one.begin(), lyt_one.end(), compareFunc);
        std::sort(lyt_two.begin(), lyt_two.end(), compareFunc);
        std::sort(lyt_three.begin(), lyt_three.end(), compareFunc);
        std::sort(lyt_four.begin(), lyt_four.end(), compareFunc);
        std::sort(lyt_five.begin(), lyt_five.end(), compareFunc);
        std::sort(lyt_six.begin(), lyt_six.end(), compareFunc);
        std::sort(lyt_seven.begin(), lyt_seven.end(), compareFunc);
        std::sort(lyt_eight.begin(), lyt_eight.end(), compareFunc);
        std::sort(lyt_nine.begin(), lyt_nine.end(), compareFunc);
        std::sort(lyt_ten.begin(), lyt_ten.end(), compareFunc);
        std::sort(lyt_11.begin(), lyt_11.end(), compareFunc);
        std::sort(lyt_12.begin(), lyt_12.end(), compareFunc);
        std::sort(lyt_13.begin(), lyt_13.end(), compareFunc);
        std::sort(lyt_14.begin(), lyt_14.end(), compareFunc);
        std::sort(lyt_15.begin(), lyt_15.end(), compareFunc);
        std::sort(lyt_16.begin(), lyt_16.end(), compareFunc);
        std::sort(lyt_17.begin(), lyt_17.end(), compareFunc);
        std::sort(lyt_18.begin(), lyt_18.end(), compareFunc);

        std::sort(lyt_19.begin(), lyt_19.end(), compareFunc);

        int                                           number = 5;
        std::vector<charge_distribution_surface<Lyt>> lyt_ones(
            lyt_one.begin(), lyt_one.begin() + std::min(number, static_cast<int>(lyt_one.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_twos(
            lyt_two.begin(), lyt_two.begin() + std::min(number, static_cast<int>(lyt_two.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_threes(
            lyt_three.begin(), lyt_three.begin() + std::min(number, static_cast<int>(lyt_three.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_fours(
            lyt_four.begin(), lyt_four.begin() + std::min(number, static_cast<int>(lyt_four.size())));

        std::vector<charge_distribution_surface<Lyt>> lyt_fives(
            lyt_five.begin(), lyt_five.begin() + std::min(number, static_cast<int>(lyt_five.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_sixs(
            lyt_six.begin(), lyt_six.begin() + std::min(number, static_cast<int>(lyt_six.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_sevens(
            lyt_seven.begin(), lyt_seven.begin() + std::min(number, static_cast<int>(lyt_seven.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_eights(
            lyt_eight.begin(), lyt_eight.begin() + std::min(number, static_cast<int>(lyt_eight.size())));

        std::vector<charge_distribution_surface<Lyt>> lyt_nines(
            lyt_nine.begin(), lyt_nine.begin() + std::min(number, static_cast<int>(lyt_nine.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_tens(
            lyt_ten.begin(), lyt_ten.begin() + std::min(number, static_cast<int>(lyt_ten.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_11s(
            lyt_11.begin(), lyt_11.begin() + std::min(number, static_cast<int>(lyt_11.size())));

        std::vector<charge_distribution_surface<Lyt>> lyt_12s(
            lyt_12.begin(), lyt_12.begin() + std::min(number, static_cast<int>(lyt_12.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_13s(
            lyt_13.begin(), lyt_13.begin() + std::min(number, static_cast<int>(lyt_13.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_14s(
            lyt_14.begin(), lyt_14.begin() + std::min(number, static_cast<int>(lyt_14.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_15s(
            lyt_15.begin(), lyt_15.begin() + std::min(number, static_cast<int>(lyt_15.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_16s(
            lyt_16.begin(), lyt_16.begin() + std::min(number, static_cast<int>(lyt_16.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_17s(
            lyt_17.begin(), lyt_17.begin() + std::min(number, static_cast<int>(lyt_17.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_18s(
            lyt_18.begin(), lyt_18.begin() + std::min(number, static_cast<int>(lyt_18.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_19s(
            lyt_19.begin(), lyt_19.begin() + std::min(number, static_cast<int>(lyt_19.size())));

        charge_distribution_surface<Lyt> charge_lyt{layout};
        uint64_t                         counter = 0;
        std::vector<double>              valid_energies{};
        double                           energy_threas = 1000;
        for (auto i = 0u; i < lyt_one.size(); i++)
        {
            for (auto j = 0u; j < lyt_two.size(); j++)
            {
                for (auto three = 0u; three < lyt_three.size(); three++)
                {
                    for (auto four = 0u; four < lyt_four.size(); four++)
                    {
                        for (auto five = 0u; five < lyt_five.size(); five++)
                        {
                            for (const auto& lyts_six : lyt_six)
                            {
                                for (const auto& lyts_seven : lyt_seven)
                                {

                                    for (auto eight = 0u; eight < lyt_eight.size(); eight++)
                                    {

                                        for (auto nine = 0u; nine < lyt_nine.size(); nine++)
                                        {

                                            for (auto t = 0u; t < lyt_ten.size(); t++)
                                            {
                                                for (auto l = 0u; l < lyt_11.size(); l++)
                                                {
                                                    for (const auto& lyts_12 : lyt_12)
                                                    {

                                                        for (const auto& lyts_13 : lyt_13)
                                                        {

                                                            for (const auto& lyts_14 : lyt_14)
                                                            {
                                                                for (const auto& lyts_15 : lyt_15)
                                                                {
                                                                    for (const auto& lyts_16 : lyt_16)
                                                                    {
                                                                        for (const auto& lyts_17 : lyt_17)
                                                                        {
                                                                            for (const auto& lyts_18 : lyt_18)
                                                                            {
                                                                                for (const auto& lyts_19 : lyt_19)
                                                                                {
                                                                                    lyt_one[i].foreach_cell(
                                                                                        [this, &charge_lyt, &lyt_one,
                                                                                         &i](const auto& c1) {
                                                                                            charge_lyt
                                                                                                .assign_charge_state(
                                                                                                    c1,
                                                                                                    lyt_one[i]
                                                                                                        .get_charge_state(
                                                                                                            c1),
                                                                                                    false);
                                                                                        });
                                                                                    lyt_two[j].foreach_cell(
                                                                                        [this, &charge_lyt, &lyt_two,
                                                                                         &j](const auto& c1) {
                                                                                            charge_lyt
                                                                                                .assign_charge_state(
                                                                                                    c1,
                                                                                                    lyt_two[j]
                                                                                                        .get_charge_state(
                                                                                                            c1),
                                                                                                    false);
                                                                                        });
                                                                                    lyt_three[three].foreach_cell(
                                                                                        [this, &charge_lyt, &lyt_three,
                                                                                         &three](const auto& c1) {
                                                                                            charge_lyt
                                                                                                .assign_charge_state(
                                                                                                    c1,
                                                                                                    lyt_three[three]
                                                                                                        .get_charge_state(
                                                                                                            c1),
                                                                                                    false);
                                                                                        });
                                                                                    lyt_four[four].foreach_cell(
                                                                                        [this, &charge_lyt, &lyt_four,
                                                                                         &four](const auto& c1) {
                                                                                            charge_lyt
                                                                                                .assign_charge_state(
                                                                                                    c1,
                                                                                                    lyt_four[four]
                                                                                                        .get_charge_state(
                                                                                                            c1),
                                                                                                    false);
                                                                                        });
                                                                                    lyt_five[five].foreach_cell(
                                                                                        [this, &charge_lyt, &lyt_five,
                                                                                         &five](const auto& c1) {
                                                                                            charge_lyt
                                                                                                .assign_charge_state(
                                                                                                    c1,
                                                                                                    lyt_five[five]
                                                                                                        .get_charge_state(
                                                                                                            c1),
                                                                                                    false);
                                                                                        });
                                                                                    lyts_six.foreach_cell(
                                                                                        [this, &charge_lyt,
                                                                                         &lyts_six](const auto& c1) {
                                                                                            charge_lyt
                                                                                                .assign_charge_state(
                                                                                                    c1,
                                                                                                    lyts_six
                                                                                                        .get_charge_state(
                                                                                                            c1),
                                                                                                    false);
                                                                                        });
                                                                                    lyts_seven.foreach_cell(
                                                                                        [this, &charge_lyt,
                                                                                         &lyts_seven](const auto& c1) {
                                                                                            charge_lyt
                                                                                                .assign_charge_state(
                                                                                                    c1,
                                                                                                    lyts_seven
                                                                                                        .get_charge_state(
                                                                                                            c1),
                                                                                                    false);
                                                                                        });
                                                                                    lyt_eight[eight].foreach_cell(
                                                                                        [this, &charge_lyt, &lyt_eight,
                                                                                         &eight](const auto& c1) {
                                                                                            charge_lyt
                                                                                                .assign_charge_state(
                                                                                                    c1,
                                                                                                    lyt_eight[eight]
                                                                                                        .get_charge_state(
                                                                                                            c1),
                                                                                                    false);
                                                                                        });
                                                                                    lyt_nine[nine].foreach_cell(
                                                                                        [this, &charge_lyt, &lyt_nine,
                                                                                         &nine](const auto& c1) {
                                                                                            charge_lyt
                                                                                                .assign_charge_state(
                                                                                                    c1,
                                                                                                    lyt_nine[nine]
                                                                                                        .get_charge_state(
                                                                                                            c1),
                                                                                                    false);
                                                                                        });
                                                                                    lyt_ten[t].foreach_cell(
                                                                                        [this, &charge_lyt, &lyt_ten,
                                                                                         &t](const auto& c1) {
                                                                                            charge_lyt
                                                                                                .assign_charge_state(
                                                                                                    c1,
                                                                                                    lyt_ten[t]
                                                                                                        .get_charge_state(
                                                                                                            c1),
                                                                                                    false);
                                                                                        });
                                                                                    lyt_11[l].foreach_cell(
                                                                                        [this, &charge_lyt, &lyt_11,
                                                                                         &l](const auto& c1) {
                                                                                            charge_lyt
                                                                                                .assign_charge_state(
                                                                                                    c1,
                                                                                                    lyt_11[l]
                                                                                                        .get_charge_state(
                                                                                                            c1),
                                                                                                    false);
                                                                                        });
                                                                                    lyts_12.foreach_cell(
                                                                                        [this, &charge_lyt,
                                                                                         &lyts_12](const auto& c1) {
                                                                                            charge_lyt
                                                                                                .assign_charge_state(
                                                                                                    c1,
                                                                                                    lyts_12
                                                                                                        .get_charge_state(
                                                                                                            c1),
                                                                                                    false);
                                                                                        });
                                                                                    lyts_13.foreach_cell(
                                                                                        [this, &charge_lyt,
                                                                                         &lyts_13](const auto& c1) {
                                                                                            charge_lyt
                                                                                                .assign_charge_state(
                                                                                                    c1,
                                                                                                    lyts_13
                                                                                                        .get_charge_state(
                                                                                                            c1),
                                                                                                    false);
                                                                                        });
                                                                                    lyts_14.foreach_cell(
                                                                                        [this, &charge_lyt,
                                                                                         &lyts_14](const auto& c1) {
                                                                                            charge_lyt
                                                                                                .assign_charge_state(
                                                                                                    c1,
                                                                                                    lyts_14
                                                                                                        .get_charge_state(
                                                                                                            c1),
                                                                                                    false);
                                                                                        });
                                                                                    lyts_15.foreach_cell(
                                                                                        [this, &charge_lyt,
                                                                                         &lyts_15](const auto& c1) {
                                                                                            charge_lyt
                                                                                                .assign_charge_state(
                                                                                                    c1,
                                                                                                    lyts_15
                                                                                                        .get_charge_state(
                                                                                                            c1),
                                                                                                    false);
                                                                                        });
                                                                                    lyts_16.foreach_cell(
                                                                                        [this, &charge_lyt,
                                                                                         &lyts_16](const auto& c1) {
                                                                                            charge_lyt
                                                                                                .assign_charge_state(
                                                                                                    c1,
                                                                                                    lyts_16
                                                                                                        .get_charge_state(
                                                                                                            c1),
                                                                                                    false);
                                                                                        });
                                                                                    lyts_17.foreach_cell(
                                                                                        [this, &charge_lyt,
                                                                                         &lyts_17](const auto& c1) {
                                                                                            charge_lyt
                                                                                                .assign_charge_state(
                                                                                                    c1,
                                                                                                    lyts_17
                                                                                                        .get_charge_state(
                                                                                                            c1),
                                                                                                    false);
                                                                                        });
                                                                                    lyts_18.foreach_cell(
                                                                                        [this, &charge_lyt,
                                                                                         &lyts_18](const auto& c1) {
                                                                                            charge_lyt
                                                                                                .assign_charge_state(
                                                                                                    c1,
                                                                                                    lyts_18
                                                                                                        .get_charge_state(
                                                                                                            c1),
                                                                                                    false);
                                                                                        });
                                                                                    lyts_19.foreach_cell(
                                                                                        [this, &charge_lyt,
                                                                                         &lyts_19](const auto& c1) {
                                                                                            charge_lyt
                                                                                                .assign_charge_state(
                                                                                                    c1,
                                                                                                    lyts_19
                                                                                                        .get_charge_state(
                                                                                                            c1),
                                                                                                    false);
                                                                                        });
                                                                                    charge_lyt
                                                                                        .update_after_charge_change();
                                                                                    if (charge_lyt
                                                                                            .is_physically_valid())
                                                                                    {
                                                                                        if (charge_lyt
                                                                                                .get_system_energy() <
                                                                                            energy_threas)
                                                                                        {
                                                                                            std::vector<
                                                                                                charge_distribution_surface<
                                                                                                    Lyt>>
                                                                                                lyts{};
                                                                                            std::cout
                                                                                                << charge_lyt
                                                                                                       .get_system_energy()
                                                                                                << std::endl;

                                                                                            sidb_simulation_result<Lyt>
                                                                                                sim_result{};
                                                                                            sim_result.algorithm_name =
                                                                                                "ExGS";
                                                                                            charge_distribution_surface<
                                                                                                Lyt>
                                                                                                charge_lyt_copy{
                                                                                                    charge_lyt};
                                                                                            lyts.emplace_back(
                                                                                                charge_lyt_copy);
                                                                                            sim_result
                                                                                                .charge_distributions =
                                                                                                lyts;
                                                                                            energy_threas =
                                                                                                charge_lyt
                                                                                                    .get_system_energy();
                                                                                            write_sqd_sim_result<Lyt>(
                                                                                                sim_result,
                                                                                                "/Users/"
                                                                                                "jandrewniok/"
                                                                                                "CLionProjects/"
                                                                                                "fiction_fork/"
                                                                                                "experiments/"
                                                                                                "result.xml");
                                                                                        }
                                                                                    }
                                                                                    counter += 1;
                                                                                    if (counter % 100000 == 0)
                                                                                    {
                                                                                        std::cout << counter
                                                                                                  << std::endl;
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    void combining_all_25_test()
    {
        auto compareFunc =
            [](const charge_distribution_surface<Lyt>& lyt1, const charge_distribution_surface<Lyt>& lyt2)
        { return lyt1.get_system_energy() < lyt2.get_system_energy(); };

        std::cout << "combining starts: " << std::to_string(lyts_of_regions.size()) << std::endl;
        uint64_t counter_lyts = 1;
        for (const auto& lyts_region : lyts_of_regions)
        {
            counter_lyts *= lyts_region.size();
        }
        std::cout << "number enumerations: " << std::to_string(counter_lyts) << std::endl;

        auto lyt_one   = lyts_of_regions[0];
        auto lyt_two   = lyts_of_regions[1];
        auto lyt_three = lyts_of_regions[2];
        auto lyt_four  = lyts_of_regions[3];
        auto lyt_five  = lyts_of_regions[4];
        auto lyt_six   = lyts_of_regions[5];
        auto lyt_seven = lyts_of_regions[6];
        auto lyt_eight = lyts_of_regions[7];
        auto lyt_nine  = lyts_of_regions[8];
        auto lyt_ten   = lyts_of_regions[9];
        auto lyt_11    = lyts_of_regions[10];
        auto lyt_12    = lyts_of_regions[11];
        auto lyt_13    = lyts_of_regions[12];
        auto lyt_14    = lyts_of_regions[13];
        auto lyt_15    = lyts_of_regions[14];
        auto lyt_16    = lyts_of_regions[15];
        auto lyt_17    = lyts_of_regions[16];
        auto lyt_18    = lyts_of_regions[17];
        auto lyt_19    = lyts_of_regions[18];
        auto lyt_20    = lyts_of_regions[19];
        auto lyt_21    = lyts_of_regions[20];
        auto lyt_22    = lyts_of_regions[21];
        auto lyt_23    = lyts_of_regions[22];
        auto lyt_24    = lyts_of_regions[23];
        auto lyt_25    = lyts_of_regions[24];

        std::sort(lyt_one.begin(), lyt_one.end(), compareFunc);
        std::sort(lyt_two.begin(), lyt_two.end(), compareFunc);
        std::sort(lyt_three.begin(), lyt_three.end(), compareFunc);
        std::sort(lyt_four.begin(), lyt_four.end(), compareFunc);
        std::sort(lyt_five.begin(), lyt_five.end(), compareFunc);
        std::sort(lyt_six.begin(), lyt_six.end(), compareFunc);
        std::sort(lyt_seven.begin(), lyt_seven.end(), compareFunc);
        std::sort(lyt_eight.begin(), lyt_eight.end(), compareFunc);
        std::sort(lyt_nine.begin(), lyt_nine.end(), compareFunc);
        std::sort(lyt_ten.begin(), lyt_ten.end(), compareFunc);
        std::sort(lyt_11.begin(), lyt_11.end(), compareFunc);
        std::sort(lyt_12.begin(), lyt_12.end(), compareFunc);
        std::sort(lyt_13.begin(), lyt_13.end(), compareFunc);
        std::sort(lyt_14.begin(), lyt_14.end(), compareFunc);
        std::sort(lyt_15.begin(), lyt_15.end(), compareFunc);
        std::sort(lyt_16.begin(), lyt_16.end(), compareFunc);
        std::sort(lyt_17.begin(), lyt_17.end(), compareFunc);
        std::sort(lyt_18.begin(), lyt_18.end(), compareFunc);

        std::sort(lyt_19.begin(), lyt_19.end(), compareFunc);
        std::sort(lyt_20.begin(), lyt_20.end(), compareFunc);
        std::sort(lyt_21.begin(), lyt_21.end(), compareFunc);
        std::sort(lyt_22.begin(), lyt_22.end(), compareFunc);
        std::sort(lyt_23.begin(), lyt_23.end(), compareFunc);
        std::sort(lyt_24.begin(), lyt_24.end(), compareFunc);
        std::sort(lyt_25.begin(), lyt_25.end(), compareFunc);

        int                                           number = 5;
        std::vector<charge_distribution_surface<Lyt>> lyt_ones(
            lyt_one.begin(), lyt_one.begin() + std::min(number, static_cast<int>(lyt_one.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_twos(
            lyt_two.begin(), lyt_two.begin() + std::min(number, static_cast<int>(lyt_two.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_threes(
            lyt_three.begin(), lyt_three.begin() + std::min(number, static_cast<int>(lyt_three.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_fours(
            lyt_four.begin(), lyt_four.begin() + std::min(number, static_cast<int>(lyt_four.size())));

        std::vector<charge_distribution_surface<Lyt>> lyt_fives(
            lyt_five.begin(), lyt_five.begin() + std::min(number, static_cast<int>(lyt_five.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_sixs(
            lyt_six.begin(), lyt_six.begin() + std::min(number, static_cast<int>(lyt_six.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_sevens(
            lyt_seven.begin(), lyt_seven.begin() + std::min(number, static_cast<int>(lyt_seven.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_eights(
            lyt_eight.begin(), lyt_eight.begin() + std::min(number, static_cast<int>(lyt_eight.size())));

        std::vector<charge_distribution_surface<Lyt>> lyt_nines(
            lyt_nine.begin(), lyt_nine.begin() + std::min(number, static_cast<int>(lyt_nine.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_tens(
            lyt_ten.begin(), lyt_ten.begin() + std::min(number, static_cast<int>(lyt_ten.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_11s(
            lyt_11.begin(), lyt_11.begin() + std::min(number, static_cast<int>(lyt_11.size())));

        std::vector<charge_distribution_surface<Lyt>> lyt_12s(
            lyt_12.begin(), lyt_12.begin() + std::min(number, static_cast<int>(lyt_12.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_13s(
            lyt_13.begin(), lyt_13.begin() + std::min(number, static_cast<int>(lyt_13.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_14s(
            lyt_14.begin(), lyt_14.begin() + std::min(number, static_cast<int>(lyt_14.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_15s(
            lyt_15.begin(), lyt_15.begin() + std::min(number, static_cast<int>(lyt_15.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_16s(
            lyt_16.begin(), lyt_16.begin() + std::min(number, static_cast<int>(lyt_16.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_17s(
            lyt_17.begin(), lyt_17.begin() + std::min(number, static_cast<int>(lyt_17.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_18s(
            lyt_18.begin(), lyt_18.begin() + std::min(number, static_cast<int>(lyt_18.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_19s(
            lyt_19.begin(), lyt_19.begin() + std::min(number, static_cast<int>(lyt_19.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_20s(
            lyt_20.begin(), lyt_20.begin() + std::min(number, static_cast<int>(lyt_20.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_21s(
            lyt_21.begin(), lyt_21.begin() + std::min(number, static_cast<int>(lyt_21.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_22s(
            lyt_22.begin(), lyt_22.begin() + std::min(number, static_cast<int>(lyt_22.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_23s(
            lyt_23.begin(), lyt_23.begin() + std::min(number, static_cast<int>(lyt_23.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_24s(
            lyt_24.begin(), lyt_24.begin() + std::min(number, static_cast<int>(lyt_24.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_25s(
            lyt_25.begin(), lyt_25.begin() + std::min(number, static_cast<int>(lyt_25.size())));

        charge_distribution_surface<Lyt> charge_lyt{layout};
        uint64_t                         counter = 0;
        std::vector<double>              valid_energies{};
        double                           energy_threas = 1000;
        for (auto i = 0u; i < lyt_one.size(); i++)
        {
            for (auto j = 0u; j < lyt_two.size(); j++)
            {
                for (auto three = 0u; three < lyt_three.size(); three++)
                {
                    for (auto four = 0u; four < lyt_four.size(); four++)
                    {
                        for (auto five = 0u; five < lyt_five.size(); five++)
                        {
                            for (const auto& lyts_six : lyt_six)
                            {
                                for (const auto& lyts_seven : lyt_seven)
                                {

                                    for (auto eight = 0u; eight < lyt_eight.size(); eight++)
                                    {

                                        for (auto nine = 0u; nine < lyt_nine.size(); nine++)
                                        {

                                            for (auto t = 0u; t < lyt_ten.size(); t++)
                                            {
                                                for (auto l = 0u; l < lyt_11.size(); l++)
                                                {
                                                    for (const auto& lyts_12 : lyt_12)
                                                    {

                                                        for (const auto& lyts_13 : lyt_13)
                                                        {

                                                            for (const auto& lyts_14 : lyt_14)
                                                            {
                                                                for (const auto& lyts_15 : lyt_15)
                                                                {
                                                                    for (const auto& lyts_16 : lyt_16)
                                                                    {
                                                                        for (const auto& lyts_17 : lyt_17)
                                                                        {
                                                                            for (const auto& lyts_18 : lyt_18)
                                                                            {
                                                                                for (const auto& lyts_19 : lyt_19)
                                                                                {
                                                                                    for (const auto& lyts_20 : lyt_20)
                                                                                    {
                                                                                        for (const auto& lyts_21 :
                                                                                             lyt_21)
                                                                                        {
                                                                                            for (const auto& lyts_22 :
                                                                                                 lyt_22)
                                                                                            {
                                                                                                for (const auto&
                                                                                                         lyts_23 :
                                                                                                     lyt_23)
                                                                                                {
                                                                                                    for (const auto&
                                                                                                             lyts_24 :
                                                                                                         lyt_24)
                                                                                                    {
                                                                                                        for (
                                                                                                            const auto&
                                                                                                                lyts_25 :
                                                                                                            lyt_25)
                                                                                                        {
                                                                                                            lyt_one[i].foreach_cell(
                                                                                                                [this,
                                                                                                                 &charge_lyt,
                                                                                                                 &lyt_one,
                                                                                                                 &i](
                                                                                                                    const auto&
                                                                                                                        c1)
                                                                                                                {
                                                                                                                    charge_lyt
                                                                                                                        .assign_charge_state(
                                                                                                                            c1,
                                                                                                                            lyt_one[i]
                                                                                                                                .get_charge_state(
                                                                                                                                    c1),
                                                                                                                            false);
                                                                                                                });
                                                                                                            lyt_two[j].foreach_cell(
                                                                                                                [this,
                                                                                                                 &charge_lyt,
                                                                                                                 &lyt_two,
                                                                                                                 &j](
                                                                                                                    const auto&
                                                                                                                        c1)
                                                                                                                {
                                                                                                                    charge_lyt
                                                                                                                        .assign_charge_state(
                                                                                                                            c1,
                                                                                                                            lyt_two[j]
                                                                                                                                .get_charge_state(
                                                                                                                                    c1),
                                                                                                                            false);
                                                                                                                });
                                                                                                            lyt_three[three]
                                                                                                                .foreach_cell(
                                                                                                                    [this,
                                                                                                                     &charge_lyt,
                                                                                                                     &lyt_three,
                                                                                                                     &three](
                                                                                                                        const auto&
                                                                                                                            c1)
                                                                                                                    {
                                                                                                                        charge_lyt
                                                                                                                            .assign_charge_state(
                                                                                                                                c1,
                                                                                                                                lyt_three[three]
                                                                                                                                    .get_charge_state(
                                                                                                                                        c1),
                                                                                                                                false);
                                                                                                                    });
                                                                                                            lyt_four[four]
                                                                                                                .foreach_cell(
                                                                                                                    [this,
                                                                                                                     &charge_lyt,
                                                                                                                     &lyt_four,
                                                                                                                     &four](
                                                                                                                        const auto&
                                                                                                                            c1)
                                                                                                                    {
                                                                                                                        charge_lyt
                                                                                                                            .assign_charge_state(
                                                                                                                                c1,
                                                                                                                                lyt_four[four]
                                                                                                                                    .get_charge_state(
                                                                                                                                        c1),
                                                                                                                                false);
                                                                                                                    });
                                                                                                            lyt_five[five]
                                                                                                                .foreach_cell(
                                                                                                                    [this,
                                                                                                                     &charge_lyt,
                                                                                                                     &lyt_five,
                                                                                                                     &five](
                                                                                                                        const auto&
                                                                                                                            c1)
                                                                                                                    {
                                                                                                                        charge_lyt
                                                                                                                            .assign_charge_state(
                                                                                                                                c1,
                                                                                                                                lyt_five[five]
                                                                                                                                    .get_charge_state(
                                                                                                                                        c1),
                                                                                                                                false);
                                                                                                                    });
                                                                                                            lyts_six.foreach_cell(
                                                                                                                [this,
                                                                                                                 &charge_lyt,
                                                                                                                 &lyts_six](
                                                                                                                    const auto&
                                                                                                                        c1)
                                                                                                                {
                                                                                                                    charge_lyt
                                                                                                                        .assign_charge_state(
                                                                                                                            c1,
                                                                                                                            lyts_six
                                                                                                                                .get_charge_state(
                                                                                                                                    c1),
                                                                                                                            false);
                                                                                                                });
                                                                                                            lyts_seven.foreach_cell(
                                                                                                                [this,
                                                                                                                 &charge_lyt,
                                                                                                                 &lyts_seven](
                                                                                                                    const auto&
                                                                                                                        c1)
                                                                                                                {
                                                                                                                    charge_lyt
                                                                                                                        .assign_charge_state(
                                                                                                                            c1,
                                                                                                                            lyts_seven
                                                                                                                                .get_charge_state(
                                                                                                                                    c1),
                                                                                                                            false);
                                                                                                                });
                                                                                                            lyt_eight[eight]
                                                                                                                .foreach_cell(
                                                                                                                    [this,
                                                                                                                     &charge_lyt,
                                                                                                                     &lyt_eight,
                                                                                                                     &eight](
                                                                                                                        const auto&
                                                                                                                            c1)
                                                                                                                    {
                                                                                                                        charge_lyt
                                                                                                                            .assign_charge_state(
                                                                                                                                c1,
                                                                                                                                lyt_eight[eight]
                                                                                                                                    .get_charge_state(
                                                                                                                                        c1),
                                                                                                                                false);
                                                                                                                    });
                                                                                                            lyt_nine[nine]
                                                                                                                .foreach_cell(
                                                                                                                    [this,
                                                                                                                     &charge_lyt,
                                                                                                                     &lyt_nine,
                                                                                                                     &nine](
                                                                                                                        const auto&
                                                                                                                            c1)
                                                                                                                    {
                                                                                                                        charge_lyt
                                                                                                                            .assign_charge_state(
                                                                                                                                c1,
                                                                                                                                lyt_nine[nine]
                                                                                                                                    .get_charge_state(
                                                                                                                                        c1),
                                                                                                                                false);
                                                                                                                    });
                                                                                                            lyt_ten[t].foreach_cell(
                                                                                                                [this,
                                                                                                                 &charge_lyt,
                                                                                                                 &lyt_ten,
                                                                                                                 &t](
                                                                                                                    const auto&
                                                                                                                        c1)
                                                                                                                {
                                                                                                                    charge_lyt
                                                                                                                        .assign_charge_state(
                                                                                                                            c1,
                                                                                                                            lyt_ten[t]
                                                                                                                                .get_charge_state(
                                                                                                                                    c1),
                                                                                                                            false);
                                                                                                                });
                                                                                                            lyt_11[l].foreach_cell(
                                                                                                                [this,
                                                                                                                 &charge_lyt,
                                                                                                                 &lyt_11,
                                                                                                                 &l](
                                                                                                                    const auto&
                                                                                                                        c1)
                                                                                                                {
                                                                                                                    charge_lyt
                                                                                                                        .assign_charge_state(
                                                                                                                            c1,
                                                                                                                            lyt_11[l]
                                                                                                                                .get_charge_state(
                                                                                                                                    c1),
                                                                                                                            false);
                                                                                                                });
                                                                                                            lyts_12.foreach_cell(
                                                                                                                [this,
                                                                                                                 &charge_lyt,
                                                                                                                 &lyts_12](
                                                                                                                    const auto&
                                                                                                                        c1)
                                                                                                                {
                                                                                                                    charge_lyt
                                                                                                                        .assign_charge_state(
                                                                                                                            c1,
                                                                                                                            lyts_12
                                                                                                                                .get_charge_state(
                                                                                                                                    c1),
                                                                                                                            false);
                                                                                                                });
                                                                                                            lyts_13.foreach_cell(
                                                                                                                [this,
                                                                                                                 &charge_lyt,
                                                                                                                 &lyts_13](
                                                                                                                    const auto&
                                                                                                                        c1)
                                                                                                                {
                                                                                                                    charge_lyt
                                                                                                                        .assign_charge_state(
                                                                                                                            c1,
                                                                                                                            lyts_13
                                                                                                                                .get_charge_state(
                                                                                                                                    c1),
                                                                                                                            false);
                                                                                                                });
                                                                                                            lyts_14.foreach_cell(
                                                                                                                [this,
                                                                                                                 &charge_lyt,
                                                                                                                 &lyts_14](
                                                                                                                    const auto&
                                                                                                                        c1)
                                                                                                                {
                                                                                                                    charge_lyt
                                                                                                                        .assign_charge_state(
                                                                                                                            c1,
                                                                                                                            lyts_14
                                                                                                                                .get_charge_state(
                                                                                                                                    c1),
                                                                                                                            false);
                                                                                                                });
                                                                                                            lyts_15.foreach_cell(
                                                                                                                [this,
                                                                                                                 &charge_lyt,
                                                                                                                 &lyts_15](
                                                                                                                    const auto&
                                                                                                                        c1)
                                                                                                                {
                                                                                                                    charge_lyt
                                                                                                                        .assign_charge_state(
                                                                                                                            c1,
                                                                                                                            lyts_15
                                                                                                                                .get_charge_state(
                                                                                                                                    c1),
                                                                                                                            false);
                                                                                                                });
                                                                                                            lyts_16.foreach_cell(
                                                                                                                [this,
                                                                                                                 &charge_lyt,
                                                                                                                 &lyts_16](
                                                                                                                    const auto&
                                                                                                                        c1)
                                                                                                                {
                                                                                                                    charge_lyt
                                                                                                                        .assign_charge_state(
                                                                                                                            c1,
                                                                                                                            lyts_16
                                                                                                                                .get_charge_state(
                                                                                                                                    c1),
                                                                                                                            false);
                                                                                                                });
                                                                                                            lyts_17.foreach_cell(
                                                                                                                [this,
                                                                                                                 &charge_lyt,
                                                                                                                 &lyts_17](
                                                                                                                    const auto&
                                                                                                                        c1)
                                                                                                                {
                                                                                                                    charge_lyt
                                                                                                                        .assign_charge_state(
                                                                                                                            c1,
                                                                                                                            lyts_17
                                                                                                                                .get_charge_state(
                                                                                                                                    c1),
                                                                                                                            false);
                                                                                                                });
                                                                                                            lyts_18.foreach_cell(
                                                                                                                [this,
                                                                                                                 &charge_lyt,
                                                                                                                 &lyts_18](
                                                                                                                    const auto&
                                                                                                                        c1)
                                                                                                                {
                                                                                                                    charge_lyt
                                                                                                                        .assign_charge_state(
                                                                                                                            c1,
                                                                                                                            lyts_18
                                                                                                                                .get_charge_state(
                                                                                                                                    c1),
                                                                                                                            false);
                                                                                                                });
                                                                                                            lyts_19.foreach_cell(
                                                                                                                [this,
                                                                                                                 &charge_lyt,
                                                                                                                 &lyts_19](
                                                                                                                    const auto&
                                                                                                                        c1)
                                                                                                                {
                                                                                                                    charge_lyt
                                                                                                                        .assign_charge_state(
                                                                                                                            c1,
                                                                                                                            lyts_19
                                                                                                                                .get_charge_state(
                                                                                                                                    c1),
                                                                                                                            false);
                                                                                                                });
                                                                                                            lyts_20.foreach_cell(
                                                                                                                [this,
                                                                                                                 &charge_lyt,
                                                                                                                 &lyts_20](
                                                                                                                    const auto&
                                                                                                                        c1)
                                                                                                                {
                                                                                                                    charge_lyt
                                                                                                                        .assign_charge_state(
                                                                                                                            c1,
                                                                                                                            lyts_20
                                                                                                                                .get_charge_state(
                                                                                                                                    c1),
                                                                                                                            false);
                                                                                                                });
                                                                                                            lyts_21.foreach_cell(
                                                                                                                [this,
                                                                                                                 &charge_lyt,
                                                                                                                 &lyts_21](
                                                                                                                    const auto&
                                                                                                                        c1)
                                                                                                                {
                                                                                                                    charge_lyt
                                                                                                                        .assign_charge_state(
                                                                                                                            c1,
                                                                                                                            lyts_21
                                                                                                                                .get_charge_state(
                                                                                                                                    c1),
                                                                                                                            false);
                                                                                                                });
                                                                                                            lyts_22.foreach_cell(
                                                                                                                [this,
                                                                                                                 &charge_lyt,
                                                                                                                 &lyts_22](
                                                                                                                    const auto&
                                                                                                                        c1)
                                                                                                                {
                                                                                                                    charge_lyt
                                                                                                                        .assign_charge_state(
                                                                                                                            c1,
                                                                                                                            lyts_22
                                                                                                                                .get_charge_state(
                                                                                                                                    c1),
                                                                                                                            false);
                                                                                                                });
                                                                                                            lyts_23.foreach_cell(
                                                                                                                [this,
                                                                                                                 &charge_lyt,
                                                                                                                 &lyts_23](
                                                                                                                    const auto&
                                                                                                                        c1)
                                                                                                                {
                                                                                                                    charge_lyt
                                                                                                                        .assign_charge_state(
                                                                                                                            c1,
                                                                                                                            lyts_23
                                                                                                                                .get_charge_state(
                                                                                                                                    c1),
                                                                                                                            false);
                                                                                                                });
                                                                                                            lyts_24.foreach_cell(
                                                                                                                [this,
                                                                                                                 &charge_lyt,
                                                                                                                 &lyts_24](
                                                                                                                    const auto&
                                                                                                                        c1)
                                                                                                                {
                                                                                                                    charge_lyt
                                                                                                                        .assign_charge_state(
                                                                                                                            c1,
                                                                                                                            lyts_24
                                                                                                                                .get_charge_state(
                                                                                                                                    c1),
                                                                                                                            false);
                                                                                                                });
                                                                                                            lyts_25.foreach_cell(
                                                                                                                [this,
                                                                                                                 &charge_lyt,
                                                                                                                 &lyts_25](
                                                                                                                    const auto&
                                                                                                                        c1)
                                                                                                                {
                                                                                                                    charge_lyt
                                                                                                                        .assign_charge_state(
                                                                                                                            c1,
                                                                                                                            lyts_25
                                                                                                                                .get_charge_state(
                                                                                                                                    c1),
                                                                                                                            false);
                                                                                                                });
                                                                                                            charge_lyt
                                                                                                                .update_after_charge_change();
                                                                                                            if (charge_lyt
                                                                                                                    .is_physically_valid())
                                                                                                            {
                                                                                                                if (charge_lyt
                                                                                                                        .get_system_energy() <
                                                                                                                    energy_threas)
                                                                                                                {
                                                                                                                    std::vector<
                                                                                                                        charge_distribution_surface<
                                                                                                                            Lyt>>
                                                                                                                        lyts{};
                                                                                                                    std::cout
                                                                                                                        << charge_lyt
                                                                                                                               .get_system_energy()
                                                                                                                        << std::
                                                                                                                               endl;

                                                                                                                    sidb_simulation_result<
                                                                                                                        Lyt>
                                                                                                                        sim_result{};
                                                                                                                    sim_result
                                                                                                                        .algorithm_name =
                                                                                                                        "ExGS";
                                                                                                                    charge_distribution_surface<
                                                                                                                        Lyt>
                                                                                                                        charge_lyt_copy{
                                                                                                                            charge_lyt};
                                                                                                                    lyts.emplace_back(
                                                                                                                        charge_lyt_copy);
                                                                                                                    sim_result
                                                                                                                        .charge_distributions =
                                                                                                                        lyts;
                                                                                                                    energy_threas =
                                                                                                                        charge_lyt
                                                                                                                            .get_system_energy();
                                                                                                                    write_sqd_sim_result<
                                                                                                                        Lyt>(
                                                                                                                        sim_result,
                                                                                                                        "/Users/jandrewniok/"
                                                                                                                        "CLionProjects/"
                                                                                                                        "fiction_fork/"
                                                                                                                        "experiments/"
                                                                                                                        "result.xml");
                                                                                                                }
                                                                                                            }
                                                                                                            counter +=
                                                                                                                1;
                                                                                                            if (counter %
                                                                                                                    100000 ==
                                                                                                                0)
                                                                                                            {
                                                                                                                std::cout
                                                                                                                    << counter
                                                                                                                    << std::
                                                                                                                           endl;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    void combining_all_26_test()
    {
        auto compareFunc =
            [](const charge_distribution_surface<Lyt>& lyt1, const charge_distribution_surface<Lyt>& lyt2)
        { return lyt1.get_system_energy() < lyt2.get_system_energy(); };

        std::cout << "combining starts: " << std::to_string(lyts_of_regions.size()) << std::endl;
        uint64_t counter_lyts = 1;
        for (const auto& lyts_region : lyts_of_regions)
        {
            counter_lyts *= lyts_region.size();
        }
        std::cout << "number enumerations: " << std::to_string(counter_lyts) << std::endl;

        auto lyt_one   = lyts_of_regions[0];
        auto lyt_two   = lyts_of_regions[1];
        auto lyt_three = lyts_of_regions[2];
        auto lyt_four  = lyts_of_regions[3];
        auto lyt_five  = lyts_of_regions[4];
        auto lyt_six   = lyts_of_regions[5];
        auto lyt_seven = lyts_of_regions[6];
        auto lyt_eight = lyts_of_regions[7];
        auto lyt_nine  = lyts_of_regions[8];
        auto lyt_ten   = lyts_of_regions[9];
        auto lyt_11    = lyts_of_regions[10];
        auto lyt_12    = lyts_of_regions[11];
        auto lyt_13    = lyts_of_regions[12];
        auto lyt_14    = lyts_of_regions[13];
        auto lyt_15    = lyts_of_regions[14];
        auto lyt_16    = lyts_of_regions[15];
        auto lyt_17    = lyts_of_regions[16];
        auto lyt_18    = lyts_of_regions[17];
        auto lyt_19    = lyts_of_regions[18];

        auto lyt_20 = lyts_of_regions[19];
        auto lyt_21 = lyts_of_regions[20];
        auto lyt_22 = lyts_of_regions[21];
        auto lyt_23 = lyts_of_regions[22];
        auto lyt_24 = lyts_of_regions[23];
        auto lyt_25 = lyts_of_regions[24];
        auto lyt_26 = lyts_of_regions[25];

        std::sort(lyt_one.begin(), lyt_one.end(), compareFunc);
        std::sort(lyt_two.begin(), lyt_two.end(), compareFunc);
        std::sort(lyt_three.begin(), lyt_three.end(), compareFunc);
        std::sort(lyt_four.begin(), lyt_four.end(), compareFunc);
        std::sort(lyt_five.begin(), lyt_five.end(), compareFunc);
        std::sort(lyt_six.begin(), lyt_six.end(), compareFunc);
        std::sort(lyt_seven.begin(), lyt_seven.end(), compareFunc);
        std::sort(lyt_eight.begin(), lyt_eight.end(), compareFunc);
        std::sort(lyt_nine.begin(), lyt_nine.end(), compareFunc);
        std::sort(lyt_ten.begin(), lyt_ten.end(), compareFunc);
        std::sort(lyt_11.begin(), lyt_11.end(), compareFunc);
        std::sort(lyt_12.begin(), lyt_12.end(), compareFunc);
        std::sort(lyt_13.begin(), lyt_13.end(), compareFunc);
        std::sort(lyt_14.begin(), lyt_14.end(), compareFunc);
        std::sort(lyt_15.begin(), lyt_15.end(), compareFunc);
        std::sort(lyt_16.begin(), lyt_16.end(), compareFunc);
        std::sort(lyt_17.begin(), lyt_17.end(), compareFunc);
        std::sort(lyt_18.begin(), lyt_18.end(), compareFunc);

        std::sort(lyt_19.begin(), lyt_19.end(), compareFunc);
        std::sort(lyt_20.begin(), lyt_20.end(), compareFunc);
        std::sort(lyt_21.begin(), lyt_21.end(), compareFunc);
        std::sort(lyt_22.begin(), lyt_22.end(), compareFunc);
        std::sort(lyt_23.begin(), lyt_23.end(), compareFunc);
        std::sort(lyt_24.begin(), lyt_24.end(), compareFunc);
        std::sort(lyt_25.begin(), lyt_25.end(), compareFunc);
        std::sort(lyt_26.begin(), lyt_26.end(), compareFunc);

        int                                           number = 5;
        std::vector<charge_distribution_surface<Lyt>> lyt_ones(
            lyt_one.begin(), lyt_one.begin() + std::min(number, static_cast<int>(lyt_one.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_twos(
            lyt_two.begin(), lyt_two.begin() + std::min(number, static_cast<int>(lyt_two.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_threes(
            lyt_three.begin(), lyt_three.begin() + std::min(number, static_cast<int>(lyt_three.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_fours(
            lyt_four.begin(), lyt_four.begin() + std::min(number, static_cast<int>(lyt_four.size())));

        std::vector<charge_distribution_surface<Lyt>> lyt_fives(
            lyt_five.begin(), lyt_five.begin() + std::min(number, static_cast<int>(lyt_five.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_sixs(
            lyt_six.begin(), lyt_six.begin() + std::min(number, static_cast<int>(lyt_six.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_sevens(
            lyt_seven.begin(), lyt_seven.begin() + std::min(number, static_cast<int>(lyt_seven.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_eights(
            lyt_eight.begin(), lyt_eight.begin() + std::min(number, static_cast<int>(lyt_eight.size())));

        std::vector<charge_distribution_surface<Lyt>> lyt_nines(
            lyt_nine.begin(), lyt_nine.begin() + std::min(number, static_cast<int>(lyt_nine.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_tens(
            lyt_ten.begin(), lyt_ten.begin() + std::min(number, static_cast<int>(lyt_ten.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_11s(
            lyt_11.begin(), lyt_11.begin() + std::min(number, static_cast<int>(lyt_11.size())));

        std::vector<charge_distribution_surface<Lyt>> lyt_12s(
            lyt_12.begin(), lyt_12.begin() + std::min(number, static_cast<int>(lyt_12.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_13s(
            lyt_13.begin(), lyt_13.begin() + std::min(number, static_cast<int>(lyt_13.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_14s(
            lyt_14.begin(), lyt_14.begin() + std::min(number, static_cast<int>(lyt_14.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_15s(
            lyt_15.begin(), lyt_15.begin() + std::min(number, static_cast<int>(lyt_15.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_16s(
            lyt_16.begin(), lyt_16.begin() + std::min(number, static_cast<int>(lyt_16.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_17s(
            lyt_17.begin(), lyt_17.begin() + std::min(number, static_cast<int>(lyt_17.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_18s(
            lyt_18.begin(), lyt_18.begin() + std::min(number, static_cast<int>(lyt_18.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_19s(
            lyt_19.begin(), lyt_19.begin() + std::min(number, static_cast<int>(lyt_19.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_20s(
            lyt_20.begin(), lyt_20.begin() + std::min(number, static_cast<int>(lyt_20.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_21s(
            lyt_21.begin(), lyt_21.begin() + std::min(number, static_cast<int>(lyt_21.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_22s(
            lyt_22.begin(), lyt_22.begin() + std::min(number, static_cast<int>(lyt_22.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_23s(
            lyt_23.begin(), lyt_23.begin() + std::min(number, static_cast<int>(lyt_23.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_24s(
            lyt_24.begin(), lyt_24.begin() + std::min(number, static_cast<int>(lyt_24.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_25s(
            lyt_25.begin(), lyt_25.begin() + std::min(number, static_cast<int>(lyt_25.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_26s(
            lyt_26.begin(), lyt_26.begin() + std::min(number, static_cast<int>(lyt_26.size())));

        charge_distribution_surface<Lyt> charge_lyt{layout};
        uint64_t                         counter = 0;
        std::vector<double>              valid_energies{};
        double                           energy_threas = 1000;
        for (auto i = 0u; i < lyt_one.size(); i++)
        {
            for (auto j = 0u; j < lyt_two.size(); j++)
            {
                for (auto three = 0u; three < lyt_three.size(); three++)
                {
                    for (auto four = 0u; four < lyt_four.size(); four++)
                    {
                        for (auto five = 0u; five < lyt_five.size(); five++)
                        {
                            for (const auto& lyts_six : lyt_six)
                            {
                                for (const auto& lyts_seven : lyt_seven)
                                {

                                    for (auto eight = 0u; eight < lyt_eight.size(); eight++)
                                    {

                                        for (auto nine = 0u; nine < lyt_nine.size(); nine++)
                                        {

                                            for (auto t = 0u; t < lyt_ten.size(); t++)
                                            {
                                                for (auto l = 0u; l < lyt_11.size(); l++)
                                                {
                                                    for (const auto& lyts_12 : lyt_12)
                                                    {

                                                        for (const auto& lyts_13 : lyt_13)
                                                        {

                                                            for (const auto& lyts_14 : lyt_14)
                                                            {
                                                                for (const auto& lyts_15 : lyt_15)
                                                                {
                                                                    for (const auto& lyts_16 : lyt_16)
                                                                    {
                                                                        for (const auto& lyts_17 : lyt_17)
                                                                        {
                                                                            for (const auto& lyts_18 : lyt_18)
                                                                            {
                                                                                for (const auto& lyts_19 : lyt_19)
                                                                                {
                                                                                    for (const auto& lyts_20 : lyt_20)
                                                                                    {
                                                                                        for (const auto& lyts_21 :
                                                                                             lyt_21)
                                                                                        {
                                                                                            for (const auto& lyts_22 :
                                                                                                 lyt_22)
                                                                                            {
                                                                                                for (const auto&
                                                                                                         lyts_23 :
                                                                                                     lyt_23)
                                                                                                {
                                                                                                    for (const auto&
                                                                                                             lyts_24 :
                                                                                                         lyt_24)
                                                                                                    {
                                                                                                        for (
                                                                                                            const auto&
                                                                                                                lyts_25 :
                                                                                                            lyt_25)
                                                                                                        {
                                                                                                            for (
                                                                                                                const auto&
                                                                                                                    lyts_26 :
                                                                                                                lyt_26)
                                                                                                            {
                                                                                                                lyt_one[i]
                                                                                                                    .foreach_cell(
                                                                                                                        [this,
                                                                                                                         &charge_lyt,
                                                                                                                         &lyt_one,
                                                                                                                         &i](
                                                                                                                            const auto&
                                                                                                                                c1)
                                                                                                                        {
                                                                                                                            charge_lyt
                                                                                                                                .assign_charge_state(
                                                                                                                                    c1,
                                                                                                                                    lyt_one[i]
                                                                                                                                        .get_charge_state(
                                                                                                                                            c1),
                                                                                                                                    false);
                                                                                                                        });
                                                                                                                lyt_two[j]
                                                                                                                    .foreach_cell(
                                                                                                                        [this,
                                                                                                                         &charge_lyt,
                                                                                                                         &lyt_two,
                                                                                                                         &j](
                                                                                                                            const auto&
                                                                                                                                c1)
                                                                                                                        {
                                                                                                                            charge_lyt
                                                                                                                                .assign_charge_state(
                                                                                                                                    c1,
                                                                                                                                    lyt_two[j]
                                                                                                                                        .get_charge_state(
                                                                                                                                            c1),
                                                                                                                                    false);
                                                                                                                        });
                                                                                                                lyt_three[three]
                                                                                                                    .foreach_cell(
                                                                                                                        [this,
                                                                                                                         &charge_lyt,
                                                                                                                         &lyt_three,
                                                                                                                         &three](
                                                                                                                            const auto&
                                                                                                                                c1)
                                                                                                                        {
                                                                                                                            charge_lyt
                                                                                                                                .assign_charge_state(
                                                                                                                                    c1,
                                                                                                                                    lyt_three[three]
                                                                                                                                        .get_charge_state(
                                                                                                                                            c1),
                                                                                                                                    false);
                                                                                                                        });
                                                                                                                lyt_four[four]
                                                                                                                    .foreach_cell(
                                                                                                                        [this,
                                                                                                                         &charge_lyt,
                                                                                                                         &lyt_four,
                                                                                                                         &four](
                                                                                                                            const auto&
                                                                                                                                c1)
                                                                                                                        {
                                                                                                                            charge_lyt
                                                                                                                                .assign_charge_state(
                                                                                                                                    c1,
                                                                                                                                    lyt_four[four]
                                                                                                                                        .get_charge_state(
                                                                                                                                            c1),
                                                                                                                                    false);
                                                                                                                        });
                                                                                                                lyt_five[five]
                                                                                                                    .foreach_cell(
                                                                                                                        [this,
                                                                                                                         &charge_lyt,
                                                                                                                         &lyt_five,
                                                                                                                         &five](
                                                                                                                            const auto&
                                                                                                                                c1)
                                                                                                                        {
                                                                                                                            charge_lyt
                                                                                                                                .assign_charge_state(
                                                                                                                                    c1,
                                                                                                                                    lyt_five[five]
                                                                                                                                        .get_charge_state(
                                                                                                                                            c1),
                                                                                                                                    false);
                                                                                                                        });
                                                                                                                lyts_six.foreach_cell(
                                                                                                                    [this,
                                                                                                                     &charge_lyt,
                                                                                                                     &lyts_six](
                                                                                                                        const auto&
                                                                                                                            c1)
                                                                                                                    {
                                                                                                                        charge_lyt
                                                                                                                            .assign_charge_state(
                                                                                                                                c1,
                                                                                                                                lyts_six
                                                                                                                                    .get_charge_state(
                                                                                                                                        c1),
                                                                                                                                false);
                                                                                                                    });
                                                                                                                lyts_seven
                                                                                                                    .foreach_cell(
                                                                                                                        [this,
                                                                                                                         &charge_lyt,
                                                                                                                         &lyts_seven](
                                                                                                                            const auto&
                                                                                                                                c1)
                                                                                                                        {
                                                                                                                            charge_lyt
                                                                                                                                .assign_charge_state(
                                                                                                                                    c1,
                                                                                                                                    lyts_seven
                                                                                                                                        .get_charge_state(
                                                                                                                                            c1),
                                                                                                                                    false);
                                                                                                                        });
                                                                                                                lyt_eight[eight]
                                                                                                                    .foreach_cell(
                                                                                                                        [this,
                                                                                                                         &charge_lyt,
                                                                                                                         &lyt_eight,
                                                                                                                         &eight](
                                                                                                                            const auto&
                                                                                                                                c1)
                                                                                                                        {
                                                                                                                            charge_lyt
                                                                                                                                .assign_charge_state(
                                                                                                                                    c1,
                                                                                                                                    lyt_eight[eight]
                                                                                                                                        .get_charge_state(
                                                                                                                                            c1),
                                                                                                                                    false);
                                                                                                                        });
                                                                                                                lyt_nine[nine]
                                                                                                                    .foreach_cell(
                                                                                                                        [this,
                                                                                                                         &charge_lyt,
                                                                                                                         &lyt_nine,
                                                                                                                         &nine](
                                                                                                                            const auto&
                                                                                                                                c1)
                                                                                                                        {
                                                                                                                            charge_lyt
                                                                                                                                .assign_charge_state(
                                                                                                                                    c1,
                                                                                                                                    lyt_nine[nine]
                                                                                                                                        .get_charge_state(
                                                                                                                                            c1),
                                                                                                                                    false);
                                                                                                                        });
                                                                                                                lyt_ten[t]
                                                                                                                    .foreach_cell(
                                                                                                                        [this,
                                                                                                                         &charge_lyt,
                                                                                                                         &lyt_ten,
                                                                                                                         &t](
                                                                                                                            const auto&
                                                                                                                                c1)
                                                                                                                        {
                                                                                                                            charge_lyt
                                                                                                                                .assign_charge_state(
                                                                                                                                    c1,
                                                                                                                                    lyt_ten[t]
                                                                                                                                        .get_charge_state(
                                                                                                                                            c1),
                                                                                                                                    false);
                                                                                                                        });
                                                                                                                lyt_11[l]
                                                                                                                    .foreach_cell(
                                                                                                                        [this,
                                                                                                                         &charge_lyt,
                                                                                                                         &lyt_11,
                                                                                                                         &l](
                                                                                                                            const auto&
                                                                                                                                c1)
                                                                                                                        {
                                                                                                                            charge_lyt
                                                                                                                                .assign_charge_state(
                                                                                                                                    c1,
                                                                                                                                    lyt_11[l]
                                                                                                                                        .get_charge_state(
                                                                                                                                            c1),
                                                                                                                                    false);
                                                                                                                        });
                                                                                                                lyts_12.foreach_cell(
                                                                                                                    [this,
                                                                                                                     &charge_lyt,
                                                                                                                     &lyts_12](
                                                                                                                        const auto&
                                                                                                                            c1)
                                                                                                                    {
                                                                                                                        charge_lyt
                                                                                                                            .assign_charge_state(
                                                                                                                                c1,
                                                                                                                                lyts_12
                                                                                                                                    .get_charge_state(
                                                                                                                                        c1),
                                                                                                                                false);
                                                                                                                    });
                                                                                                                lyts_13.foreach_cell(
                                                                                                                    [this,
                                                                                                                     &charge_lyt,
                                                                                                                     &lyts_13](
                                                                                                                        const auto&
                                                                                                                            c1)
                                                                                                                    {
                                                                                                                        charge_lyt
                                                                                                                            .assign_charge_state(
                                                                                                                                c1,
                                                                                                                                lyts_13
                                                                                                                                    .get_charge_state(
                                                                                                                                        c1),
                                                                                                                                false);
                                                                                                                    });
                                                                                                                lyts_14.foreach_cell(
                                                                                                                    [this,
                                                                                                                     &charge_lyt,
                                                                                                                     &lyts_14](
                                                                                                                        const auto&
                                                                                                                            c1)
                                                                                                                    {
                                                                                                                        charge_lyt
                                                                                                                            .assign_charge_state(
                                                                                                                                c1,
                                                                                                                                lyts_14
                                                                                                                                    .get_charge_state(
                                                                                                                                        c1),
                                                                                                                                false);
                                                                                                                    });
                                                                                                                lyts_15.foreach_cell(
                                                                                                                    [this,
                                                                                                                     &charge_lyt,
                                                                                                                     &lyts_15](
                                                                                                                        const auto&
                                                                                                                            c1)
                                                                                                                    {
                                                                                                                        charge_lyt
                                                                                                                            .assign_charge_state(
                                                                                                                                c1,
                                                                                                                                lyts_15
                                                                                                                                    .get_charge_state(
                                                                                                                                        c1),
                                                                                                                                false);
                                                                                                                    });
                                                                                                                lyts_16.foreach_cell(
                                                                                                                    [this,
                                                                                                                     &charge_lyt,
                                                                                                                     &lyts_16](
                                                                                                                        const auto&
                                                                                                                            c1)
                                                                                                                    {
                                                                                                                        charge_lyt
                                                                                                                            .assign_charge_state(
                                                                                                                                c1,
                                                                                                                                lyts_16
                                                                                                                                    .get_charge_state(
                                                                                                                                        c1),
                                                                                                                                false);
                                                                                                                    });
                                                                                                                lyts_17.foreach_cell(
                                                                                                                    [this,
                                                                                                                     &charge_lyt,
                                                                                                                     &lyts_17](
                                                                                                                        const auto&
                                                                                                                            c1)
                                                                                                                    {
                                                                                                                        charge_lyt
                                                                                                                            .assign_charge_state(
                                                                                                                                c1,
                                                                                                                                lyts_17
                                                                                                                                    .get_charge_state(
                                                                                                                                        c1),
                                                                                                                                false);
                                                                                                                    });
                                                                                                                lyts_18.foreach_cell(
                                                                                                                    [this,
                                                                                                                     &charge_lyt,
                                                                                                                     &lyts_18](
                                                                                                                        const auto&
                                                                                                                            c1)
                                                                                                                    {
                                                                                                                        charge_lyt
                                                                                                                            .assign_charge_state(
                                                                                                                                c1,
                                                                                                                                lyts_18
                                                                                                                                    .get_charge_state(
                                                                                                                                        c1),
                                                                                                                                false);
                                                                                                                    });
                                                                                                                lyts_19.foreach_cell(
                                                                                                                    [this,
                                                                                                                     &charge_lyt,
                                                                                                                     &lyts_19](
                                                                                                                        const auto&
                                                                                                                            c1)
                                                                                                                    {
                                                                                                                        charge_lyt
                                                                                                                            .assign_charge_state(
                                                                                                                                c1,
                                                                                                                                lyts_19
                                                                                                                                    .get_charge_state(
                                                                                                                                        c1),
                                                                                                                                false);
                                                                                                                    });
                                                                                                                lyts_20.foreach_cell(
                                                                                                                    [this,
                                                                                                                     &charge_lyt,
                                                                                                                     &lyts_20](
                                                                                                                        const auto&
                                                                                                                            c1)
                                                                                                                    {
                                                                                                                        charge_lyt
                                                                                                                            .assign_charge_state(
                                                                                                                                c1,
                                                                                                                                lyts_20
                                                                                                                                    .get_charge_state(
                                                                                                                                        c1),
                                                                                                                                false);
                                                                                                                    });
                                                                                                                lyts_21.foreach_cell(
                                                                                                                    [this,
                                                                                                                     &charge_lyt,
                                                                                                                     &lyts_21](
                                                                                                                        const auto&
                                                                                                                            c1)
                                                                                                                    {
                                                                                                                        charge_lyt
                                                                                                                            .assign_charge_state(
                                                                                                                                c1,
                                                                                                                                lyts_21
                                                                                                                                    .get_charge_state(
                                                                                                                                        c1),
                                                                                                                                false);
                                                                                                                    });
                                                                                                                lyts_22.foreach_cell(
                                                                                                                    [this,
                                                                                                                     &charge_lyt,
                                                                                                                     &lyts_22](
                                                                                                                        const auto&
                                                                                                                            c1)
                                                                                                                    {
                                                                                                                        charge_lyt
                                                                                                                            .assign_charge_state(
                                                                                                                                c1,
                                                                                                                                lyts_22
                                                                                                                                    .get_charge_state(
                                                                                                                                        c1),
                                                                                                                                false);
                                                                                                                    });
                                                                                                                lyts_23.foreach_cell(
                                                                                                                    [this,
                                                                                                                     &charge_lyt,
                                                                                                                     &lyts_23](
                                                                                                                        const auto&
                                                                                                                            c1)
                                                                                                                    {
                                                                                                                        charge_lyt
                                                                                                                            .assign_charge_state(
                                                                                                                                c1,
                                                                                                                                lyts_23
                                                                                                                                    .get_charge_state(
                                                                                                                                        c1),
                                                                                                                                false);
                                                                                                                    });
                                                                                                                lyts_24.foreach_cell(
                                                                                                                    [this,
                                                                                                                     &charge_lyt,
                                                                                                                     &lyts_24](
                                                                                                                        const auto&
                                                                                                                            c1)
                                                                                                                    {
                                                                                                                        charge_lyt
                                                                                                                            .assign_charge_state(
                                                                                                                                c1,
                                                                                                                                lyts_24
                                                                                                                                    .get_charge_state(
                                                                                                                                        c1),
                                                                                                                                false);
                                                                                                                    });
                                                                                                                lyts_25.foreach_cell(
                                                                                                                    [this,
                                                                                                                     &charge_lyt,
                                                                                                                     &lyts_25](
                                                                                                                        const auto&
                                                                                                                            c1)
                                                                                                                    {
                                                                                                                        charge_lyt
                                                                                                                            .assign_charge_state(
                                                                                                                                c1,
                                                                                                                                lyts_25
                                                                                                                                    .get_charge_state(
                                                                                                                                        c1),
                                                                                                                                false);
                                                                                                                    });
                                                                                                                lyts_26.foreach_cell(
                                                                                                                    [this,
                                                                                                                     &charge_lyt,
                                                                                                                     &lyts_26](
                                                                                                                        const auto&
                                                                                                                            c1)
                                                                                                                    {
                                                                                                                        charge_lyt
                                                                                                                            .assign_charge_state(
                                                                                                                                c1,
                                                                                                                                lyts_26
                                                                                                                                    .get_charge_state(
                                                                                                                                        c1),
                                                                                                                                false);
                                                                                                                    });
                                                                                                                charge_lyt
                                                                                                                    .update_after_charge_change();
                                                                                                                if (charge_lyt
                                                                                                                        .is_physically_valid())
                                                                                                                {
                                                                                                                    if (charge_lyt
                                                                                                                            .get_system_energy() <
                                                                                                                        energy_threas)
                                                                                                                    {
                                                                                                                        std::vector<
                                                                                                                            charge_distribution_surface<
                                                                                                                                Lyt>>
                                                                                                                            lyts{};
                                                                                                                        std::cout
                                                                                                                            << charge_lyt
                                                                                                                                   .get_system_energy()
                                                                                                                            << std::
                                                                                                                                   endl;

                                                                                                                        sidb_simulation_result<
                                                                                                                            Lyt>
                                                                                                                            sim_result{};
                                                                                                                        sim_result
                                                                                                                            .algorithm_name =
                                                                                                                            "ExGS";
                                                                                                                        charge_distribution_surface<
                                                                                                                            Lyt>
                                                                                                                            charge_lyt_copy{
                                                                                                                                charge_lyt};
                                                                                                                        lyts.emplace_back(
                                                                                                                            charge_lyt_copy);
                                                                                                                        sim_result
                                                                                                                            .charge_distributions =
                                                                                                                            lyts;
                                                                                                                        energy_threas =
                                                                                                                            charge_lyt
                                                                                                                                .get_system_energy();
                                                                                                                        write_sqd_sim_result<
                                                                                                                            Lyt>(
                                                                                                                            sim_result,
                                                                                                                            "/Users/jandrewniok/"
                                                                                                                            "CLionProjects/"
                                                                                                                            "fiction_fork/"
                                                                                                                            "experiments/"
                                                                                                                            "result.xml");
                                                                                                                    }
                                                                                                                }
                                                                                                                counter +=
                                                                                                                    1;
                                                                                                                if (counter %
                                                                                                                        100000 ==
                                                                                                                    0)
                                                                                                                {
                                                                                                                    std::cout
                                                                                                                        << counter
                                                                                                                        << std::
                                                                                                                               endl;
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    void combining_all_19_test()
    {
        auto compareFunc =
            [](const charge_distribution_surface<Lyt>& lyt1, const charge_distribution_surface<Lyt>& lyt2)
        { return lyt1.get_system_energy() < lyt2.get_system_energy(); };

        std::cout << "combining starts: " << std::to_string(lyts_of_regions.size()) << std::endl;
        uint64_t counter_lyts = 1;
        for (const auto& lyts_region : lyts_of_regions)
        {
            counter_lyts *= lyts_region.size();
        }
        std::cout << "number enumerations: " << std::to_string(counter_lyts) << std::endl;

        auto lyt_one   = lyts_of_regions[0];
        auto lyt_two   = lyts_of_regions[1];
        auto lyt_three = lyts_of_regions[2];
        auto lyt_four  = lyts_of_regions[3];
        auto lyt_five  = lyts_of_regions[4];
        auto lyt_six   = lyts_of_regions[5];
        auto lyt_seven = lyts_of_regions[6];
        auto lyt_eight = lyts_of_regions[7];
        auto lyt_nine  = lyts_of_regions[8];
        auto lyt_ten   = lyts_of_regions[9];
        auto lyt_11    = lyts_of_regions[10];
        auto lyt_12    = lyts_of_regions[11];
        auto lyt_13    = lyts_of_regions[12];
        auto lyt_14    = lyts_of_regions[13];
        auto lyt_15    = lyts_of_regions[14];
        auto lyt_16    = lyts_of_regions[15];
        auto lyt_17    = lyts_of_regions[16];
        auto lyt_18    = lyts_of_regions[17];
        auto lyt_19    = lyts_of_regions[18];

        std::sort(lyt_one.begin(), lyt_one.end(), compareFunc);
        std::sort(lyt_two.begin(), lyt_two.end(), compareFunc);
        std::sort(lyt_three.begin(), lyt_three.end(), compareFunc);
        std::sort(lyt_four.begin(), lyt_four.end(), compareFunc);
        std::sort(lyt_five.begin(), lyt_five.end(), compareFunc);
        std::sort(lyt_six.begin(), lyt_six.end(), compareFunc);
        std::sort(lyt_seven.begin(), lyt_seven.end(), compareFunc);
        std::sort(lyt_eight.begin(), lyt_eight.end(), compareFunc);
        std::sort(lyt_nine.begin(), lyt_nine.end(), compareFunc);
        std::sort(lyt_ten.begin(), lyt_ten.end(), compareFunc);
        std::sort(lyt_11.begin(), lyt_11.end(), compareFunc);
        std::sort(lyt_12.begin(), lyt_12.end(), compareFunc);
        std::sort(lyt_13.begin(), lyt_13.end(), compareFunc);
        std::sort(lyt_14.begin(), lyt_14.end(), compareFunc);
        std::sort(lyt_15.begin(), lyt_15.end(), compareFunc);
        std::sort(lyt_16.begin(), lyt_16.end(), compareFunc);
        std::sort(lyt_17.begin(), lyt_17.end(), compareFunc);
        std::sort(lyt_18.begin(), lyt_18.end(), compareFunc);
        std::sort(lyt_19.begin(), lyt_19.end(), compareFunc);

        int                                           number = 5;
        std::vector<charge_distribution_surface<Lyt>> lyt_ones(
            lyt_one.begin(), lyt_one.begin() + std::min(number, static_cast<int>(lyt_one.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_twos(
            lyt_two.begin(), lyt_two.begin() + std::min(number, static_cast<int>(lyt_two.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_threes(
            lyt_three.begin(), lyt_three.begin() + std::min(number, static_cast<int>(lyt_three.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_fours(
            lyt_four.begin(), lyt_four.begin() + std::min(number, static_cast<int>(lyt_four.size())));

        std::vector<charge_distribution_surface<Lyt>> lyt_fives(
            lyt_five.begin(), lyt_five.begin() + std::min(number, static_cast<int>(lyt_five.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_sixs(
            lyt_six.begin(), lyt_six.begin() + std::min(number, static_cast<int>(lyt_six.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_sevens(
            lyt_seven.begin(), lyt_seven.begin() + std::min(number, static_cast<int>(lyt_seven.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_eights(
            lyt_eight.begin(), lyt_eight.begin() + std::min(number, static_cast<int>(lyt_eight.size())));

        std::vector<charge_distribution_surface<Lyt>> lyt_nines(
            lyt_nine.begin(), lyt_nine.begin() + std::min(number, static_cast<int>(lyt_nine.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_tens(
            lyt_ten.begin(), lyt_ten.begin() + std::min(number, static_cast<int>(lyt_ten.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_11s(
            lyt_11.begin(), lyt_11.begin() + std::min(number, static_cast<int>(lyt_11.size())));

        std::vector<charge_distribution_surface<Lyt>> lyt_12s(
            lyt_12.begin(), lyt_12.begin() + std::min(number, static_cast<int>(lyt_12.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_13s(
            lyt_13.begin(), lyt_13.begin() + std::min(number, static_cast<int>(lyt_13.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_14s(
            lyt_14.begin(), lyt_14.begin() + std::min(number, static_cast<int>(lyt_14.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_15s(
            lyt_15.begin(), lyt_15.begin() + std::min(number, static_cast<int>(lyt_15.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_16s(
            lyt_16.begin(), lyt_16.begin() + std::min(number, static_cast<int>(lyt_16.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_17s(
            lyt_17.begin(), lyt_17.begin() + std::min(number, static_cast<int>(lyt_17.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_18s(
            lyt_18.begin(), lyt_18.begin() + std::min(number, static_cast<int>(lyt_18.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_19s(
            lyt_19.begin(), lyt_19.begin() + std::min(number, static_cast<int>(lyt_19.size())));

        charge_distribution_surface<Lyt> charge_lyt{layout};
        uint64_t                         counter = 0;
        std::vector<double>              valid_energies{};
        double                           energy_threas = 1000;
        for (auto i = 0u; i < lyt_one.size(); i++)
        {
            for (auto j = 0u; j < lyt_two.size(); j++)
            {
                for (auto three = 0u; three < lyt_three.size(); three++)
                {
                    for (auto four = 0u; four < lyt_four.size(); four++)
                    {
                        for (auto five = 0u; five < lyt_five.size(); five++)
                        {
                            for (const auto& lyts_six : lyt_six)
                            {
                                for (const auto& lyts_seven : lyt_seven)
                                {

                                    for (auto eight = 0u; eight < lyt_eight.size(); eight++)
                                    {

                                        for (auto nine = 0u; nine < lyt_nine.size(); nine++)
                                        {

                                            for (auto t = 0u; t < lyt_ten.size(); t++)
                                            {

                                                for (auto l = 0u; l < lyt_11.size(); l++)
                                                {
                                                    for (const auto& lyts_12 : lyt_12)
                                                    {

                                                        for (const auto& lyts_13 : lyt_13)
                                                        {

                                                            for (const auto& lyts_14 : lyt_14)
                                                            {
                                                                for (const auto& lyts_15 : lyt_15)
                                                                {
                                                                    for (const auto& lyts_16 : lyt_16)
                                                                    {
                                                                        for (const auto& lyts_17 : lyt_17)
                                                                        {
                                                                            for (const auto& lyts_18 : lyt_18)
                                                                            {
                                                                                for (const auto& lyts_19 : lyt_19)
                                                                                {
                                                                                    lyt_one[i].foreach_cell(
                                                                                        [this, &charge_lyt, &lyt_one,
                                                                                         &i](const auto& c1) {
                                                                                            charge_lyt
                                                                                                .assign_charge_state(
                                                                                                    c1,
                                                                                                    lyt_one[i]
                                                                                                        .get_charge_state(
                                                                                                            c1),
                                                                                                    false);
                                                                                        });
                                                                                    lyt_two[j].foreach_cell(
                                                                                        [this, &charge_lyt, &lyt_two,
                                                                                         &j](const auto& c1) {
                                                                                            charge_lyt
                                                                                                .assign_charge_state(
                                                                                                    c1,
                                                                                                    lyt_two[j]
                                                                                                        .get_charge_state(
                                                                                                            c1),
                                                                                                    false);
                                                                                        });
                                                                                    lyt_three[three].foreach_cell(
                                                                                        [this, &charge_lyt, &lyt_three,
                                                                                         &three](const auto& c1) {
                                                                                            charge_lyt
                                                                                                .assign_charge_state(
                                                                                                    c1,
                                                                                                    lyt_three[three]
                                                                                                        .get_charge_state(
                                                                                                            c1),
                                                                                                    false);
                                                                                        });
                                                                                    lyt_four[four].foreach_cell(
                                                                                        [this, &charge_lyt, &lyt_four,
                                                                                         &four](const auto& c1) {
                                                                                            charge_lyt
                                                                                                .assign_charge_state(
                                                                                                    c1,
                                                                                                    lyt_four[four]
                                                                                                        .get_charge_state(
                                                                                                            c1),
                                                                                                    false);
                                                                                        });
                                                                                    lyt_five[five].foreach_cell(
                                                                                        [this, &charge_lyt, &lyt_five,
                                                                                         &five](const auto& c1) {
                                                                                            charge_lyt
                                                                                                .assign_charge_state(
                                                                                                    c1,
                                                                                                    lyt_five[five]
                                                                                                        .get_charge_state(
                                                                                                            c1),
                                                                                                    false);
                                                                                        });
                                                                                    lyts_six.foreach_cell(
                                                                                        [this, &charge_lyt,
                                                                                         &lyts_six](const auto& c1) {
                                                                                            charge_lyt
                                                                                                .assign_charge_state(
                                                                                                    c1,
                                                                                                    lyts_six
                                                                                                        .get_charge_state(
                                                                                                            c1),
                                                                                                    false);
                                                                                        });
                                                                                    lyts_seven.foreach_cell(
                                                                                        [this, &charge_lyt,
                                                                                         &lyts_seven](const auto& c1) {
                                                                                            charge_lyt
                                                                                                .assign_charge_state(
                                                                                                    c1,
                                                                                                    lyts_seven
                                                                                                        .get_charge_state(
                                                                                                            c1),
                                                                                                    false);
                                                                                        });
                                                                                    lyt_eight[eight].foreach_cell(
                                                                                        [this, &charge_lyt, &lyt_eight,
                                                                                         &eight](const auto& c1) {
                                                                                            charge_lyt
                                                                                                .assign_charge_state(
                                                                                                    c1,
                                                                                                    lyt_eight[eight]
                                                                                                        .get_charge_state(
                                                                                                            c1),
                                                                                                    false);
                                                                                        });
                                                                                    lyt_nine[nine].foreach_cell(
                                                                                        [this, &charge_lyt, &lyt_nine,
                                                                                         &nine](const auto& c1) {
                                                                                            charge_lyt
                                                                                                .assign_charge_state(
                                                                                                    c1,
                                                                                                    lyt_nine[nine]
                                                                                                        .get_charge_state(
                                                                                                            c1),
                                                                                                    false);
                                                                                        });
                                                                                    lyt_ten[t].foreach_cell(
                                                                                        [this, &charge_lyt, &lyt_ten,
                                                                                         &t](const auto& c1) {
                                                                                            charge_lyt
                                                                                                .assign_charge_state(
                                                                                                    c1,
                                                                                                    lyt_ten[t]
                                                                                                        .get_charge_state(
                                                                                                            c1),
                                                                                                    false);
                                                                                        });
                                                                                    lyt_11[l].foreach_cell(
                                                                                        [this, &charge_lyt, &lyt_11,
                                                                                         &l](const auto& c1) {
                                                                                            charge_lyt
                                                                                                .assign_charge_state(
                                                                                                    c1,
                                                                                                    lyt_11[l]
                                                                                                        .get_charge_state(
                                                                                                            c1),
                                                                                                    false);
                                                                                        });
                                                                                    lyts_12.foreach_cell(
                                                                                        [this, &charge_lyt,
                                                                                         &lyts_12](const auto& c1) {
                                                                                            charge_lyt
                                                                                                .assign_charge_state(
                                                                                                    c1,
                                                                                                    lyts_12
                                                                                                        .get_charge_state(
                                                                                                            c1),
                                                                                                    false);
                                                                                        });
                                                                                    lyts_13.foreach_cell(
                                                                                        [this, &charge_lyt,
                                                                                         &lyts_13](const auto& c1) {
                                                                                            charge_lyt
                                                                                                .assign_charge_state(
                                                                                                    c1,
                                                                                                    lyts_13
                                                                                                        .get_charge_state(
                                                                                                            c1),
                                                                                                    false);
                                                                                        });
                                                                                    lyts_14.foreach_cell(
                                                                                        [this, &charge_lyt,
                                                                                         &lyts_14](const auto& c1) {
                                                                                            charge_lyt
                                                                                                .assign_charge_state(
                                                                                                    c1,
                                                                                                    lyts_14
                                                                                                        .get_charge_state(
                                                                                                            c1),
                                                                                                    false);
                                                                                        });
                                                                                    lyts_15.foreach_cell(
                                                                                        [this, &charge_lyt,
                                                                                         &lyts_15](const auto& c1) {
                                                                                            charge_lyt
                                                                                                .assign_charge_state(
                                                                                                    c1,
                                                                                                    lyts_15
                                                                                                        .get_charge_state(
                                                                                                            c1),
                                                                                                    false);
                                                                                        });
                                                                                    lyts_16.foreach_cell(
                                                                                        [this, &charge_lyt,
                                                                                         &lyts_16](const auto& c1) {
                                                                                            charge_lyt
                                                                                                .assign_charge_state(
                                                                                                    c1,
                                                                                                    lyts_16
                                                                                                        .get_charge_state(
                                                                                                            c1),
                                                                                                    false);
                                                                                        });
                                                                                    lyts_17.foreach_cell(
                                                                                        [this, &charge_lyt,
                                                                                         &lyts_17](const auto& c1) {
                                                                                            charge_lyt
                                                                                                .assign_charge_state(
                                                                                                    c1,
                                                                                                    lyts_17
                                                                                                        .get_charge_state(
                                                                                                            c1),
                                                                                                    false);
                                                                                        });
                                                                                    lyts_18.foreach_cell(
                                                                                        [this, &charge_lyt,
                                                                                         &lyts_18](const auto& c1) {
                                                                                            charge_lyt
                                                                                                .assign_charge_state(
                                                                                                    c1,
                                                                                                    lyts_18
                                                                                                        .get_charge_state(
                                                                                                            c1),
                                                                                                    false);
                                                                                        });
                                                                                    lyts_19.foreach_cell(
                                                                                        [this, &charge_lyt,
                                                                                         &lyts_19](const auto& c1) {
                                                                                            charge_lyt
                                                                                                .assign_charge_state(
                                                                                                    c1,
                                                                                                    lyts_19
                                                                                                        .get_charge_state(
                                                                                                            c1),
                                                                                                    false);
                                                                                        });
                                                                                    charge_lyt
                                                                                        .update_after_charge_change();
                                                                                    if (charge_lyt
                                                                                            .is_physically_valid())
                                                                                    {
                                                                                        if (charge_lyt
                                                                                                .get_system_energy() <
                                                                                            energy_threas)
                                                                                        {
                                                                                            std::vector<
                                                                                                charge_distribution_surface<
                                                                                                    Lyt>>
                                                                                                lyts{};
                                                                                            std::cout
                                                                                                << charge_lyt
                                                                                                       .get_system_energy()
                                                                                                << std::endl;

                                                                                            sidb_simulation_result<Lyt>
                                                                                                sim_result{};
                                                                                            sim_result.algorithm_name =
                                                                                                "ExGS";
                                                                                            charge_distribution_surface<
                                                                                                Lyt>
                                                                                                charge_lyt_copy{
                                                                                                    charge_lyt};
                                                                                            lyts.emplace_back(
                                                                                                charge_lyt_copy);
                                                                                            sim_result
                                                                                                .charge_distributions =
                                                                                                lyts;
                                                                                            energy_threas =
                                                                                                charge_lyt
                                                                                                    .get_system_energy();
                                                                                            write_sqd_sim_result<Lyt>(
                                                                                                sim_result, "/Users/"
                                                                                                            "jandrewnio"
                                                                                                            "k/"
                                                                                                            "CLionProje"
                                                                                                            "cts/"
                                                                                                            "fiction_"
                                                                                                            "fork/"
                                                                                                            "experiment"
                                                                                                            "s/"
                                                                                                            "result."
                                                                                                            "xml");
                                                                                        }
                                                                                    }
                                                                                    counter += 1;
                                                                                    if (counter % 100000 == 0)
                                                                                    {
                                                                                        std::cout << counter
                                                                                                  << std::endl;
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    void combining_all_29_test()
    {
        auto compareFunc =
            [](const charge_distribution_surface<Lyt>& lyt1, const charge_distribution_surface<Lyt>& lyt2)
        { return lyt1.get_system_energy() < lyt2.get_system_energy(); };

        std::cout << "combining starts: " << std::to_string(lyts_of_regions.size()) << std::endl;
        uint64_t counter_lyts = 1;
        for (const auto& lyts_region : lyts_of_regions)
        {
            counter_lyts *= lyts_region.size();
        }
        std::cout << "number enumerations: " << std::to_string(counter_lyts) << std::endl;

        auto lyt_one   = lyts_of_regions[0];
        auto lyt_two   = lyts_of_regions[1];
        auto lyt_three = lyts_of_regions[2];
        auto lyt_four  = lyts_of_regions[3];
        auto lyt_five  = lyts_of_regions[4];
        auto lyt_six   = lyts_of_regions[5];
        auto lyt_seven = lyts_of_regions[6];
        auto lyt_eight = lyts_of_regions[7];
        auto lyt_nine  = lyts_of_regions[8];
        auto lyt_ten   = lyts_of_regions[9];
        auto lyt_11    = lyts_of_regions[10];
        auto lyt_12    = lyts_of_regions[11];
        auto lyt_13    = lyts_of_regions[12];
        auto lyt_14    = lyts_of_regions[13];
        auto lyt_15    = lyts_of_regions[14];
        auto lyt_16    = lyts_of_regions[15];
        auto lyt_17    = lyts_of_regions[16];
        auto lyt_18    = lyts_of_regions[17];
        auto lyt_19    = lyts_of_regions[18];

        auto lyt_20 = lyts_of_regions[19];
        auto lyt_21 = lyts_of_regions[20];
        auto lyt_22 = lyts_of_regions[21];
        auto lyt_23 = lyts_of_regions[22];
        auto lyt_24 = lyts_of_regions[23];
        auto lyt_25 = lyts_of_regions[24];

        auto lyt_26 = lyts_of_regions[25];
        auto lyt_27 = lyts_of_regions[26];
        auto lyt_28 = lyts_of_regions[27];
        auto lyt_29 = lyts_of_regions[28];

        std::sort(lyt_one.begin(), lyt_one.end(), compareFunc);
        std::sort(lyt_two.begin(), lyt_two.end(), compareFunc);
        std::sort(lyt_three.begin(), lyt_three.end(), compareFunc);
        std::sort(lyt_four.begin(), lyt_four.end(), compareFunc);
        std::sort(lyt_five.begin(), lyt_five.end(), compareFunc);
        std::sort(lyt_six.begin(), lyt_six.end(), compareFunc);
        std::sort(lyt_seven.begin(), lyt_seven.end(), compareFunc);
        std::sort(lyt_eight.begin(), lyt_eight.end(), compareFunc);
        std::sort(lyt_nine.begin(), lyt_nine.end(), compareFunc);
        std::sort(lyt_ten.begin(), lyt_ten.end(), compareFunc);
        std::sort(lyt_11.begin(), lyt_11.end(), compareFunc);
        std::sort(lyt_12.begin(), lyt_12.end(), compareFunc);
        std::sort(lyt_13.begin(), lyt_13.end(), compareFunc);
        std::sort(lyt_14.begin(), lyt_14.end(), compareFunc);
        std::sort(lyt_15.begin(), lyt_15.end(), compareFunc);
        std::sort(lyt_16.begin(), lyt_16.end(), compareFunc);
        std::sort(lyt_17.begin(), lyt_17.end(), compareFunc);
        std::sort(lyt_18.begin(), lyt_18.end(), compareFunc);

        std::sort(lyt_19.begin(), lyt_19.end(), compareFunc);
        std::sort(lyt_20.begin(), lyt_20.end(), compareFunc);
        std::sort(lyt_21.begin(), lyt_21.end(), compareFunc);
        std::sort(lyt_22.begin(), lyt_22.end(), compareFunc);
        std::sort(lyt_23.begin(), lyt_23.end(), compareFunc);
        std::sort(lyt_24.begin(), lyt_24.end(), compareFunc);
        std::sort(lyt_25.begin(), lyt_25.end(), compareFunc);

        std::sort(lyt_26.begin(), lyt_26.end(), compareFunc);
        std::sort(lyt_27.begin(), lyt_27.end(), compareFunc);
        std::sort(lyt_28.begin(), lyt_28.end(), compareFunc);
        std::sort(lyt_29.begin(), lyt_29.end(), compareFunc);

        int                                           number = 5;
        std::vector<charge_distribution_surface<Lyt>> lyt_ones(
            lyt_one.begin(), lyt_one.begin() + std::min(number, static_cast<int>(lyt_one.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_twos(
            lyt_two.begin(), lyt_two.begin() + std::min(number, static_cast<int>(lyt_two.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_threes(
            lyt_three.begin(), lyt_three.begin() + std::min(number, static_cast<int>(lyt_three.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_fours(
            lyt_four.begin(), lyt_four.begin() + std::min(number, static_cast<int>(lyt_four.size())));

        std::vector<charge_distribution_surface<Lyt>> lyt_fives(
            lyt_five.begin(), lyt_five.begin() + std::min(number, static_cast<int>(lyt_five.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_sixs(
            lyt_six.begin(), lyt_six.begin() + std::min(number, static_cast<int>(lyt_six.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_sevens(
            lyt_seven.begin(), lyt_seven.begin() + std::min(number, static_cast<int>(lyt_seven.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_eights(
            lyt_eight.begin(), lyt_eight.begin() + std::min(number, static_cast<int>(lyt_eight.size())));

        std::vector<charge_distribution_surface<Lyt>> lyt_nines(
            lyt_nine.begin(), lyt_nine.begin() + std::min(number, static_cast<int>(lyt_nine.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_tens(
            lyt_ten.begin(), lyt_ten.begin() + std::min(number, static_cast<int>(lyt_ten.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_11s(
            lyt_11.begin(), lyt_11.begin() + std::min(number, static_cast<int>(lyt_11.size())));

        std::vector<charge_distribution_surface<Lyt>> lyt_12s(
            lyt_12.begin(), lyt_12.begin() + std::min(number, static_cast<int>(lyt_12.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_13s(
            lyt_13.begin(), lyt_13.begin() + std::min(number, static_cast<int>(lyt_13.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_14s(
            lyt_14.begin(), lyt_14.begin() + std::min(number, static_cast<int>(lyt_14.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_15s(
            lyt_15.begin(), lyt_15.begin() + std::min(number, static_cast<int>(lyt_15.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_16s(
            lyt_16.begin(), lyt_16.begin() + std::min(number, static_cast<int>(lyt_16.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_17s(
            lyt_17.begin(), lyt_17.begin() + std::min(number, static_cast<int>(lyt_17.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_18s(
            lyt_18.begin(), lyt_18.begin() + std::min(number, static_cast<int>(lyt_18.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_19s(
            lyt_19.begin(), lyt_19.begin() + std::min(number, static_cast<int>(lyt_19.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_20s(
            lyt_20.begin(), lyt_20.begin() + std::min(number, static_cast<int>(lyt_20.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_21s(
            lyt_21.begin(), lyt_21.begin() + std::min(number, static_cast<int>(lyt_21.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_22s(
            lyt_22.begin(), lyt_22.begin() + std::min(number, static_cast<int>(lyt_22.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_23s(
            lyt_23.begin(), lyt_23.begin() + std::min(number, static_cast<int>(lyt_23.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_24s(
            lyt_24.begin(), lyt_24.begin() + std::min(number, static_cast<int>(lyt_24.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_25s(
            lyt_25.begin(), lyt_25.begin() + std::min(number, static_cast<int>(lyt_25.size())));

        std::vector<charge_distribution_surface<Lyt>> lyt_26s(
            lyt_26.begin(), lyt_26.begin() + std::min(number, static_cast<int>(lyt_26.size())));

        std::vector<charge_distribution_surface<Lyt>> lyt_27s(
            lyt_27.begin(), lyt_27.begin() + std::min(number, static_cast<int>(lyt_27.size())));

        std::vector<charge_distribution_surface<Lyt>> lyt_28s(
            lyt_28.begin(), lyt_28.begin() + std::min(number, static_cast<int>(lyt_28.size())));

        std::vector<charge_distribution_surface<Lyt>> lyt_29s(
            lyt_29.begin(), lyt_29.begin() + std::min(number, static_cast<int>(lyt_29.size())));

        charge_distribution_surface<Lyt> charge_lyt{layout};
        uint64_t                         counter = 0;
        std::vector<double>              valid_energies{};
        double                           energy_threas = 1000;
        for (auto i = 0u; i < lyt_one.size(); i++)
        {
            for (auto j = 0u; j < lyt_two.size(); j++)
            {
                for (auto three = 0u; three < lyt_three.size(); three++)
                {
                    for (auto four = 0u; four < lyt_four.size(); four++)
                    {
                        for (auto five = 0u; five < lyt_five.size(); five++)
                        {
                            for (const auto& lyts_six : lyt_six)
                            {
                                for (const auto& lyts_seven : lyt_seven)
                                {

                                    for (auto eight = 0u; eight < lyt_eight.size(); eight++)
                                    {

                                        for (auto nine = 0u; nine < lyt_nine.size(); nine++)
                                        {

                                            for (auto t = 0u; t < lyt_ten.size(); t++)
                                            {
                                                for (auto l = 0u; l < lyt_11.size(); l++)
                                                {
                                                    for (const auto& lyts_12 : lyt_12)
                                                    {

                                                        for (const auto& lyts_13 : lyt_13)
                                                        {

                                                            for (const auto& lyts_14 : lyt_14)
                                                            {
                                                                for (const auto& lyts_15 : lyt_15)
                                                                {
                                                                    for (const auto& lyts_16 : lyt_16)
                                                                    {
                                                                        for (const auto& lyts_17 : lyt_17)
                                                                        {
                                                                            for (const auto& lyts_18 : lyt_18)
                                                                            {
                                                                                for (const auto& lyts_19 : lyt_19)
                                                                                {
                                                                                    for (const auto& lyts_20 : lyt_20)
                                                                                    {
                                                                                        for (const auto& lyts_21 :
                                                                                             lyt_21)
                                                                                        {
                                                                                            for (const auto& lyts_22 :
                                                                                                 lyt_22)
                                                                                            {
                                                                                                for (const auto&
                                                                                                         lyts_23 :
                                                                                                     lyt_23)
                                                                                                {
                                                                                                    for (const auto&
                                                                                                             lyts_24 :
                                                                                                         lyt_24)
                                                                                                    {
                                                                                                        for (
                                                                                                            const auto&
                                                                                                                lyts_25 :
                                                                                                            lyt_25)
                                                                                                        {
                                                                                                            for (
                                                                                                                const auto&
                                                                                                                    lyts_26 :
                                                                                                                lyt_26)
                                                                                                            {
                                                                                                                for (
                                                                                                                    const auto&
                                                                                                                        lyts_27 :
                                                                                                                    lyt_27)
                                                                                                                {
                                                                                                                    for (
                                                                                                                        const auto&
                                                                                                                            lyts_28 :
                                                                                                                        lyt_28)
                                                                                                                    {
                                                                                                                        for (
                                                                                                                            const auto&
                                                                                                                                lyts_29 :
                                                                                                                            lyt_29)
                                                                                                                        {

                                                                                                                            lyt_one[i]
                                                                                                                                .foreach_cell(
                                                                                                                                    [this,
                                                                                                                                     &charge_lyt,
                                                                                                                                     &lyt_one,
                                                                                                                                     &i](
                                                                                                                                        const auto&
                                                                                                                                            c1)
                                                                                                                                    {
                                                                                                                                        charge_lyt
                                                                                                                                            .assign_charge_state(
                                                                                                                                                c1,
                                                                                                                                                lyt_one[i]
                                                                                                                                                    .get_charge_state(
                                                                                                                                                        c1),
                                                                                                                                                false);
                                                                                                                                    });
                                                                                                                            lyt_two[j]
                                                                                                                                .foreach_cell(
                                                                                                                                    [this,
                                                                                                                                     &charge_lyt,
                                                                                                                                     &lyt_two,
                                                                                                                                     &j](
                                                                                                                                        const auto&
                                                                                                                                            c1)
                                                                                                                                    {
                                                                                                                                        charge_lyt
                                                                                                                                            .assign_charge_state(
                                                                                                                                                c1,
                                                                                                                                                lyt_two[j]
                                                                                                                                                    .get_charge_state(
                                                                                                                                                        c1),
                                                                                                                                                false);
                                                                                                                                    });
                                                                                                                            lyt_three[three]
                                                                                                                                .foreach_cell(
                                                                                                                                    [this,
                                                                                                                                     &charge_lyt,
                                                                                                                                     &lyt_three,
                                                                                                                                     &three](
                                                                                                                                        const auto&
                                                                                                                                            c1)
                                                                                                                                    {
                                                                                                                                        charge_lyt
                                                                                                                                            .assign_charge_state(
                                                                                                                                                c1,
                                                                                                                                                lyt_three[three]
                                                                                                                                                    .get_charge_state(
                                                                                                                                                        c1),
                                                                                                                                                false);
                                                                                                                                    });
                                                                                                                            lyt_four[four]
                                                                                                                                .foreach_cell(
                                                                                                                                    [this,
                                                                                                                                     &charge_lyt,
                                                                                                                                     &lyt_four,
                                                                                                                                     &four](
                                                                                                                                        const auto&
                                                                                                                                            c1)
                                                                                                                                    {
                                                                                                                                        charge_lyt
                                                                                                                                            .assign_charge_state(
                                                                                                                                                c1,
                                                                                                                                                lyt_four[four]
                                                                                                                                                    .get_charge_state(
                                                                                                                                                        c1),
                                                                                                                                                false);
                                                                                                                                    });
                                                                                                                            lyt_five[five]
                                                                                                                                .foreach_cell(
                                                                                                                                    [this,
                                                                                                                                     &charge_lyt,
                                                                                                                                     &lyt_five,
                                                                                                                                     &five](
                                                                                                                                        const auto&
                                                                                                                                            c1)
                                                                                                                                    {
                                                                                                                                        charge_lyt
                                                                                                                                            .assign_charge_state(
                                                                                                                                                c1,
                                                                                                                                                lyt_five[five]
                                                                                                                                                    .get_charge_state(
                                                                                                                                                        c1),
                                                                                                                                                false);
                                                                                                                                    });
                                                                                                                            lyts_six
                                                                                                                                .foreach_cell(
                                                                                                                                    [this,
                                                                                                                                     &charge_lyt,
                                                                                                                                     &lyts_six](
                                                                                                                                        const auto&
                                                                                                                                            c1)
                                                                                                                                    {
                                                                                                                                        charge_lyt
                                                                                                                                            .assign_charge_state(
                                                                                                                                                c1,
                                                                                                                                                lyts_six
                                                                                                                                                    .get_charge_state(
                                                                                                                                                        c1),
                                                                                                                                                false);
                                                                                                                                    });
                                                                                                                            lyts_seven
                                                                                                                                .foreach_cell(
                                                                                                                                    [this,
                                                                                                                                     &charge_lyt,
                                                                                                                                     &lyts_seven](
                                                                                                                                        const auto&
                                                                                                                                            c1)
                                                                                                                                    {
                                                                                                                                        charge_lyt
                                                                                                                                            .assign_charge_state(
                                                                                                                                                c1,
                                                                                                                                                lyts_seven
                                                                                                                                                    .get_charge_state(
                                                                                                                                                        c1),
                                                                                                                                                false);
                                                                                                                                    });
                                                                                                                            lyt_eight[eight]
                                                                                                                                .foreach_cell(
                                                                                                                                    [this,
                                                                                                                                     &charge_lyt,
                                                                                                                                     &lyt_eight,
                                                                                                                                     &eight](
                                                                                                                                        const auto&
                                                                                                                                            c1)
                                                                                                                                    {
                                                                                                                                        charge_lyt
                                                                                                                                            .assign_charge_state(
                                                                                                                                                c1,
                                                                                                                                                lyt_eight[eight]
                                                                                                                                                    .get_charge_state(
                                                                                                                                                        c1),
                                                                                                                                                false);
                                                                                                                                    });
                                                                                                                            lyt_nine[nine]
                                                                                                                                .foreach_cell(
                                                                                                                                    [this,
                                                                                                                                     &charge_lyt,
                                                                                                                                     &lyt_nine,
                                                                                                                                     &nine](
                                                                                                                                        const auto&
                                                                                                                                            c1)
                                                                                                                                    {
                                                                                                                                        charge_lyt
                                                                                                                                            .assign_charge_state(
                                                                                                                                                c1,
                                                                                                                                                lyt_nine[nine]
                                                                                                                                                    .get_charge_state(
                                                                                                                                                        c1),
                                                                                                                                                false);
                                                                                                                                    });
                                                                                                                            lyt_ten[t]
                                                                                                                                .foreach_cell(
                                                                                                                                    [this,
                                                                                                                                     &charge_lyt,
                                                                                                                                     &lyt_ten,
                                                                                                                                     &t](
                                                                                                                                        const auto&
                                                                                                                                            c1)
                                                                                                                                    {
                                                                                                                                        charge_lyt
                                                                                                                                            .assign_charge_state(
                                                                                                                                                c1,
                                                                                                                                                lyt_ten[t]
                                                                                                                                                    .get_charge_state(
                                                                                                                                                        c1),
                                                                                                                                                false);
                                                                                                                                    });
                                                                                                                            lyt_11[l]
                                                                                                                                .foreach_cell(
                                                                                                                                    [this,
                                                                                                                                     &charge_lyt,
                                                                                                                                     &lyt_11,
                                                                                                                                     &l](
                                                                                                                                        const auto&
                                                                                                                                            c1)
                                                                                                                                    {
                                                                                                                                        charge_lyt
                                                                                                                                            .assign_charge_state(
                                                                                                                                                c1,
                                                                                                                                                lyt_11[l]
                                                                                                                                                    .get_charge_state(
                                                                                                                                                        c1),
                                                                                                                                                false);
                                                                                                                                    });
                                                                                                                            lyts_12
                                                                                                                                .foreach_cell(
                                                                                                                                    [this,
                                                                                                                                     &charge_lyt,
                                                                                                                                     &lyts_12](
                                                                                                                                        const auto&
                                                                                                                                            c1)
                                                                                                                                    {
                                                                                                                                        charge_lyt
                                                                                                                                            .assign_charge_state(
                                                                                                                                                c1,
                                                                                                                                                lyts_12
                                                                                                                                                    .get_charge_state(
                                                                                                                                                        c1),
                                                                                                                                                false);
                                                                                                                                    });
                                                                                                                            lyts_13
                                                                                                                                .foreach_cell(
                                                                                                                                    [this,
                                                                                                                                     &charge_lyt,
                                                                                                                                     &lyts_13](
                                                                                                                                        const auto&
                                                                                                                                            c1)
                                                                                                                                    {
                                                                                                                                        charge_lyt
                                                                                                                                            .assign_charge_state(
                                                                                                                                                c1,
                                                                                                                                                lyts_13
                                                                                                                                                    .get_charge_state(
                                                                                                                                                        c1),
                                                                                                                                                false);
                                                                                                                                    });
                                                                                                                            lyts_14
                                                                                                                                .foreach_cell(
                                                                                                                                    [this,
                                                                                                                                     &charge_lyt,
                                                                                                                                     &lyts_14](
                                                                                                                                        const auto&
                                                                                                                                            c1)
                                                                                                                                    {
                                                                                                                                        charge_lyt
                                                                                                                                            .assign_charge_state(
                                                                                                                                                c1,
                                                                                                                                                lyts_14
                                                                                                                                                    .get_charge_state(
                                                                                                                                                        c1),
                                                                                                                                                false);
                                                                                                                                    });
                                                                                                                            lyts_15
                                                                                                                                .foreach_cell(
                                                                                                                                    [this,
                                                                                                                                     &charge_lyt,
                                                                                                                                     &lyts_15](
                                                                                                                                        const auto&
                                                                                                                                            c1)
                                                                                                                                    {
                                                                                                                                        charge_lyt
                                                                                                                                            .assign_charge_state(
                                                                                                                                                c1,
                                                                                                                                                lyts_15
                                                                                                                                                    .get_charge_state(
                                                                                                                                                        c1),
                                                                                                                                                false);
                                                                                                                                    });
                                                                                                                            lyts_16
                                                                                                                                .foreach_cell(
                                                                                                                                    [this,
                                                                                                                                     &charge_lyt,
                                                                                                                                     &lyts_16](
                                                                                                                                        const auto&
                                                                                                                                            c1)
                                                                                                                                    {
                                                                                                                                        charge_lyt
                                                                                                                                            .assign_charge_state(
                                                                                                                                                c1,
                                                                                                                                                lyts_16
                                                                                                                                                    .get_charge_state(
                                                                                                                                                        c1),
                                                                                                                                                false);
                                                                                                                                    });
                                                                                                                            lyts_17
                                                                                                                                .foreach_cell(
                                                                                                                                    [this,
                                                                                                                                     &charge_lyt,
                                                                                                                                     &lyts_17](
                                                                                                                                        const auto&
                                                                                                                                            c1)
                                                                                                                                    {
                                                                                                                                        charge_lyt
                                                                                                                                            .assign_charge_state(
                                                                                                                                                c1,
                                                                                                                                                lyts_17
                                                                                                                                                    .get_charge_state(
                                                                                                                                                        c1),
                                                                                                                                                false);
                                                                                                                                    });
                                                                                                                            lyts_18
                                                                                                                                .foreach_cell(
                                                                                                                                    [this,
                                                                                                                                     &charge_lyt,
                                                                                                                                     &lyts_18](
                                                                                                                                        const auto&
                                                                                                                                            c1)
                                                                                                                                    {
                                                                                                                                        charge_lyt
                                                                                                                                            .assign_charge_state(
                                                                                                                                                c1,
                                                                                                                                                lyts_18
                                                                                                                                                    .get_charge_state(
                                                                                                                                                        c1),
                                                                                                                                                false);
                                                                                                                                    });
                                                                                                                            lyts_19
                                                                                                                                .foreach_cell(
                                                                                                                                    [this,
                                                                                                                                     &charge_lyt,
                                                                                                                                     &lyts_19](
                                                                                                                                        const auto&
                                                                                                                                            c1)
                                                                                                                                    {
                                                                                                                                        charge_lyt
                                                                                                                                            .assign_charge_state(
                                                                                                                                                c1,
                                                                                                                                                lyts_19
                                                                                                                                                    .get_charge_state(
                                                                                                                                                        c1),
                                                                                                                                                false);
                                                                                                                                    });
                                                                                                                            lyts_20
                                                                                                                                .foreach_cell(
                                                                                                                                    [this,
                                                                                                                                     &charge_lyt,
                                                                                                                                     &lyts_20](
                                                                                                                                        const auto&
                                                                                                                                            c1)
                                                                                                                                    {
                                                                                                                                        charge_lyt
                                                                                                                                            .assign_charge_state(
                                                                                                                                                c1,
                                                                                                                                                lyts_20
                                                                                                                                                    .get_charge_state(
                                                                                                                                                        c1),
                                                                                                                                                false);
                                                                                                                                    });
                                                                                                                            lyts_21
                                                                                                                                .foreach_cell(
                                                                                                                                    [this,
                                                                                                                                     &charge_lyt,
                                                                                                                                     &lyts_21](
                                                                                                                                        const auto&
                                                                                                                                            c1)
                                                                                                                                    {
                                                                                                                                        charge_lyt
                                                                                                                                            .assign_charge_state(
                                                                                                                                                c1,
                                                                                                                                                lyts_21
                                                                                                                                                    .get_charge_state(
                                                                                                                                                        c1),
                                                                                                                                                false);
                                                                                                                                    });
                                                                                                                            lyts_22
                                                                                                                                .foreach_cell(
                                                                                                                                    [this,
                                                                                                                                     &charge_lyt,
                                                                                                                                     &lyts_22](
                                                                                                                                        const auto&
                                                                                                                                            c1)
                                                                                                                                    {
                                                                                                                                        charge_lyt
                                                                                                                                            .assign_charge_state(
                                                                                                                                                c1,
                                                                                                                                                lyts_22
                                                                                                                                                    .get_charge_state(
                                                                                                                                                        c1),
                                                                                                                                                false);
                                                                                                                                    });
                                                                                                                            lyts_23
                                                                                                                                .foreach_cell(
                                                                                                                                    [this,
                                                                                                                                     &charge_lyt,
                                                                                                                                     &lyts_23](
                                                                                                                                        const auto&
                                                                                                                                            c1)
                                                                                                                                    {
                                                                                                                                        charge_lyt
                                                                                                                                            .assign_charge_state(
                                                                                                                                                c1,
                                                                                                                                                lyts_23
                                                                                                                                                    .get_charge_state(
                                                                                                                                                        c1),
                                                                                                                                                false);
                                                                                                                                    });
                                                                                                                            lyts_24
                                                                                                                                .foreach_cell(
                                                                                                                                    [this,
                                                                                                                                     &charge_lyt,
                                                                                                                                     &lyts_24](
                                                                                                                                        const auto&
                                                                                                                                            c1)
                                                                                                                                    {
                                                                                                                                        charge_lyt
                                                                                                                                            .assign_charge_state(
                                                                                                                                                c1,
                                                                                                                                                lyts_24
                                                                                                                                                    .get_charge_state(
                                                                                                                                                        c1),
                                                                                                                                                false);
                                                                                                                                    });
                                                                                                                            lyts_25
                                                                                                                                .foreach_cell(
                                                                                                                                    [this,
                                                                                                                                     &charge_lyt,
                                                                                                                                     &lyts_25](
                                                                                                                                        const auto&
                                                                                                                                            c1)
                                                                                                                                    {
                                                                                                                                        charge_lyt
                                                                                                                                            .assign_charge_state(
                                                                                                                                                c1,
                                                                                                                                                lyts_25
                                                                                                                                                    .get_charge_state(
                                                                                                                                                        c1),
                                                                                                                                                false);
                                                                                                                                    });
                                                                                                                            lyts_26
                                                                                                                                .foreach_cell(
                                                                                                                                    [this,
                                                                                                                                     &charge_lyt,
                                                                                                                                     &lyts_26](
                                                                                                                                        const auto&
                                                                                                                                            c1)
                                                                                                                                    {
                                                                                                                                        charge_lyt
                                                                                                                                            .assign_charge_state(
                                                                                                                                                c1,
                                                                                                                                                lyts_26
                                                                                                                                                    .get_charge_state(
                                                                                                                                                        c1),
                                                                                                                                                false);
                                                                                                                                    });
                                                                                                                            lyts_27
                                                                                                                                .foreach_cell(
                                                                                                                                    [this,
                                                                                                                                     &charge_lyt,
                                                                                                                                     &lyts_27](
                                                                                                                                        const auto&
                                                                                                                                            c1)
                                                                                                                                    {
                                                                                                                                        charge_lyt
                                                                                                                                            .assign_charge_state(
                                                                                                                                                c1,
                                                                                                                                                lyts_27
                                                                                                                                                    .get_charge_state(
                                                                                                                                                        c1),
                                                                                                                                                false);
                                                                                                                                    });
                                                                                                                            lyts_28
                                                                                                                                .foreach_cell(
                                                                                                                                    [this,
                                                                                                                                     &charge_lyt,
                                                                                                                                     &lyts_28](
                                                                                                                                        const auto&
                                                                                                                                            c1)
                                                                                                                                    {
                                                                                                                                        charge_lyt
                                                                                                                                            .assign_charge_state(
                                                                                                                                                c1,
                                                                                                                                                lyts_28
                                                                                                                                                    .get_charge_state(
                                                                                                                                                        c1),
                                                                                                                                                false);
                                                                                                                                    });
                                                                                                                            lyts_29
                                                                                                                                .foreach_cell(
                                                                                                                                    [this,
                                                                                                                                     &charge_lyt,
                                                                                                                                     &lyts_29](
                                                                                                                                        const auto&
                                                                                                                                            c1)
                                                                                                                                    {
                                                                                                                                        charge_lyt
                                                                                                                                            .assign_charge_state(
                                                                                                                                                c1,
                                                                                                                                                lyts_29
                                                                                                                                                    .get_charge_state(
                                                                                                                                                        c1),
                                                                                                                                                false);
                                                                                                                                    });
                                                                                                                            charge_lyt
                                                                                                                                .update_after_charge_change();
                                                                                                                            if (charge_lyt
                                                                                                                                    .is_physically_valid())
                                                                                                                            {
                                                                                                                                if (charge_lyt
                                                                                                                                        .get_system_energy() <
                                                                                                                                    energy_threas)
                                                                                                                                {
                                                                                                                                    std::vector<
                                                                                                                                        charge_distribution_surface<
                                                                                                                                            Lyt>>
                                                                                                                                        lyts{};
                                                                                                                                    std::cout
                                                                                                                                        << charge_lyt
                                                                                                                                               .get_system_energy()
                                                                                                                                        << std::
                                                                                                                                               endl;

                                                                                                                                    sidb_simulation_result<
                                                                                                                                        Lyt>
                                                                                                                                        sim_result{};
                                                                                                                                    sim_result
                                                                                                                                        .algorithm_name =
                                                                                                                                        "ExGS";
                                                                                                                                    charge_distribution_surface<
                                                                                                                                        Lyt>
                                                                                                                                        charge_lyt_copy{
                                                                                                                                            charge_lyt};
                                                                                                                                    lyts.emplace_back(
                                                                                                                                        charge_lyt_copy);
                                                                                                                                    sim_result
                                                                                                                                        .charge_distributions =
                                                                                                                                        lyts;
                                                                                                                                    energy_threas =
                                                                                                                                        charge_lyt
                                                                                                                                            .get_system_energy();
                                                                                                                                    write_sqd_sim_result<
                                                                                                                                        Lyt>(
                                                                                                                                        sim_result,
                                                                                                                                        "/Users/jandrewniok/"
                                                                                                                                        "CLionProjects/"
                                                                                                                                        "fiction_fork/"
                                                                                                                                        "experiments/"
                                                                                                                                        "result.xml");
                                                                                                                                }
                                                                                                                            }
                                                                                                                            counter +=
                                                                                                                                1;
                                                                                                                            if (counter %
                                                                                                                                    100000 ==
                                                                                                                                0)
                                                                                                                            {
                                                                                                                                std::cout
                                                                                                                                    << counter
                                                                                                                                    << std::
                                                                                                                                           endl;
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    void combining_all_16_new()
    {
        auto compareFunc =
            [](const charge_distribution_surface<Lyt>& lyt1, const charge_distribution_surface<Lyt>& lyt2)
        { return lyt1.get_system_energy() < lyt2.get_system_energy(); };

        std::cout << "combining starts: " << std::to_string(lyts_of_regions.size()) << std::endl;
        uint64_t counter_lyts = 1;
        for (const auto& lyts_region : lyts_of_regions)
        {
            counter_lyts *= lyts_region.size();
        }
        std::cout << "number enumerations: " << std::to_string(counter_lyts) << std::endl;

        auto lyt_one   = lyts_of_regions[0];
        auto lyt_two   = lyts_of_regions[1];
        auto lyt_three = lyts_of_regions[2];
        auto lyt_four  = lyts_of_regions[3];
        auto lyt_five  = lyts_of_regions[4];
        auto lyt_six   = lyts_of_regions[5];
        auto lyt_seven = lyts_of_regions[6];
        auto lyt_eight = lyts_of_regions[7];
        auto lyt_nine  = lyts_of_regions[8];
        auto lyt_ten   = lyts_of_regions[9];
        auto lyt_11    = lyts_of_regions[10];
        auto lyt_12    = lyts_of_regions[11];
        auto lyt_13    = lyts_of_regions[12];
        auto lyt_14    = lyts_of_regions[13];
        auto lyt_15    = lyts_of_regions[14];
        auto lyt_16    = lyts_of_regions[15];

        std::sort(lyt_one.begin(), lyt_one.end(), compareFunc);
        std::sort(lyt_two.begin(), lyt_two.end(), compareFunc);
        std::sort(lyt_three.begin(), lyt_three.end(), compareFunc);
        std::sort(lyt_four.begin(), lyt_four.end(), compareFunc);
        std::sort(lyt_five.begin(), lyt_five.end(), compareFunc);
        std::sort(lyt_six.begin(), lyt_six.end(), compareFunc);
        std::sort(lyt_seven.begin(), lyt_seven.end(), compareFunc);
        std::sort(lyt_eight.begin(), lyt_eight.end(), compareFunc);
        std::sort(lyt_nine.begin(), lyt_nine.end(), compareFunc);
        std::sort(lyt_ten.begin(), lyt_ten.end(), compareFunc);
        std::sort(lyt_11.begin(), lyt_11.end(), compareFunc);
        std::sort(lyt_12.begin(), lyt_12.end(), compareFunc);
        std::sort(lyt_13.begin(), lyt_13.end(), compareFunc);
        std::sort(lyt_14.begin(), lyt_14.end(), compareFunc);
        std::sort(lyt_15.begin(), lyt_15.end(), compareFunc);
        std::sort(lyt_16.begin(), lyt_16.end(), compareFunc);

        std::cout << "defect_cells: " << std::to_string(all_defect_cells.size()) << std::endl;
        for (const auto& defects : all_defect_cells)
        {
            std::cout << "number of defects: " << std::to_string(defects.size()) << std::endl;
        }

        charge_distribution_surface<Lyt> charge_lyt{layout};
        uint64_t                         counter = 0;
        std::vector<double>              valid_energies{};
        double                           energy_threas = 1000;

        for (auto one = 0u; one < lyt_one.size(); one++)
        {
            for (auto two = 0u; two < lyt_two.size(); two++)
            {
                for (auto three = 0u; three < lyt_three.size(); three++)
                {
                    for (auto four = 0u; four < lyt_four.size(); four++)
                    {
                        for (auto five = 0u; five < lyt_five.size(); five++)
                        {
                            for (auto six = 0u; six < lyt_six.size(); six++)
                            {
                                uint64_t counter_unmatched_one = 0;
                                for (const auto& neighbor_cell : all_defect_cells[0])
                                {
                                    lyt_six[six].foreach_cell(
                                        [&counter_unmatched_one, &neighbor_cell, &lyt_six, &six, &one,
                                         this](const auto& c1)
                                        {
                                            if (c1 == neighbor_cell)
                                            {
                                                if (charge_state_to_sign(lyt_six[one].get_charge_state(c1)) !=
                                                    get_charge_state_defect(0, one, c1))
                                                {
                                                    counter_unmatched_one += 1;
                                                }
                                            }
                                        });
                                }
                                if (counter_unmatched_one != 0)
                                {
                                    continue;
                                }

                                uint64_t counter_unmatched_second = 0;
                                for (const auto& neighbor_cell : all_defect_cells[1])
                                {
                                    lyt_six[six].foreach_cell(
                                        [&counter_unmatched_second, &neighbor_cell, &lyt_six, &six, &two,
                                         this](const auto& c1)
                                        {
                                            if (c1 == neighbor_cell)
                                            {
                                                if (charge_state_to_sign(lyt_six[six].get_charge_state(c1)) !=
                                                    get_charge_state_defect(1, two, c1))
                                                {
                                                    counter_unmatched_second += 1;
                                                }
                                            }
                                        });
                                }
                                if (counter_unmatched_second != 0)
                                {
                                    continue;
                                }
                                for (auto seven = 0u; seven < lyt_seven.size(); seven++)
                                {
                                    uint64_t counter_unmatched_third = 0;
                                    for (const auto& neighbor_cell : all_defect_cells[2])
                                    {
                                        lyt_seven[seven].foreach_cell(
                                            [&counter_unmatched_third, &neighbor_cell, &lyt_seven, &seven, &three,
                                             this](const auto& c1)
                                            {
                                                if (c1 == neighbor_cell)
                                                {
                                                    if (charge_state_to_sign(lyt_seven[seven].get_charge_state(c1)) !=
                                                        get_charge_state_defect(2, three, c1))
                                                    {
                                                        counter_unmatched_third += 1;
                                                    }
                                                }
                                            });
                                    }
                                    if (counter_unmatched_third != 0)
                                    {
                                        continue;
                                    }
                                    for (auto eight = 0u; eight < lyt_eight.size(); eight++)
                                    {
                                        uint64_t counter_unmatched_four = 0;
                                        for (const auto& neighbor_cell : all_defect_cells[3])
                                        {
                                            lyt_eight[eight].foreach_cell(
                                                [&counter_unmatched_four, &neighbor_cell, &lyt_eight, &eight, &four,
                                                 this](const auto& c1)
                                                {
                                                    if (c1 == neighbor_cell)
                                                    {
                                                        if (charge_state_to_sign(lyt_eight[eight].get_charge_state(
                                                                c1)) != get_charge_state_defect(3, four, c1))
                                                        {
                                                            counter_unmatched_four += 1;
                                                        }
                                                    }
                                                });
                                        }
                                        if (counter_unmatched_four != 0)
                                        {
                                            continue;
                                        }
                                        for (auto nine = 0u; nine < lyt_nine.size(); nine++)
                                        {
                                            uint64_t counter_unmatched_five = 0;
                                            for (const auto& neighbor_cell : all_defect_cells[4])
                                            {
                                                lyt_nine[nine].foreach_cell(
                                                    [&counter_unmatched_five, &neighbor_cell, &lyt_nine, &nine, &five,
                                                     this](const auto& c1)
                                                    {
                                                        if (c1 == neighbor_cell)
                                                        {
                                                            if (charge_state_to_sign(lyt_nine[nine].get_charge_state(
                                                                    c1)) != get_charge_state_defect(4, five, c1))
                                                            {
                                                                counter_unmatched_five += 1;
                                                            }
                                                        }
                                                    });
                                            }
                                            if (counter_unmatched_five != 0)
                                            {
                                                continue;
                                            }
                                            //                                            std::cout << "nine" <<
                                            //                                            std::endl;
                                            for (auto ten = 0u; ten < lyt_ten.size(); ten++)
                                            {
                                                uint64_t counter_unmatched_six = 0;
                                                for (const auto& neighbor_cell : all_defect_cells[5])
                                                {
                                                    lyt_ten[ten].foreach_cell(
                                                        [&counter_unmatched_six, &neighbor_cell, &lyt_ten, &ten, &six,
                                                         this](const auto& c1)
                                                        {
                                                            if (c1 == neighbor_cell)
                                                            {
                                                                if (charge_state_to_sign(lyt_ten[ten].get_charge_state(
                                                                        c1)) != get_charge_state_defect(5, six, c1))
                                                                {
                                                                    counter_unmatched_six += 1;
                                                                }
                                                            }
                                                        });
                                                }
                                                if (counter_unmatched_six != 0)
                                                {
                                                    continue;
                                                }
                                                for (auto eleven = 0u; eleven < lyt_11.size(); eleven++)
                                                {
                                                    uint64_t counter_unmatched_seven = 0;
                                                    for (const auto& neighbor_cell : all_defect_cells[6])
                                                    {
                                                        lyt_11[eleven].foreach_cell(
                                                            [&counter_unmatched_seven, &neighbor_cell, &lyt_11, &eleven,
                                                             &seven, this](const auto& c1)
                                                            {
                                                                if (c1 == neighbor_cell)
                                                                {
                                                                    if (charge_state_to_sign(
                                                                            lyt_11[eleven].get_charge_state(c1)) !=
                                                                        get_charge_state_defect(6, seven, c1))
                                                                    {
                                                                        counter_unmatched_seven += 1;
                                                                    }
                                                                }
                                                            });
                                                    }
                                                    if (counter_unmatched_seven != 0)
                                                    {
                                                        continue;
                                                    }
                                                    for (auto twelve = 0u; twelve < lyt_12.size(); twelve++)
                                                    {
                                                        uint64_t counter_unmatched_eight = 0;
                                                        for (const auto& neighbor_cell : all_defect_cells[7])
                                                        {
                                                            lyt_12[twelve].foreach_cell(
                                                                [&counter_unmatched_eight, &neighbor_cell, &lyt_12,
                                                                 &twelve, &eight, this](const auto& c1)
                                                                {
                                                                    if (c1 == neighbor_cell)
                                                                    {
                                                                        if (charge_state_to_sign(
                                                                                lyt_12[twelve].get_charge_state(c1)) !=
                                                                            get_charge_state_defect(7, eight, c1))
                                                                        {
                                                                            counter_unmatched_eight += 1;
                                                                        }
                                                                    }
                                                                });
                                                        }
                                                        if (counter_unmatched_eight != 0)
                                                        {
                                                            continue;
                                                        }

                                                        uint64_t counter_unmatched_nine = 0;
                                                        for (const auto& neighbor_cell : all_defect_cells[8])
                                                        {
                                                            lyt_12[twelve].foreach_cell(
                                                                [&counter_unmatched_nine, &neighbor_cell, &lyt_12,
                                                                 &twelve, &nine, this](const auto& c1)
                                                                {
                                                                    if (c1 == neighbor_cell)
                                                                    {
                                                                        if (charge_state_to_sign(
                                                                                lyt_12[twelve].get_charge_state(c1)) !=
                                                                            get_charge_state_defect(8, nine, c1))
                                                                        {
                                                                            counter_unmatched_nine += 1;
                                                                        }
                                                                    }
                                                                });
                                                        }
                                                        if (counter_unmatched_nine != 0)
                                                        {
                                                            continue;
                                                        }
                                                        for (auto thirdteen = 0u; thirdteen < lyt_13.size();
                                                             thirdteen++)
                                                        {
                                                            uint64_t counter_unmatched_ten = 0;
                                                            for (const auto& neighbor_cell : all_defect_cells[9])
                                                            {
                                                                lyt_13[thirdteen].foreach_cell(
                                                                    [&counter_unmatched_ten, &neighbor_cell, &lyt_13,
                                                                     &thirdteen, &ten, this](const auto& c1)
                                                                    {
                                                                        if (c1 == neighbor_cell)
                                                                        {
                                                                            if (charge_state_to_sign(
                                                                                    lyt_13[thirdteen].get_charge_state(
                                                                                        c1)) !=
                                                                                get_charge_state_defect(9, ten, c1))
                                                                            {
                                                                                counter_unmatched_ten += 1;
                                                                            }
                                                                        }
                                                                    });
                                                            }
                                                            if (counter_unmatched_ten != 0)
                                                            {
                                                                continue;
                                                            }

                                                            uint64_t counter_unmatched_eleven = 0;
                                                            for (const auto& neighbor_cell : all_defect_cells[10])
                                                            {
                                                                lyt_13[thirdteen].foreach_cell(
                                                                    [&counter_unmatched_eleven, &neighbor_cell, &lyt_13,
                                                                     &thirdteen, &eleven, this](const auto& c1)
                                                                    {
                                                                        if (c1 == neighbor_cell)
                                                                        {
                                                                            if (charge_state_to_sign(
                                                                                    lyt_13[thirdteen].get_charge_state(
                                                                                        c1)) !=
                                                                                get_charge_state_defect(10, eleven, c1))
                                                                            {
                                                                                counter_unmatched_eleven += 1;
                                                                            }
                                                                        }
                                                                    });
                                                            }
                                                            if (counter_unmatched_eleven != 0)
                                                            {
                                                                continue;
                                                            }

                                                            for (auto fourteen = 0u; fourteen < lyt_14.size();
                                                                 fourteen++)
                                                            {
                                                                uint64_t counter_unmatched_twelve = 0;
                                                                for (const auto& neighbor_cell : all_defect_cells[11])
                                                                {
                                                                    lyt_14[fourteen].foreach_cell(
                                                                        [&counter_unmatched_twelve, &neighbor_cell,
                                                                         &lyt_14, &fourteen, &twelve,
                                                                         this](const auto& c1)
                                                                        {
                                                                            if (c1 == neighbor_cell)
                                                                            {
                                                                                if (charge_state_to_sign(
                                                                                        lyt_14[fourteen]
                                                                                            .get_charge_state(c1)) !=
                                                                                    get_charge_state_defect(11, twelve,
                                                                                                            c1))
                                                                                {
                                                                                    counter_unmatched_twelve += 1;
                                                                                }
                                                                            }
                                                                        });
                                                                }
                                                                if (counter_unmatched_twelve != 0)
                                                                {
                                                                    continue;
                                                                }
                                                                for (auto fiveteen = 0u; fiveteen < lyt_15.size();
                                                                     fiveteen++)
                                                                {
                                                                    uint64_t counter_unmatched_thirdteen = 0;
                                                                    for (const auto& neighbor_cell :
                                                                         all_defect_cells[12])
                                                                    {
                                                                        lyt_15[fiveteen].foreach_cell(
                                                                            [&counter_unmatched_thirdteen,
                                                                             &neighbor_cell, &lyt_15, &fiveteen,
                                                                             &thirdteen, this](const auto& c1)
                                                                            {
                                                                                if (c1 == neighbor_cell)
                                                                                {
                                                                                    if (charge_state_to_sign(
                                                                                            lyt_15[fiveteen]
                                                                                                .get_charge_state(
                                                                                                    c1)) !=
                                                                                        get_charge_state_defect(
                                                                                            12, thirdteen, c1))
                                                                                    {
                                                                                        counter_unmatched_thirdteen +=
                                                                                            1;
                                                                                    }
                                                                                }
                                                                            });
                                                                    }
                                                                    if (counter_unmatched_thirdteen != 0)
                                                                    {
                                                                        continue;
                                                                    }

                                                                    uint64_t counter_unmatched_fourteen = 0;
                                                                    for (const auto& neighbor_cell :
                                                                         all_defect_cells[13])
                                                                    {
                                                                        lyt_15[fiveteen].foreach_cell(
                                                                            [&counter_unmatched_fourteen,
                                                                             &neighbor_cell, &lyt_15, &fiveteen,
                                                                             &fourteen, this](const auto& c1)
                                                                            {
                                                                                if (c1 == neighbor_cell)
                                                                                {
                                                                                    if (charge_state_to_sign(
                                                                                            lyt_15[fiveteen]
                                                                                                .get_charge_state(
                                                                                                    c1)) !=
                                                                                        get_charge_state_defect(
                                                                                            13, fourteen, c1))
                                                                                    {
                                                                                        counter_unmatched_fourteen += 1;
                                                                                    }
                                                                                }
                                                                            });
                                                                    }
                                                                    if (counter_unmatched_fourteen != 0)
                                                                    {
                                                                        continue;
                                                                    }
                                                                    for (auto sixteen = 0u; sixteen < lyt_16.size();
                                                                         sixteen++)
                                                                    {
                                                                        uint64_t counter_unmatched_fiveteen = 0;
                                                                        for (const auto& neighbor_cell :
                                                                             all_defect_cells[14])
                                                                        {
                                                                            lyt_16[sixteen].foreach_cell(
                                                                                [&counter_unmatched_fiveteen,
                                                                                 &neighbor_cell, &lyt_16, &sixteen,
                                                                                 &fiveteen, this](const auto& c1)
                                                                                {
                                                                                    if (c1 == neighbor_cell)
                                                                                    {
                                                                                        if (charge_state_to_sign(
                                                                                                lyt_16[sixteen]
                                                                                                    .get_charge_state(
                                                                                                        c1)) !=
                                                                                            get_charge_state_defect(
                                                                                                14, fiveteen, c1))
                                                                                        {
                                                                                            counter_unmatched_fiveteen +=
                                                                                                1;
                                                                                        }
                                                                                    }
                                                                                });
                                                                        }
                                                                        if (counter_unmatched_fiveteen != 0)
                                                                        {
                                                                            continue;
                                                                        }

                                                                        lyt_one[one].foreach_cell(
                                                                            [this, &charge_lyt, &lyt_one,
                                                                             &one](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1,
                                                                                    lyt_one[one].get_charge_state(c1),
                                                                                    false);
                                                                            });
                                                                        lyt_two[two].foreach_cell(
                                                                            [this, &charge_lyt, &lyt_two,
                                                                             &two](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1,
                                                                                    lyt_two[two].get_charge_state(c1),
                                                                                    false);
                                                                            });
                                                                        lyt_three[three].foreach_cell(
                                                                            [this, &charge_lyt, &lyt_three,
                                                                             &three](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1,
                                                                                    lyt_three[three].get_charge_state(
                                                                                        c1),
                                                                                    false);
                                                                            });
                                                                        lyt_four[four].foreach_cell(
                                                                            [this, &charge_lyt, &lyt_four,
                                                                             &four](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1,
                                                                                    lyt_four[four].get_charge_state(c1),
                                                                                    false);
                                                                            });
                                                                        lyt_five[five].foreach_cell(
                                                                            [this, &charge_lyt, &lyt_five,
                                                                             &five](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1,
                                                                                    lyt_five[five].get_charge_state(c1),
                                                                                    false);
                                                                            });
                                                                        lyt_six[six].foreach_cell(
                                                                            [this, &charge_lyt, &lyt_six,
                                                                             &six](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1,
                                                                                    lyt_six[six].get_charge_state(c1),
                                                                                    false);
                                                                            });
                                                                        lyt_seven[seven].foreach_cell(
                                                                            [this, &charge_lyt, &lyt_seven,
                                                                             &seven](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1,
                                                                                    lyt_seven[seven].get_charge_state(
                                                                                        c1),
                                                                                    false);
                                                                            });
                                                                        lyt_eight[eight].foreach_cell(
                                                                            [this, &charge_lyt, &lyt_eight,
                                                                             &eight](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1,
                                                                                    lyt_eight[eight].get_charge_state(
                                                                                        c1),
                                                                                    false);
                                                                            });
                                                                        lyt_nine[nine].foreach_cell(
                                                                            [this, &charge_lyt, &lyt_nine,
                                                                             &nine](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1,
                                                                                    lyt_nine[nine].get_charge_state(c1),
                                                                                    false);
                                                                            });
                                                                        lyt_ten[ten].foreach_cell(
                                                                            [this, &charge_lyt, &lyt_ten,
                                                                             &ten](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1,
                                                                                    lyt_ten[ten].get_charge_state(c1),
                                                                                    false);
                                                                            });
                                                                        lyt_11[eleven].foreach_cell(
                                                                            [this, &charge_lyt, &lyt_11,
                                                                             &eleven](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1,
                                                                                    lyt_11[eleven].get_charge_state(c1),
                                                                                    false);
                                                                            });
                                                                        lyt_12[twelve].foreach_cell(
                                                                            [this, &charge_lyt, &lyt_12,
                                                                             &twelve](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1,
                                                                                    lyt_12[twelve].get_charge_state(c1),
                                                                                    false);
                                                                            });
                                                                        lyt_13[thirdteen].foreach_cell(
                                                                            [this, &charge_lyt, &lyt_13,
                                                                             &thirdteen](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1,
                                                                                    lyt_13[thirdteen].get_charge_state(
                                                                                        c1),
                                                                                    false);
                                                                            });
                                                                        lyt_14[fourteen].foreach_cell(
                                                                            [this, &charge_lyt, &lyt_14,
                                                                             &fourteen](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1,
                                                                                    lyt_14[fourteen].get_charge_state(
                                                                                        c1),
                                                                                    false);
                                                                            });
                                                                        lyt_15[fiveteen].foreach_cell(
                                                                            [this, &charge_lyt, &lyt_15,
                                                                             &fiveteen](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1,
                                                                                    lyt_15[fiveteen].get_charge_state(
                                                                                        c1),
                                                                                    false);
                                                                            });
                                                                        lyt_16[sixteen].foreach_cell(
                                                                            [this, &charge_lyt, &lyt_16,
                                                                             &sixteen](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1,
                                                                                    lyt_16[sixteen].get_charge_state(
                                                                                        c1),
                                                                                    false);
                                                                            });
                                                                        charge_lyt.update_after_charge_change();
                                                                        if (charge_lyt.is_physically_valid())
                                                                        {
                                                                            if (charge_lyt.get_system_energy() <
                                                                                energy_threas)
                                                                            {
                                                                                std::vector<
                                                                                    charge_distribution_surface<Lyt>>
                                                                                    lyts{};
                                                                                std::cout
                                                                                    << charge_lyt.get_system_energy()
                                                                                    << std::endl;

                                                                                sidb_simulation_result<Lyt>
                                                                                    sim_result{};
                                                                                sim_result.algorithm_name = "ExGS";
                                                                                charge_distribution_surface<Lyt>
                                                                                    charge_lyt_copy{charge_lyt};
                                                                                lyts.emplace_back(charge_lyt_copy);
                                                                                sim_result.charge_distributions = lyts;
                                                                                energy_threas =
                                                                                    charge_lyt.get_system_energy();
                                                                                write_sqd_sim_result<Lyt>(sim_result,
                                                                                                          "/Users/"
                                                                                                          "jandrewnio"
                                                                                                          "k/"
                                                                                                          "CLionProje"
                                                                                                          "cts/"
                                                                                                          "fiction_"
                                                                                                          "fork/"
                                                                                                          "experiment"
                                                                                                          "s/"
                                                                                                          "result."
                                                                                                          "xml");
                                                                            }
                                                                        }
                                                                        counter += 1;
                                                                        if (counter % 100000 == 0)
                                                                        {
                                                                            std::cout << counter << std::endl;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        if (counter == 0)
        {
            std::cout << "no path found" << std::endl;
        }
    }

    void combining_all_15()
    {
        auto compareFunc =
            [](const charge_distribution_surface<Lyt>& lyt1, const charge_distribution_surface<Lyt>& lyt2)
        { return lyt1.get_system_energy() < lyt2.get_system_energy(); };

        std::cout << "combining starts: " << std::to_string(lyts_of_regions.size()) << std::endl;
        uint64_t counter_lyts = 1;
        for (const auto& lyts_region : lyts_of_regions)
        {
            counter_lyts *= lyts_region.size();
        }
        std::cout << "number enumerations: " << std::to_string(counter_lyts) << std::endl;

        auto lyt_one   = lyts_of_regions[0];
        auto lyt_two   = lyts_of_regions[1];
        auto lyt_three = lyts_of_regions[2];
        auto lyt_four  = lyts_of_regions[3];
        auto lyt_five  = lyts_of_regions[4];
        auto lyt_six   = lyts_of_regions[5];
        auto lyt_seven = lyts_of_regions[6];
        auto lyt_eight = lyts_of_regions[7];
        auto lyt_nine  = lyts_of_regions[8];
        auto lyt_ten   = lyts_of_regions[9];
        auto lyt_11    = lyts_of_regions[10];
        auto lyt_12    = lyts_of_regions[11];
        auto lyt_13    = lyts_of_regions[12];
        auto lyt_14    = lyts_of_regions[13];
        auto lyt_15    = lyts_of_regions[14];

        std::sort(lyt_one.begin(), lyt_one.end(), compareFunc);
        std::sort(lyt_two.begin(), lyt_two.end(), compareFunc);
        std::sort(lyt_three.begin(), lyt_three.end(), compareFunc);
        std::sort(lyt_four.begin(), lyt_four.end(), compareFunc);
        std::sort(lyt_five.begin(), lyt_five.end(), compareFunc);
        std::sort(lyt_six.begin(), lyt_six.end(), compareFunc);
        std::sort(lyt_seven.begin(), lyt_seven.end(), compareFunc);
        std::sort(lyt_eight.begin(), lyt_eight.end(), compareFunc);
        std::sort(lyt_nine.begin(), lyt_nine.end(), compareFunc);
        std::sort(lyt_ten.begin(), lyt_ten.end(), compareFunc);
        std::sort(lyt_11.begin(), lyt_11.end(), compareFunc);
        std::sort(lyt_12.begin(), lyt_12.end(), compareFunc);
        std::sort(lyt_13.begin(), lyt_13.end(), compareFunc);
        std::sort(lyt_14.begin(), lyt_14.end(), compareFunc);
        std::sort(lyt_15.begin(), lyt_15.end(), compareFunc);

        int                                           number = 5;
        std::vector<charge_distribution_surface<Lyt>> lyt_ones(
            lyt_one.begin(), lyt_one.begin() + std::min(number, static_cast<int>(lyt_one.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_twos(
            lyt_two.begin(), lyt_two.begin() + std::min(number, static_cast<int>(lyt_two.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_threes(
            lyt_three.begin(), lyt_three.begin() + std::min(number, static_cast<int>(lyt_three.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_fours(
            lyt_four.begin(), lyt_four.begin() + std::min(number, static_cast<int>(lyt_four.size())));

        std::vector<charge_distribution_surface<Lyt>> lyt_fives(
            lyt_five.begin(), lyt_five.begin() + std::min(number, static_cast<int>(lyt_five.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_sixs(
            lyt_six.begin(), lyt_six.begin() + std::min(number, static_cast<int>(lyt_six.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_sevens(
            lyt_seven.begin(), lyt_seven.begin() + std::min(number, static_cast<int>(lyt_seven.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_eights(
            lyt_eight.begin(), lyt_eight.begin() + std::min(number, static_cast<int>(lyt_eight.size())));

        std::vector<charge_distribution_surface<Lyt>> lyt_nines(
            lyt_nine.begin(), lyt_nine.begin() + std::min(number, static_cast<int>(lyt_nine.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_tens(
            lyt_ten.begin(), lyt_ten.begin() + std::min(number, static_cast<int>(lyt_ten.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_11s(
            lyt_11.begin(), lyt_11.begin() + std::min(number, static_cast<int>(lyt_11.size())));

        std::vector<charge_distribution_surface<Lyt>> lyt_12s(
            lyt_12.begin(), lyt_12.begin() + std::min(number, static_cast<int>(lyt_12.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_13s(
            lyt_13.begin(), lyt_13.begin() + std::min(number, static_cast<int>(lyt_13.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_14s(
            lyt_14.begin(), lyt_14.begin() + std::min(number, static_cast<int>(lyt_14.size())));
        std::vector<charge_distribution_surface<Lyt>> lyt_15s(
            lyt_15.begin(), lyt_15.begin() + std::min(number, static_cast<int>(lyt_15.size())));

        charge_distribution_surface<Lyt> charge_lyt{layout};
        uint64_t                         counter = 0;
        std::vector<double>              valid_energies{};
        double                           energy_threas = 1000;
        for (auto i = 0u; i < lyt_one.size(); i++)
        {
            for (auto j = 0u; j < lyt_two.size(); j++)
            {
                for (auto three = 0u; three < lyt_three.size(); three++)
                {
                    for (auto four = 0u; four < lyt_four.size(); four++)
                    {
                        for (auto five = 0u; five < lyt_five.size(); five++)
                        {
                            for (const auto& lyts_six : lyt_six)
                            {
                                uint64_t counter_unmatched_one = 0;
                                for (const auto& neighbor_cell : all_defect_cells[0])
                                {
                                    lyts_six.foreach_cell(
                                        [&counter_unmatched_one, &neighbor_cell, &lyts_six, &i, this](const auto& c1)
                                        {
                                            if (c1 == neighbor_cell)
                                            {
                                                if (charge_state_to_sign(lyts_six.get_charge_state(c1)) !=
                                                    get_charge_state_defect(0, i, c1))
                                                {
                                                    counter_unmatched_one += 1;
                                                }
                                            }
                                        });
                                }
                                if (counter_unmatched_one != 0)
                                {
                                    continue;
                                }

                                uint64_t counter_unmatched = 0;
                                for (const auto& neighbor_cell : all_defect_cells[1])
                                {
                                    lyts_six.foreach_cell(
                                        [&counter_unmatched, &neighbor_cell, &lyts_six, &j, this](const auto& c1)
                                        {
                                            if (c1 == neighbor_cell)
                                            {
                                                if (charge_state_to_sign(lyts_six.get_charge_state(c1)) !=
                                                    get_charge_state_defect(1, j, c1))
                                                {
                                                    counter_unmatched += 1;
                                                }
                                            }
                                        });
                                }
                                if (counter_unmatched != 0)
                                {
                                    continue;
                                }

                                for (const auto& lyts_seven : lyt_seven)
                                {
                                    uint64_t counter_three = 0;
                                    for (const auto& neighbor_cell : all_defect_cells[2])
                                    {
                                        lyts_seven.foreach_cell(
                                            [&counter_three, &neighbor_cell, &lyts_seven, &three, this](const auto& c1)
                                            {
                                                if (c1 == neighbor_cell)
                                                {
                                                    if (charge_state_to_sign(lyts_seven.get_charge_state(c1)) !=
                                                        get_charge_state_defect(2, three, c1))
                                                    {
                                                        counter_three += 1;
                                                    }
                                                }
                                            });
                                    }
                                    if (counter_three != 0)
                                    {
                                        continue;
                                    }

                                    for (auto eight = 0u; eight < lyt_eight.size(); eight++)
                                    {
                                        uint64_t counter_unmatched_4 = 0;
                                        for (const auto& neighbor_cell_four : all_defect_cells[3])
                                        {
                                            lyt_eight[eight].foreach_cell(
                                                [&counter_unmatched_4, &neighbor_cell_four, &lyt_eight, &four, &eight,
                                                 this](const auto& c1)
                                                {
                                                    if (c1 == neighbor_cell_four)
                                                    {
                                                        if (charge_state_to_sign(lyt_eight[eight].get_charge_state(
                                                                c1)) != get_charge_state_defect(3, four, c1))
                                                        {
                                                            counter_unmatched_4 += 1;
                                                        }
                                                    }
                                                });
                                        }
                                        if (counter_unmatched_4 != 0)
                                        {
                                            continue;
                                        }

                                        for (auto nine = 0u; nine < lyt_nine.size(); nine++)
                                        {
                                            uint64_t counter_unmatched_five = 0;
                                            for (const auto& neighbor_cell_five : all_defect_cells[4])
                                            {
                                                lyt_nine[nine].foreach_cell(
                                                    [&counter_unmatched_five, &neighbor_cell_five, &lyt_nine, &five,
                                                     &nine, this](const auto& c1)
                                                    {
                                                        if (c1 == neighbor_cell_five)
                                                        {
                                                            if (charge_state_to_sign(lyt_nine[nine].get_charge_state(
                                                                    c1)) != get_charge_state_defect(4, five, c1))
                                                            {
                                                                counter_unmatched_five += 1;
                                                            }
                                                        }
                                                    });
                                            }
                                            if (counter_unmatched_five != 0)
                                            {
                                                continue;
                                            }

                                            for (auto t = 0u; t < lyt_ten.size(); t++)
                                            {
                                                for (auto l = 0u; l < lyt_11.size(); l++)
                                                {
                                                    for (const auto& lyts_12 : lyt_12)
                                                    {
                                                        uint64_t counter_unmatched_9 = 0;
                                                        for (const auto& neighbor_cell_nine : all_defect_cells[8])
                                                        {
                                                            lyts_12.foreach_cell(
                                                                [&counter_unmatched_9, &neighbor_cell_nine, &lyts_12,
                                                                 &nine, this](const auto& c1)
                                                                {
                                                                    if (c1 == neighbor_cell_nine)
                                                                    {
                                                                        if (charge_state_to_sign(
                                                                                lyts_12.get_charge_state(c1)) !=
                                                                            get_charge_state_defect(8, nine, c1))
                                                                        {
                                                                            counter_unmatched_9 += 1;
                                                                        }
                                                                    }
                                                                });
                                                        }
                                                        if (counter_unmatched_9 != 0)
                                                        {
                                                            continue;
                                                        }

                                                        uint64_t counter_unmatched_8 = 0;
                                                        for (const auto& neighbor_cell_eight : all_defect_cells[7])
                                                        {
                                                            lyts_12.foreach_cell(
                                                                [&counter_unmatched_8, &neighbor_cell_eight, &lyts_12,
                                                                 &eight, this](const auto& c1)
                                                                {
                                                                    if (c1 == neighbor_cell_eight)
                                                                    {
                                                                        if (charge_state_to_sign(
                                                                                lyts_12.get_charge_state(c1)) !=
                                                                            get_charge_state_defect(7, eight, c1))
                                                                        {
                                                                            counter_unmatched_8 += 1;
                                                                        }
                                                                    }
                                                                });
                                                        }
                                                        if (counter_unmatched_8 != 0)
                                                        {
                                                            continue;
                                                        }

                                                        for (const auto& lyts_13 : lyt_13)
                                                        {
                                                            uint64_t counter_unmatched_eleven = 0;
                                                            for (const auto& neighbor_cell : all_defect_cells[10])
                                                            {
                                                                lyts_13.foreach_cell(
                                                                    [&counter_unmatched_eleven, &neighbor_cell,
                                                                     &lyts_13, &l, this](const auto& c1)
                                                                    {
                                                                        if (c1 == neighbor_cell)
                                                                        {
                                                                            if (charge_state_to_sign(
                                                                                    lyts_13.get_charge_state(c1)) !=
                                                                                get_charge_state_defect(10, l, c1))
                                                                            {
                                                                                counter_unmatched_eleven += 1;
                                                                            }
                                                                        }
                                                                    });
                                                            }
                                                            if (counter_unmatched_eleven != 0)
                                                            {
                                                                continue;
                                                            }

                                                            uint64_t counter_unmatched_13 = 0;
                                                            for (const auto& neighbor_cell : all_defect_cells[9])
                                                            {
                                                                lyts_13.foreach_cell(
                                                                    [&counter_unmatched_13, &neighbor_cell, &lyts_13,
                                                                     &t, this](const auto& c1)
                                                                    {
                                                                        if (c1 == neighbor_cell)
                                                                        {
                                                                            if (charge_state_to_sign(
                                                                                    lyts_13.get_charge_state(c1)) !=
                                                                                get_charge_state_defect(9, t, c1))
                                                                            {
                                                                                counter_unmatched_13 += 1;
                                                                            }
                                                                        }
                                                                    });
                                                            }
                                                            if (counter_unmatched_13 != 0)
                                                            {
                                                                continue;
                                                            }

                                                            for (const auto& lyts_14 : lyt_14)
                                                            {
                                                                for (const auto& lyts_15 : lyt_15)
                                                                {
                                                                    lyt_one[i].foreach_cell(
                                                                        [this, &charge_lyt, &lyt_one,
                                                                         &i](const auto& c1) {
                                                                            charge_lyt.assign_charge_state(
                                                                                c1, lyt_one[i].get_charge_state(c1),
                                                                                false);
                                                                        });
                                                                    lyt_two[j].foreach_cell(
                                                                        [this, &charge_lyt, &lyt_two,
                                                                         &j](const auto& c1) {
                                                                            charge_lyt.assign_charge_state(
                                                                                c1, lyt_two[j].get_charge_state(c1),
                                                                                false);
                                                                        });
                                                                    lyt_three[three].foreach_cell(
                                                                        [this, &charge_lyt, &lyt_three,
                                                                         &three](const auto& c1) {
                                                                            charge_lyt.assign_charge_state(
                                                                                c1,
                                                                                lyt_three[three].get_charge_state(c1),
                                                                                false);
                                                                        });
                                                                    lyt_four[four].foreach_cell(
                                                                        [this, &charge_lyt, &lyt_four,
                                                                         &four](const auto& c1) {
                                                                            charge_lyt.assign_charge_state(
                                                                                c1, lyt_four[four].get_charge_state(c1),
                                                                                false);
                                                                        });
                                                                    lyt_five[five].foreach_cell(
                                                                        [this, &charge_lyt, &lyt_five,
                                                                         &five](const auto& c1) {
                                                                            charge_lyt.assign_charge_state(
                                                                                c1, lyt_five[five].get_charge_state(c1),
                                                                                false);
                                                                        });
                                                                    lyts_six.foreach_cell(
                                                                        [this, &charge_lyt, &lyts_six](const auto& c1) {
                                                                            charge_lyt.assign_charge_state(
                                                                                c1, lyts_six.get_charge_state(c1),
                                                                                false);
                                                                        });
                                                                    lyts_seven.foreach_cell(
                                                                        [this, &charge_lyt, &lyts_seven](const auto& c1)
                                                                        {
                                                                            charge_lyt.assign_charge_state(
                                                                                c1, lyts_seven.get_charge_state(c1),
                                                                                false);
                                                                        });
                                                                    lyt_eight[eight].foreach_cell(
                                                                        [this, &charge_lyt, &lyt_eight,
                                                                         &eight](const auto& c1) {
                                                                            charge_lyt.assign_charge_state(
                                                                                c1,
                                                                                lyt_eight[eight].get_charge_state(c1),
                                                                                false);
                                                                        });
                                                                    lyt_nine[nine].foreach_cell(
                                                                        [this, &charge_lyt, &lyt_nine,
                                                                         &nine](const auto& c1) {
                                                                            charge_lyt.assign_charge_state(
                                                                                c1, lyt_nine[nine].get_charge_state(c1),
                                                                                false);
                                                                        });
                                                                    lyt_ten[t].foreach_cell(
                                                                        [this, &charge_lyt, &lyt_ten,
                                                                         &t](const auto& c1) {
                                                                            charge_lyt.assign_charge_state(
                                                                                c1, lyt_ten[t].get_charge_state(c1),
                                                                                false);
                                                                        });
                                                                    lyt_11[l].foreach_cell(
                                                                        [this, &charge_lyt, &lyt_11, &l](const auto& c1)
                                                                        {
                                                                            charge_lyt.assign_charge_state(
                                                                                c1, lyt_11[l].get_charge_state(c1),
                                                                                false);
                                                                        });
                                                                    lyts_12.foreach_cell(
                                                                        [this, &charge_lyt, &lyts_12](const auto& c1) {
                                                                            charge_lyt.assign_charge_state(
                                                                                c1, lyts_12.get_charge_state(c1),
                                                                                false);
                                                                        });
                                                                    lyts_13.foreach_cell(
                                                                        [this, &charge_lyt, &lyts_13](const auto& c1) {
                                                                            charge_lyt.assign_charge_state(
                                                                                c1, lyts_13.get_charge_state(c1),
                                                                                false);
                                                                        });
                                                                    lyts_14.foreach_cell(
                                                                        [this, &charge_lyt, &lyts_14](const auto& c1) {
                                                                            charge_lyt.assign_charge_state(
                                                                                c1, lyts_14.get_charge_state(c1),
                                                                                false);
                                                                        });
                                                                    lyts_15.foreach_cell(
                                                                        [this, &charge_lyt, &lyts_15](const auto& c1) {
                                                                            charge_lyt.assign_charge_state(
                                                                                c1, lyts_15.get_charge_state(c1),
                                                                                false);
                                                                        });
                                                                    charge_lyt.update_after_charge_change();
                                                                    if (charge_lyt.is_physically_valid())
                                                                    {
                                                                        if (charge_lyt.get_system_energy() <
                                                                            energy_threas)
                                                                        {
                                                                            std::vector<
                                                                                charge_distribution_surface<Lyt>>
                                                                                lyts{};
                                                                            std::cout << charge_lyt.get_system_energy()
                                                                                      << std::endl;

                                                                            sidb_simulation_result<Lyt> sim_result{};
                                                                            sim_result.algorithm_name = "ExGS";
                                                                            charge_distribution_surface<Lyt>
                                                                                charge_lyt_copy{charge_lyt};
                                                                            lyts.emplace_back(charge_lyt_copy);
                                                                            sim_result.charge_distributions = lyts;
                                                                            energy_threas =
                                                                                charge_lyt.get_system_energy();
                                                                            write_sqd_sim_result<Lyt>(sim_result,
                                                                                                      "/Users/"
                                                                                                      "jandrewniok/"
                                                                                                      "CLionProjects/"
                                                                                                      "fiction_fork/"
                                                                                                      "experiments/"
                                                                                                      "result.xml");
                                                                        }
                                                                    }
                                                                    counter += 1;
                                                                    if (counter % 100000 == 0)
                                                                    {
                                                                        std::cout << counter << std::endl;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    void combining_all_16()
    {
        auto compareFunc =
            [](const charge_distribution_surface<Lyt>& lyt1, const charge_distribution_surface<Lyt>& lyt2)
        { return lyt1.get_system_energy() < lyt2.get_system_energy(); };

        std::cout << "combining starts: " << std::to_string(lyts_of_regions.size()) << std::endl;
        uint64_t counter_lyts = 1;
        for (const auto& lyts_region : lyts_of_regions)
        {
            counter_lyts *= lyts_region.size();
        }
        std::cout << "number enumerations: " << std::to_string(counter_lyts) << std::endl;

        auto lyt_one   = lyts_of_regions[0];
        auto lyt_two   = lyts_of_regions[1];
        auto lyt_three = lyts_of_regions[2];
        auto lyt_four  = lyts_of_regions[3];
        auto lyt_five  = lyts_of_regions[4];
        auto lyt_six   = lyts_of_regions[5];
        auto lyt_seven = lyts_of_regions[6];
        auto lyt_eight = lyts_of_regions[7];
        auto lyt_nine  = lyts_of_regions[8];
        auto lyt_ten   = lyts_of_regions[9];
        auto lyt_11    = lyts_of_regions[10];
        auto lyt_12    = lyts_of_regions[11];
        auto lyt_13    = lyts_of_regions[12];
        auto lyt_14    = lyts_of_regions[13];
        auto lyt_15    = lyts_of_regions[14];
        auto lyt_16    = lyts_of_regions[15];

        std::sort(lyt_one.begin(), lyt_one.end(), compareFunc);
        std::sort(lyt_two.begin(), lyt_two.end(), compareFunc);
        std::sort(lyt_three.begin(), lyt_three.end(), compareFunc);
        std::sort(lyt_four.begin(), lyt_four.end(), compareFunc);
        std::sort(lyt_five.begin(), lyt_five.end(), compareFunc);
        std::sort(lyt_six.begin(), lyt_six.end(), compareFunc);
        std::sort(lyt_seven.begin(), lyt_seven.end(), compareFunc);
        std::sort(lyt_eight.begin(), lyt_eight.end(), compareFunc);
        std::sort(lyt_nine.begin(), lyt_nine.end(), compareFunc);
        std::sort(lyt_ten.begin(), lyt_ten.end(), compareFunc);
        std::sort(lyt_11.begin(), lyt_11.end(), compareFunc);
        std::sort(lyt_12.begin(), lyt_12.end(), compareFunc);
        std::sort(lyt_13.begin(), lyt_13.end(), compareFunc);
        std::sort(lyt_14.begin(), lyt_14.end(), compareFunc);
        std::sort(lyt_15.begin(), lyt_15.end(), compareFunc);
        std::sort(lyt_16.begin(), lyt_16.end(), compareFunc);

        //        int                                           number = 5;
        //        std::vector<charge_distribution_surface<Lyt>> lyt_ones(
        //            lyt_one.begin(), lyt_one.begin() + std::min(number, static_cast<int>(lyt_one.size())));
        //        std::vector<charge_distribution_surface<Lyt>> lyt_twos(
        //            lyt_two.begin(), lyt_two.begin() + std::min(number, static_cast<int>(lyt_two.size())));
        //        std::vector<charge_distribution_surface<Lyt>> lyt_threes(
        //            lyt_three.begin(), lyt_three.begin() + std::min(number, static_cast<int>(lyt_three.size())));
        //        std::vector<charge_distribution_surface<Lyt>> lyt_fours(
        //            lyt_four.begin(), lyt_four.begin() + std::min(number, static_cast<int>(lyt_four.size())));
        //
        //        std::vector<charge_distribution_surface<Lyt>> lyt_fives(
        //            lyt_five.begin(), lyt_five.begin() + std::min(number, static_cast<int>(lyt_five.size())));
        //        std::vector<charge_distribution_surface<Lyt>> lyt_sixs(
        //            lyt_six.begin(), lyt_six.begin() + std::min(number, static_cast<int>(lyt_six.size())));
        //        std::vector<charge_distribution_surface<Lyt>> lyt_sevens(
        //            lyt_seven.begin(), lyt_seven.begin() + std::min(number, static_cast<int>(lyt_seven.size())));
        //        std::vector<charge_distribution_surface<Lyt>> lyt_eights(
        //            lyt_eight.begin(), lyt_eight.begin() + std::min(number, static_cast<int>(lyt_eight.size())));
        //
        //        std::vector<charge_distribution_surface<Lyt>> lyt_nines(
        //            lyt_nine.begin(), lyt_nine.begin() + std::min(number, static_cast<int>(lyt_nine.size())));
        //        std::vector<charge_distribution_surface<Lyt>> lyt_tens(
        //            lyt_ten.begin(), lyt_ten.begin() + std::min(number, static_cast<int>(lyt_ten.size())));
        //        std::vector<charge_distribution_surface<Lyt>> lyt_11s(
        //            lyt_11.begin(), lyt_11.begin() + std::min(number, static_cast<int>(lyt_11.size())));
        //
        //        std::vector<charge_distribution_surface<Lyt>> lyt_12s(
        //            lyt_12.begin(), lyt_12.begin() + std::min(number, static_cast<int>(lyt_12.size())));
        //        std::vector<charge_distribution_surface<Lyt>> lyt_13s(
        //            lyt_13.begin(), lyt_13.begin() + std::min(number, static_cast<int>(lyt_13.size())));
        //        std::vector<charge_distribution_surface<Lyt>> lyt_14s(
        //            lyt_14.begin(), lyt_14.begin() + std::min(number, static_cast<int>(lyt_14.size())));
        //        std::vector<charge_distribution_surface<Lyt>> lyt_15s(
        //            lyt_15.begin(), lyt_15.begin() + std::min(number, static_cast<int>(lyt_15.size())));
        //        std::vector<charge_distribution_surface<Lyt>> lyt_16s(
        //            lyt_16.begin(), lyt_16.begin() + std::min(number, static_cast<int>(lyt_16.size())));

        charge_distribution_surface<Lyt> charge_lyt{layout};
        uint64_t                         counter = 0;
        std::vector<double>              valid_energies{};
        double                           energy_threas = 1000;
        for (auto i = 0u; i < lyt_one.size(); i++)
        {
            for (auto j = 0u; j < lyt_two.size(); j++)
            {
                for (auto three = 0u; three < lyt_three.size(); three++)
                {
                    for (auto four = 0u; four < lyt_four.size(); four++)
                    {
                        for (auto five = 0u; five < lyt_five.size(); five++)
                        {
                            for (const auto& lyts_six : lyt_six)
                            {
                                uint64_t counter_unmatched_one = 0;
                                for (const auto& neighbor_cell : all_defect_cells[0])
                                {
                                    lyts_six.foreach_cell(
                                        [&counter_unmatched_one, &neighbor_cell, &lyts_six, &i, this](const auto& c1)
                                        {
                                            if (c1 == neighbor_cell)
                                            {
                                                if (charge_state_to_sign(lyts_six.get_charge_state(c1)) !=
                                                    get_charge_state_defect(0, i, c1))
                                                {
                                                    counter_unmatched_one += 1;
                                                }
                                            }
                                        });
                                }
                                if (counter_unmatched_one != 0)
                                {
                                    continue;
                                }

                                uint64_t counter_unmatched = 0;
                                for (const auto& neighbor_cell : all_defect_cells[1])
                                {
                                    lyts_six.foreach_cell(
                                        [&counter_unmatched, &neighbor_cell, &lyts_six, &j, this](const auto& c1)
                                        {
                                            if (c1 == neighbor_cell)
                                            {
                                                if (charge_state_to_sign(lyts_six.get_charge_state(c1)) !=
                                                    get_charge_state_defect(1, j, c1))
                                                {
                                                    counter_unmatched += 1;
                                                }
                                            }
                                        });
                                }
                                if (counter_unmatched != 0)
                                {
                                    continue;
                                }

                                for (const auto& lyts_seven : lyt_seven)
                                {
                                    uint64_t counter_three = 0;
                                    for (const auto& neighbor_cell : all_defect_cells[2])
                                    {
                                        lyts_seven.foreach_cell(
                                            [&counter_three, &neighbor_cell, &lyts_seven, &three, this](const auto& c1)
                                            {
                                                if (c1 == neighbor_cell)
                                                {
                                                    if (charge_state_to_sign(lyts_seven.get_charge_state(c1)) !=
                                                        get_charge_state_defect(2, three, c1))
                                                    {
                                                        counter_three += 1;
                                                    }
                                                }
                                            });
                                    }
                                    if (counter_three != 0)
                                    {
                                        continue;
                                    }

                                    for (auto eight = 0u; eight < lyt_eight.size(); eight++)
                                    {
                                        uint64_t counter_unmatched_4 = 0;
                                        for (const auto& neighbor_cell_four : all_defect_cells[3])
                                        {
                                            lyt_eight[eight].foreach_cell(
                                                [&counter_unmatched_4, &neighbor_cell_four, &lyt_eight, &four, &eight,
                                                 this](const auto& c1)
                                                {
                                                    if (c1 == neighbor_cell_four)
                                                    {
                                                        if (charge_state_to_sign(lyt_eight[eight].get_charge_state(
                                                                c1)) != get_charge_state_defect(3, four, c1))
                                                        {
                                                            counter_unmatched_4 += 1;
                                                        }
                                                    }
                                                });
                                        }
                                        if (counter_unmatched_4 != 0)
                                        {
                                            continue;
                                        }

                                        for (auto nine = 0u; nine < lyt_nine.size(); nine++)
                                        {
                                            uint64_t counter_unmatched_five = 0;
                                            for (const auto& neighbor_cell_five : all_defect_cells[4])
                                            {
                                                lyt_nine[nine].foreach_cell(
                                                    [&counter_unmatched_five, &neighbor_cell_five, &lyt_nine, &five,
                                                     &nine, this](const auto& c1)
                                                    {
                                                        if (c1 == neighbor_cell_five)
                                                        {
                                                            if (charge_state_to_sign(lyt_nine[nine].get_charge_state(
                                                                    c1)) != get_charge_state_defect(4, five, c1))
                                                            {
                                                                counter_unmatched_five += 1;
                                                            }
                                                        }
                                                    });
                                            }
                                            if (counter_unmatched_five != 0)
                                            {
                                                continue;
                                            }

                                            for (auto t = 0u; t < lyt_ten.size(); t++)
                                            {
                                                for (auto l = 0u; l < lyt_11.size(); l++)
                                                {
                                                    for (const auto& lyts_12 : lyt_12)
                                                    {
                                                        uint64_t counter_unmatched_9 = 0;
                                                        for (const auto& neighbor_cell_nine : all_defect_cells[8])
                                                        {
                                                            lyts_12.foreach_cell(
                                                                [&counter_unmatched_9, &neighbor_cell_nine, &lyts_12,
                                                                 &nine, this](const auto& c1)
                                                                {
                                                                    if (c1 == neighbor_cell_nine)
                                                                    {
                                                                        if (charge_state_to_sign(
                                                                                lyts_12.get_charge_state(c1)) !=
                                                                            get_charge_state_defect(8, nine, c1))
                                                                        {
                                                                            counter_unmatched_9 += 1;
                                                                        }
                                                                    }
                                                                });
                                                        }
                                                        if (counter_unmatched_9 != 0)
                                                        {
                                                            continue;
                                                        }

                                                        uint64_t counter_unmatched_8 = 0;
                                                        for (const auto& neighbor_cell_eight : all_defect_cells[7])
                                                        {
                                                            lyts_12.foreach_cell(
                                                                [&counter_unmatched_8, &neighbor_cell_eight, &lyts_12,
                                                                 &eight, this](const auto& c1)
                                                                {
                                                                    if (c1 == neighbor_cell_eight)
                                                                    {
                                                                        if (charge_state_to_sign(
                                                                                lyts_12.get_charge_state(c1)) !=
                                                                            get_charge_state_defect(7, eight, c1))
                                                                        {
                                                                            counter_unmatched_8 += 1;
                                                                        }
                                                                    }
                                                                });
                                                        }
                                                        if (counter_unmatched_8 != 0)
                                                        {
                                                            continue;
                                                        }

                                                        for (const auto& lyts_13 : lyt_13)
                                                        {
                                                            uint64_t counter_unmatched_eleven = 0;
                                                            for (const auto& neighbor_cell : all_defect_cells[10])
                                                            {
                                                                lyts_13.foreach_cell(
                                                                    [&counter_unmatched_eleven, &neighbor_cell,
                                                                     &lyts_13, &l, this](const auto& c1)
                                                                    {
                                                                        if (c1 == neighbor_cell)
                                                                        {
                                                                            if (charge_state_to_sign(
                                                                                    lyts_13.get_charge_state(c1)) !=
                                                                                get_charge_state_defect(10, l, c1))
                                                                            {
                                                                                counter_unmatched_eleven += 1;
                                                                            }
                                                                        }
                                                                    });
                                                            }
                                                            if (counter_unmatched_eleven != 0)
                                                            {
                                                                continue;
                                                            }

                                                            uint64_t counter_unmatched_13 = 0;
                                                            for (const auto& neighbor_cell : all_defect_cells[9])
                                                            {
                                                                lyts_13.foreach_cell(
                                                                    [&counter_unmatched_13, &neighbor_cell, &lyts_13,
                                                                     &t, this](const auto& c1)
                                                                    {
                                                                        if (c1 == neighbor_cell)
                                                                        {
                                                                            if (charge_state_to_sign(
                                                                                    lyts_13.get_charge_state(c1)) !=
                                                                                get_charge_state_defect(9, t, c1))
                                                                            {
                                                                                counter_unmatched_13 += 1;
                                                                            }
                                                                        }
                                                                    });
                                                            }
                                                            if (counter_unmatched_13 != 0)
                                                            {
                                                                continue;
                                                            }

                                                            for (const auto& lyts_14 : lyt_14)
                                                            {
                                                                for (const auto& lyts_15 : lyt_15)
                                                                {
                                                                    for (const auto& lyts_16 : lyt_16)
                                                                    {
                                                                        lyt_one[i].foreach_cell(
                                                                            [this, &charge_lyt, &lyt_one,
                                                                             &i](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1, lyt_one[i].get_charge_state(c1),
                                                                                    false);
                                                                            });
                                                                        lyt_two[j].foreach_cell(
                                                                            [this, &charge_lyt, &lyt_two,
                                                                             &j](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1, lyt_two[j].get_charge_state(c1),
                                                                                    false);
                                                                            });
                                                                        lyt_three[three].foreach_cell(
                                                                            [this, &charge_lyt, &lyt_three,
                                                                             &three](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1,
                                                                                    lyt_three[three].get_charge_state(
                                                                                        c1),
                                                                                    false);
                                                                            });
                                                                        lyt_four[four].foreach_cell(
                                                                            [this, &charge_lyt, &lyt_four,
                                                                             &four](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1,
                                                                                    lyt_four[four].get_charge_state(c1),
                                                                                    false);
                                                                            });
                                                                        lyt_five[five].foreach_cell(
                                                                            [this, &charge_lyt, &lyt_five,
                                                                             &five](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1,
                                                                                    lyt_five[five].get_charge_state(c1),
                                                                                    false);
                                                                            });
                                                                        lyts_six.foreach_cell(
                                                                            [this, &charge_lyt,
                                                                             &lyts_six](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1, lyts_six.get_charge_state(c1),
                                                                                    false);
                                                                            });
                                                                        lyts_seven.foreach_cell(
                                                                            [this, &charge_lyt,
                                                                             &lyts_seven](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1, lyts_seven.get_charge_state(c1),
                                                                                    false);
                                                                            });
                                                                        lyt_eight[eight].foreach_cell(
                                                                            [this, &charge_lyt, &lyt_eight,
                                                                             &eight](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1,
                                                                                    lyt_eight[eight].get_charge_state(
                                                                                        c1),
                                                                                    false);
                                                                            });
                                                                        lyt_nine[nine].foreach_cell(
                                                                            [this, &charge_lyt, &lyt_nine,
                                                                             &nine](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1,
                                                                                    lyt_nine[nine].get_charge_state(c1),
                                                                                    false);
                                                                            });
                                                                        lyt_ten[t].foreach_cell(
                                                                            [this, &charge_lyt, &lyt_ten,
                                                                             &t](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1, lyt_ten[t].get_charge_state(c1),
                                                                                    false);
                                                                            });
                                                                        lyt_11[l].foreach_cell(
                                                                            [this, &charge_lyt, &lyt_11,
                                                                             &l](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1, lyt_11[l].get_charge_state(c1),
                                                                                    false);
                                                                            });
                                                                        lyts_12.foreach_cell(
                                                                            [this, &charge_lyt,
                                                                             &lyts_12](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1, lyts_12.get_charge_state(c1),
                                                                                    false);
                                                                            });
                                                                        lyts_13.foreach_cell(
                                                                            [this, &charge_lyt,
                                                                             &lyts_13](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1, lyts_13.get_charge_state(c1),
                                                                                    false);
                                                                            });
                                                                        lyts_14.foreach_cell(
                                                                            [this, &charge_lyt,
                                                                             &lyts_14](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1, lyts_14.get_charge_state(c1),
                                                                                    false);
                                                                            });
                                                                        lyts_15.foreach_cell(
                                                                            [this, &charge_lyt,
                                                                             &lyts_15](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1, lyts_15.get_charge_state(c1),
                                                                                    false);
                                                                            });

                                                                        lyts_16.foreach_cell(
                                                                            [this, &charge_lyt,
                                                                             &lyts_16](const auto& c1) {
                                                                                charge_lyt.assign_charge_state(
                                                                                    c1, lyts_16.get_charge_state(c1),
                                                                                    false);
                                                                            });
                                                                        charge_lyt.update_after_charge_change();
                                                                        if (charge_lyt.is_physically_valid())
                                                                        {
                                                                            if (charge_lyt.get_system_energy() <
                                                                                energy_threas)
                                                                            {
                                                                                std::vector<
                                                                                    charge_distribution_surface<Lyt>>
                                                                                    lyts{};
                                                                                std::cout
                                                                                    << charge_lyt.get_system_energy()
                                                                                    << std::endl;

                                                                                sidb_simulation_result<Lyt>
                                                                                    sim_result{};
                                                                                sim_result.algorithm_name = "ExGS";
                                                                                charge_distribution_surface<Lyt>
                                                                                    charge_lyt_copy{charge_lyt};
                                                                                lyts.emplace_back(charge_lyt_copy);
                                                                                sim_result.charge_distributions = lyts;
                                                                                energy_threas =
                                                                                    charge_lyt.get_system_energy();
                                                                                write_sqd_sim_result<Lyt>(sim_result,
                                                                                                          "/Users/"
                                                                                                          "jandrewnio"
                                                                                                          "k/"
                                                                                                          "CLionProje"
                                                                                                          "cts/"
                                                                                                          "fiction_"
                                                                                                          "fork/"
                                                                                                          "experiment"
                                                                                                          "s/"
                                                                                                          "result."
                                                                                                          "xml");
                                                                            }
                                                                        }
                                                                        counter += 1;
                                                                        if (counter % 100 == 0)
                                                                        {
                                                                            std::cout << counter << std::endl;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    void combining_all_11_feature()
    {
        auto compareFunc =
            [](const charge_distribution_surface<Lyt>& lyt1, const charge_distribution_surface<Lyt>& lyt2)
        { return lyt1.get_system_energy() < lyt2.get_system_energy(); };

        std::cout << "combining starts: " << std::to_string(lyts_of_regions.size()) << std::endl;
        uint64_t counter_lyts = 1;
        for (const auto& lyts_region : lyts_of_regions)
        {
            counter_lyts *= lyts_region.size();
        }
        std::cout << "number enumerations: " << std::to_string(counter_lyts) << std::endl;

        auto lyt_one   = lyts_of_regions[0];
        auto lyt_two   = lyts_of_regions[1];
        auto lyt_three = lyts_of_regions[2];
        auto lyt_four  = lyts_of_regions[3];
        auto lyt_five  = lyts_of_regions[4];
        auto lyt_six   = lyts_of_regions[5];
        auto lyt_seven = lyts_of_regions[6];
        auto lyt_eight = lyts_of_regions[7];
        auto lyt_nine  = lyts_of_regions[8];
        auto lyt_ten   = lyts_of_regions[9];
        auto lyt_11    = lyts_of_regions[10];

        std::cout << "defect_cells: " << std::to_string(all_defect_cells.size()) << std::endl;
        for (const auto& defects : all_defect_cells)
        {
            std::cout << "number of defects: " << std::to_string(defects.size()) << std::endl;
        }

        charge_distribution_surface<Lyt> charge_lyt{layout};
        uint64_t                         counter = 0;
        std::vector<double>              valid_energies{};
        double                           energy_threas = 1000;

        for (auto one = 0u; one < lyt_one.size(); one++)
        {
            for (auto two = 0u; two < lyt_two.size(); two++)
            {
                for (auto three = 0u; three < lyt_three.size(); three++)
                {
                    if (!layout_fullfilling_constraint(lyt_three[three], 0, one))
                    {
                        continue;
                    }
                    for (auto four = 0u; four < lyt_four.size(); four++)
                    {
                        if (!layout_fullfilling_constraint(lyt_four[four], 1, two))
                        {
                            continue;
                        }
                        for (auto five = 0u; five < lyt_five.size(); five++)
                        {
                            if (!layout_fullfilling_constraint(lyt_five[five], 2, three))
                            {
                                continue;
                            }
                            for (auto six = 0u; six < lyt_six.size(); six++)
                            {
                                if (!layout_fullfilling_constraint(lyt_six[six], 2, three))
                                {
                                    continue;
                                }
                                if (!layout_fullfilling_constraint(lyt_six[six], 3, four))
                                {
                                    continue;
                                }
                                for (auto seven = 0u; seven < lyt_seven.size(); seven++)
                                {
                                    if (!layout_fullfilling_constraint(lyt_seven[seven], 3, four))
                                    {
                                        continue;
                                    }

                                    for (auto eight = 0u; eight < lyt_eight.size(); eight++)
                                    {
                                        if (!layout_fullfilling_constraint(lyt_eight[eight], 2, three))
                                        {
                                            continue;
                                        }
                                        if (!layout_fullfilling_constraint(lyt_eight[eight], 3, four))
                                        {
                                            continue;
                                        }
                                        for (auto nine = 0u; nine < lyt_nine.size(); nine++)
                                        {
                                            if (!layout_fullfilling_constraint(lyt_nine[nine], 4, five))
                                            {
                                                continue;
                                            }
                                            if (!layout_fullfilling_constraint(lyt_nine[nine], 5, six))
                                            {
                                                continue;
                                            }
                                            for (auto ten = 0u; ten < lyt_ten.size(); ten++)
                                            {
                                                if (!layout_fullfilling_constraint(lyt_ten[ten], 6, seven))
                                                {
                                                    continue;
                                                }
                                                for (auto eleven = 0u; eleven < lyt_11.size(); eleven++)
                                                {
                                                    if (!layout_fullfilling_constraint(lyt_11[eleven], 7, eight))
                                                    {
                                                        continue;
                                                    }

                                                    lyt_one[one].foreach_cell(
                                                        [this, &charge_lyt, &lyt_one, &one](const auto& c1) {
                                                            charge_lyt.assign_charge_state(
                                                                c1, lyt_one[one].get_charge_state(c1), false);
                                                        });
                                                    lyt_two[two].foreach_cell(
                                                        [this, &charge_lyt, &lyt_two, &two](const auto& c1) {
                                                            charge_lyt.assign_charge_state(
                                                                c1, lyt_two[two].get_charge_state(c1), false);
                                                        });
                                                    lyt_three[three].foreach_cell(
                                                        [this, &charge_lyt, &lyt_three, &three](const auto& c1) {
                                                            charge_lyt.assign_charge_state(
                                                                c1, lyt_three[three].get_charge_state(c1), false);
                                                        });
                                                    lyt_four[four].foreach_cell(
                                                        [this, &charge_lyt, &lyt_four, &four](const auto& c1) {
                                                            charge_lyt.assign_charge_state(
                                                                c1, lyt_four[four].get_charge_state(c1), false);
                                                        });
                                                    lyt_five[five].foreach_cell(
                                                        [this, &charge_lyt, &lyt_five, &five](const auto& c1) {
                                                            charge_lyt.assign_charge_state(
                                                                c1, lyt_five[five].get_charge_state(c1), false);
                                                        });
                                                    lyt_six[six].foreach_cell(
                                                        [this, &charge_lyt, &lyt_six, &six](const auto& c1) {
                                                            charge_lyt.assign_charge_state(
                                                                c1, lyt_six[six].get_charge_state(c1), false);
                                                        });
                                                    lyt_seven[seven].foreach_cell(
                                                        [this, &charge_lyt, &lyt_seven, &seven](const auto& c1) {
                                                            charge_lyt.assign_charge_state(
                                                                c1, lyt_seven[seven].get_charge_state(c1), false);
                                                        });
                                                    lyt_eight[eight].foreach_cell(
                                                        [this, &charge_lyt, &lyt_eight, &eight](const auto& c1) {
                                                            charge_lyt.assign_charge_state(
                                                                c1, lyt_eight[eight].get_charge_state(c1), false);
                                                        });
                                                    lyt_nine[nine].foreach_cell(
                                                        [this, &charge_lyt, &lyt_nine, &nine](const auto& c1) {
                                                            charge_lyt.assign_charge_state(
                                                                c1, lyt_nine[nine].get_charge_state(c1), false);
                                                        });
                                                    lyt_ten[ten].foreach_cell(
                                                        [this, &charge_lyt, &lyt_ten, &ten](const auto& c1) {
                                                            charge_lyt.assign_charge_state(
                                                                c1, lyt_ten[ten].get_charge_state(c1), false);
                                                        });
                                                    lyt_11[eleven].foreach_cell(
                                                        [this, &charge_lyt, &lyt_11, &eleven](const auto& c1) {
                                                            charge_lyt.assign_charge_state(
                                                                c1, lyt_11[eleven].get_charge_state(c1), false);
                                                        });
                                                    charge_lyt.update_after_charge_change();
                                                    if (charge_lyt.is_physically_valid())
                                                    {
                                                        if (charge_lyt.get_system_energy() < energy_threas)
                                                        {
                                                            std::vector<charge_distribution_surface<Lyt>> lyts{};
                                                            std::cout << charge_lyt.get_system_energy() << std::endl;

                                                            sidb_simulation_result<Lyt> sim_result{};
                                                            sim_result.algorithm_name = "ExGS";
                                                            charge_distribution_surface<Lyt> charge_lyt_copy{
                                                                charge_lyt};
                                                            lyts.emplace_back(charge_lyt_copy);
                                                            sim_result.charge_distributions = lyts;
                                                            energy_threas = charge_lyt.get_system_energy();
                                                            write_sqd_sim_result<Lyt>(sim_result, "/Users/"
                                                                                                  "jandrewnio"
                                                                                                  "k/"
                                                                                                  "CLionProje"
                                                                                                  "cts/"
                                                                                                  "fiction_"
                                                                                                  "fork/"
                                                                                                  "experiment"
                                                                                                  "s/"
                                                                                                  "result."
                                                                                                  "xml");
                                                        }
                                                    }
                                                    counter += 1;
                                                    if (counter % 100000 == 0)
                                                    {
                                                        std::cout << counter << std::endl;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        if (counter == 0)
        {
            std::cout << "no path found" << std::endl;
        }
    }

    void combining_all_13_feature()
    {
        auto compareFunc =
            [](const charge_distribution_surface<Lyt>& lyt1, const charge_distribution_surface<Lyt>& lyt2)
        { return lyt1.get_system_energy() < lyt2.get_system_energy(); };

        std::cout << "combining starts: " << std::to_string(lyts_of_regions.size()) << std::endl;
        uint64_t counter_lyts = 1;
        for (const auto& lyts_region : lyts_of_regions)
        {
            counter_lyts *= lyts_region.size();
        }
        std::cout << "number enumerations: " << std::to_string(counter_lyts) << std::endl;

        auto lyt_one   = lyts_of_regions[0];
        auto lyt_two   = lyts_of_regions[1];
        auto lyt_three = lyts_of_regions[2];
        auto lyt_four  = lyts_of_regions[3];
        auto lyt_five  = lyts_of_regions[4];
        auto lyt_six   = lyts_of_regions[5];
        auto lyt_seven = lyts_of_regions[6];
        auto lyt_eight = lyts_of_regions[7];
        auto lyt_nine  = lyts_of_regions[8];
        auto lyt_ten   = lyts_of_regions[9];
        auto lyt_11    = lyts_of_regions[10];
        auto lyt_12    = lyts_of_regions[11];
        auto lyt_13    = lyts_of_regions[12];

        std::cout << "defect_cells: " << std::to_string(all_defect_cells.size()) << std::endl;
        for (const auto& defects : all_defect_cells)
        {
            std::cout << "number of defects: " << std::to_string(defects.size()) << std::endl;
        }

        charge_distribution_surface<Lyt> charge_lyt{layout};
        uint64_t                         counter = 0;
        std::vector<double>              valid_energies{};
        double                           energy_threas = 1000;

        for (auto one = 0u; one < lyt_one.size(); one++)
        {
            for (auto two = 0u; two < lyt_two.size(); two++)
            {
                for (auto three = 0u; three < lyt_three.size(); three++)
                {
                    for (auto four = 0u; four < lyt_four.size(); four++)
                    {
                        if (!layout_fullfilling_constraint(lyt_four[four], 0, one))
                        {
                            continue;
                        }
                        for (auto five = 0u; five < lyt_five.size(); five++)
                        {
                            if (!layout_fullfilling_constraint(lyt_five[five], 1, two))
                            {
                                continue;
                            }
                            for (auto six = 0u; six < lyt_six.size(); six++)
                            {
                                if (!layout_fullfilling_constraint(lyt_six[six], 2, three))
                                {
                                    continue;
                                }
                                for (auto seven = 0u; seven < lyt_seven.size(); seven++)
                                {
                                    if (!layout_fullfilling_constraint(lyt_seven[seven], 3, four))
                                    {
                                        continue;
                                    }
                                    for (auto eight = 0u; eight < lyt_eight.size(); eight++)
                                    {
                                        if (!layout_fullfilling_constraint(lyt_eight[eight], 4, five))
                                        {
                                            continue;
                                        }
                                        for (auto nine = 0u; nine < lyt_nine.size(); nine++)
                                        {
                                            if (!layout_fullfilling_constraint(lyt_nine[nine], 5, six))
                                            {
                                                continue;
                                            }
                                            for (auto ten = 0u; ten < lyt_ten.size(); ten++)
                                            {
                                                if (!layout_fullfilling_constraint(lyt_ten[ten], 6, seven))
                                                {
                                                    continue;
                                                }
                                                for (auto eleven = 0u; eleven < lyt_11.size(); eleven++)
                                                {
                                                    if (!layout_fullfilling_constraint(lyt_11[eleven], 7, eight))
                                                    {
                                                        continue;
                                                    }
                                                    if (!layout_fullfilling_constraint(lyt_11[eleven], 8, nine))
                                                    {
                                                        continue;
                                                    }
                                                    for (auto twelve = 0u; twelve < lyt_12.size(); twelve++)
                                                    {
                                                        if (!layout_fullfilling_constraint(lyt_12[twelve], 9, ten))
                                                        {
                                                            continue;
                                                        }
                                                        if (!layout_fullfilling_constraint(lyt_12[twelve], 10, eleven))
                                                        {
                                                            continue;
                                                        }
                                                        for (auto thirdteen = 0u; thirdteen < lyt_13.size();
                                                             thirdteen++)
                                                        {
                                                            combination_iterator_counter += 1;

                                                            lyt_one[one].foreach_cell(
                                                                [this, &charge_lyt, &lyt_one, &one](const auto& c1) {
                                                                    charge_lyt.assign_charge_state(
                                                                        c1, lyt_one[one].get_charge_state(c1), false);
                                                                });
                                                            lyt_two[two].foreach_cell(
                                                                [this, &charge_lyt, &lyt_two, &two](const auto& c1) {
                                                                    charge_lyt.assign_charge_state(
                                                                        c1, lyt_two[two].get_charge_state(c1), false);
                                                                });
                                                            lyt_three[three].foreach_cell(
                                                                [this, &charge_lyt, &lyt_three, &three](const auto& c1)
                                                                {
                                                                    charge_lyt.assign_charge_state(
                                                                        c1, lyt_three[three].get_charge_state(c1),
                                                                        false);
                                                                });
                                                            lyt_four[four].foreach_cell(
                                                                [this, &charge_lyt, &lyt_four, &four](const auto& c1) {
                                                                    charge_lyt.assign_charge_state(
                                                                        c1, lyt_four[four].get_charge_state(c1), false);
                                                                });
                                                            lyt_five[five].foreach_cell(
                                                                [this, &charge_lyt, &lyt_five, &five](const auto& c1) {
                                                                    charge_lyt.assign_charge_state(
                                                                        c1, lyt_five[five].get_charge_state(c1), false);
                                                                });
                                                            lyt_six[six].foreach_cell(
                                                                [this, &charge_lyt, &lyt_six, &six](const auto& c1) {
                                                                    charge_lyt.assign_charge_state(
                                                                        c1, lyt_six[six].get_charge_state(c1), false);
                                                                });
                                                            lyt_seven[seven].foreach_cell(
                                                                [this, &charge_lyt, &lyt_seven, &seven](const auto& c1)
                                                                {
                                                                    charge_lyt.assign_charge_state(
                                                                        c1, lyt_seven[seven].get_charge_state(c1),
                                                                        false);
                                                                });
                                                            lyt_eight[eight].foreach_cell(
                                                                [this, &charge_lyt, &lyt_eight, &eight](const auto& c1)
                                                                {
                                                                    charge_lyt.assign_charge_state(
                                                                        c1, lyt_eight[eight].get_charge_state(c1),
                                                                        false);
                                                                });
                                                            lyt_nine[nine].foreach_cell(
                                                                [this, &charge_lyt, &lyt_nine, &nine](const auto& c1) {
                                                                    charge_lyt.assign_charge_state(
                                                                        c1, lyt_nine[nine].get_charge_state(c1), false);
                                                                });
                                                            lyt_ten[ten].foreach_cell(
                                                                [this, &charge_lyt, &lyt_ten, &ten](const auto& c1) {
                                                                    charge_lyt.assign_charge_state(
                                                                        c1, lyt_ten[ten].get_charge_state(c1), false);
                                                                });
                                                            lyt_11[eleven].foreach_cell(
                                                                [this, &charge_lyt, &lyt_11, &eleven](const auto& c1) {
                                                                    charge_lyt.assign_charge_state(
                                                                        c1, lyt_11[eleven].get_charge_state(c1), false);
                                                                });
                                                            lyt_12[twelve].foreach_cell(
                                                                [this, &charge_lyt, &lyt_12, &twelve](const auto& c1) {
                                                                    charge_lyt.assign_charge_state(
                                                                        c1, lyt_12[twelve].get_charge_state(c1), false);
                                                                });
                                                            lyt_13[thirdteen].foreach_cell(
                                                                [this, &charge_lyt, &lyt_13, &thirdteen](const auto& c1)
                                                                {
                                                                    charge_lyt.assign_charge_state(
                                                                        c1, lyt_13[thirdteen].get_charge_state(c1),
                                                                        false);
                                                                });
                                                            charge_lyt.update_after_charge_change();
                                                            if (charge_lyt.is_physically_valid())
                                                            {
                                                                std::cout << combination_iterator_counter << std::endl;
                                                                if (charge_lyt.get_system_energy() < 1000)
                                                                {
                                                                    std::vector<charge_distribution_surface<Lyt>>
                                                                        lyts{};
                                                                    std::cout << charge_lyt.get_system_energy()
                                                                              << std::endl;

                                                                    sidb_simulation_result<Lyt> sim_result{};
                                                                    sim_result.algorithm_name = "ExGS";
                                                                    charge_distribution_surface<Lyt> charge_lyt_copy{
                                                                        charge_lyt};
                                                                    lyts.emplace_back(charge_lyt_copy);
                                                                    sim_result.charge_distributions = lyts;
                                                                    energy_threas = charge_lyt.get_system_energy();
                                                                    write_sqd_sim_result<Lyt>(sim_result, "/Users/"
                                                                                                          "jandrewnio"
                                                                                                          "k/"
                                                                                                          "CLionProje"
                                                                                                          "cts/"
                                                                                                          "fiction_"
                                                                                                          "fork/"
                                                                                                          "experiment"
                                                                                                          "s/"
                                                                                                          "result."
                                                                                                          "xml");
                                                                }
                                                            }
                                                            counter += 1;
                                                            if (counter % 100000 == 0)
                                                            {
                                                                std::cout << counter << std::endl;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        if (counter == 0)
        {
            std::cout << "no path found" << std::endl;
        }
    }

    void combining_all_19_feature()
    {
        auto compareFunc =
            [](const charge_distribution_surface<Lyt>& lyt1, const charge_distribution_surface<Lyt>& lyt2)
        { return lyt1.get_system_energy() < lyt2.get_system_energy(); };

        std::cout << "combining starts: " << std::to_string(lyts_of_regions.size()) << std::endl;
        uint64_t counter_lyts = 1;
        for (const auto& lyts_region : lyts_of_regions)
        {
            counter_lyts *= lyts_region.size();
        }
        std::cout << "number enumerations: " << std::to_string(counter_lyts) << std::endl;

        auto lyt_one   = lyts_of_regions[0];
        auto lyt_two   = lyts_of_regions[1];
        auto lyt_three = lyts_of_regions[2];
        auto lyt_four  = lyts_of_regions[3];
        auto lyt_five  = lyts_of_regions[4];
        auto lyt_six   = lyts_of_regions[5];
        auto lyt_seven = lyts_of_regions[6];
        auto lyt_eight = lyts_of_regions[7];
        auto lyt_nine  = lyts_of_regions[8];
        auto lyt_ten   = lyts_of_regions[9];
        auto lyt_11    = lyts_of_regions[10];
        auto lyt_12    = lyts_of_regions[11];
        auto lyt_13    = lyts_of_regions[12];
        auto lyt_14    = lyts_of_regions[13];
        auto lyt_15    = lyts_of_regions[14];
        auto lyt_16    = lyts_of_regions[15];
        auto lyt_17    = lyts_of_regions[16];
        auto lyt_18    = lyts_of_regions[17];
        auto lyt_19    = lyts_of_regions[18];

        std::cout << "defect_cells: " << std::to_string(all_defect_cells.size()) << std::endl;
        for (const auto& defects : all_defect_cells)
        {
            std::cout << "number of defects: " << std::to_string(defects.size()) << std::endl;
        }

        charge_distribution_surface<Lyt> charge_lyt{layout};
        uint64_t                         counter = 0;
        std::vector<double>              valid_energies{};
        double                           energy_threas = 1000;

        for (auto one = 0u; one < lyt_one.size(); one++)
        {
            for (auto two = 0u; two < lyt_two.size(); two++)
            {
                for (auto three = 0u; three < lyt_three.size(); three++)
                {
                    for (auto four = 0u; four < lyt_four.size(); four++)
                    {
                        for (auto five = 0u; five < lyt_five.size(); five++)
                        {
                            if (!layout_fullfilling_constraint(lyt_five[five], 0, one))
                            {
                                continue;
                            }
                            for (auto six = 0u; six < lyt_six.size(); six++)
                            {
                                if (!layout_fullfilling_constraint(lyt_six[six], 1, one))
                                {
                                    continue;
                                }
                                for (auto seven = 0u; seven < lyt_seven.size(); seven++)
                                {
                                    if (!layout_fullfilling_constraint(lyt_seven[seven], 2, three))
                                    {
                                        continue;
                                    }
                                    for (auto eight = 0u; eight < lyt_eight.size(); eight++)
                                    {
                                        if (!layout_fullfilling_constraint(lyt_eight[eight], 3, four))
                                        {
                                            continue;
                                        }
                                        for (auto nine = 0u; nine < lyt_nine.size(); nine++)
                                        {
                                            if (!layout_fullfilling_constraint(lyt_nine[nine], 4, five))
                                            {
                                                continue;
                                            }
                                            if (!layout_fullfilling_constraint(lyt_nine[nine], 5, six))
                                            {
                                                continue;
                                            }
                                            for (auto ten = 0u; ten < lyt_ten.size(); ten++)
                                            {
                                                if (!layout_fullfilling_constraint(lyt_ten[ten], 5, six))
                                                {
                                                    continue;
                                                }
                                                for (auto eleven = 0u; eleven < lyt_11.size(); eleven++)
                                                {
                                                    if (!layout_fullfilling_constraint(lyt_11[eleven], 6, seven))
                                                    {
                                                        continue;
                                                    }
                                                    for (auto twelve = 0u; twelve < lyt_12.size(); twelve++)
                                                    {
                                                        if (!layout_fullfilling_constraint(lyt_12[twelve], 7, eight))
                                                        {
                                                            continue;
                                                        }
                                                        for (auto thirdteen = 0u; thirdteen < lyt_13.size();
                                                             thirdteen++)
                                                        {
                                                            if (!layout_fullfilling_constraint(lyt_13[thirdteen], 8,
                                                                                               nine))
                                                            {
                                                                continue;
                                                            }
                                                            for (auto fourteen = 0u; fourteen < lyt_14.size();
                                                                 fourteen++)
                                                            {
                                                                if (!layout_fullfilling_constraint(lyt_14[fourteen], 9,
                                                                                                   ten))
                                                                {
                                                                    continue;
                                                                }
                                                                if (!layout_fullfilling_constraint(lyt_14[fourteen], 10,
                                                                                                   eleven))
                                                                {
                                                                    continue;
                                                                }
                                                                for (auto fiveteen = 0u; fiveteen < lyt_15.size();
                                                                     fiveteen++)
                                                                {
                                                                    if (!layout_fullfilling_constraint(lyt_15[fiveteen],
                                                                                                       10, eleven))
                                                                    {
                                                                        continue;
                                                                    }
                                                                    if (!layout_fullfilling_constraint(lyt_15[fiveteen],
                                                                                                       11, twelve))
                                                                    {
                                                                        continue;
                                                                    }
                                                                    for (auto sixteen = 0u; sixteen < lyt_16.size();
                                                                         sixteen++)
                                                                    {
                                                                        if (!layout_fullfilling_constraint(
                                                                                lyt_16[sixteen], 12, thirdteen))
                                                                        {
                                                                            continue;
                                                                        }
                                                                        for (auto seventeen = 0u;
                                                                             seventeen < lyt_17.size(); seventeen++)
                                                                        {
                                                                            if (!layout_fullfilling_constraint(
                                                                                    lyt_17[seventeen], 13, fourteen))
                                                                            {
                                                                                continue;
                                                                            }
                                                                            if (!layout_fullfilling_constraint(
                                                                                    lyt_17[seventeen], 14, fiveteen))
                                                                            {
                                                                                continue;
                                                                            }
                                                                            for (auto eightteen = 0u;
                                                                                 eightteen < lyt_18.size(); eightteen++)
                                                                            {
                                                                                if (!layout_fullfilling_constraint(
                                                                                        lyt_18[eightteen], 14,
                                                                                        fiveteen))
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                if (!layout_fullfilling_constraint(
                                                                                        lyt_18[eightteen], 15, sixteen))
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                for (auto nineteen = 0u;
                                                                                     nineteen < lyt_19.size();
                                                                                     nineteen++)
                                                                                {
                                                                                    if (!layout_fullfilling_constraint(
                                                                                            lyt_19[nineteen], 17,
                                                                                            eightteen))
                                                                                    {
                                                                                        continue;
                                                                                    }

                                                                                    lyt_one[one].foreach_cell(
                                                                                        [this, &charge_lyt, &lyt_one,
                                                                                         &one](const auto& c1) {
                                                                                            charge_lyt
                                                                                                .assign_charge_state(
                                                                                                    c1,
                                                                                                    lyt_one[one]
                                                                                                        .get_charge_state(
                                                                                                            c1),
                                                                                                    false);
                                                                                        });
                                                                                    lyt_two[two].foreach_cell(
                                                                                        [this, &charge_lyt, &lyt_two,
                                                                                         &two](const auto& c1) {
                                                                                            charge_lyt
                                                                                                .assign_charge_state(
                                                                                                    c1,
                                                                                                    lyt_two[two]
                                                                                                        .get_charge_state(
                                                                                                            c1),
                                                                                                    false);
                                                                                        });
                                                                                    lyt_three[three].foreach_cell(
                                                                                        [this, &charge_lyt, &lyt_three,
                                                                                         &three](const auto& c1) {
                                                                                            charge_lyt
                                                                                                .assign_charge_state(
                                                                                                    c1,
                                                                                                    lyt_three[three]
                                                                                                        .get_charge_state(
                                                                                                            c1),
                                                                                                    false);
                                                                                        });
                                                                                    lyt_four[four].foreach_cell(
                                                                                        [this, &charge_lyt, &lyt_four,
                                                                                         &four](const auto& c1) {
                                                                                            charge_lyt
                                                                                                .assign_charge_state(
                                                                                                    c1,
                                                                                                    lyt_four[four]
                                                                                                        .get_charge_state(
                                                                                                            c1),
                                                                                                    false);
                                                                                        });
                                                                                    lyt_five[five].foreach_cell(
                                                                                        [this, &charge_lyt, &lyt_five,
                                                                                         &five](const auto& c1) {
                                                                                            charge_lyt
                                                                                                .assign_charge_state(
                                                                                                    c1,
                                                                                                    lyt_five[five]
                                                                                                        .get_charge_state(
                                                                                                            c1),
                                                                                                    false);
                                                                                        });
                                                                                    lyt_six[six].foreach_cell(
                                                                                        [this, &charge_lyt, &lyt_six,
                                                                                         &six](const auto& c1) {
                                                                                            charge_lyt
                                                                                                .assign_charge_state(
                                                                                                    c1,
                                                                                                    lyt_six[six]
                                                                                                        .get_charge_state(
                                                                                                            c1),
                                                                                                    false);
                                                                                        });
                                                                                    lyt_seven[seven].foreach_cell(
                                                                                        [this, &charge_lyt, &lyt_seven,
                                                                                         &seven](const auto& c1) {
                                                                                            charge_lyt
                                                                                                .assign_charge_state(
                                                                                                    c1,
                                                                                                    lyt_seven[seven]
                                                                                                        .get_charge_state(
                                                                                                            c1),
                                                                                                    false);
                                                                                        });
                                                                                    lyt_eight[eight].foreach_cell(
                                                                                        [this, &charge_lyt, &lyt_eight,
                                                                                         &eight](const auto& c1) {
                                                                                            charge_lyt
                                                                                                .assign_charge_state(
                                                                                                    c1,
                                                                                                    lyt_eight[eight]
                                                                                                        .get_charge_state(
                                                                                                            c1),
                                                                                                    false);
                                                                                        });
                                                                                    lyt_nine[nine].foreach_cell(
                                                                                        [this, &charge_lyt, &lyt_nine,
                                                                                         &nine](const auto& c1) {
                                                                                            charge_lyt
                                                                                                .assign_charge_state(
                                                                                                    c1,
                                                                                                    lyt_nine[nine]
                                                                                                        .get_charge_state(
                                                                                                            c1),
                                                                                                    false);
                                                                                        });
                                                                                    lyt_ten[ten].foreach_cell(
                                                                                        [this, &charge_lyt, &lyt_ten,
                                                                                         &ten](const auto& c1) {
                                                                                            charge_lyt
                                                                                                .assign_charge_state(
                                                                                                    c1,
                                                                                                    lyt_ten[ten]
                                                                                                        .get_charge_state(
                                                                                                            c1),
                                                                                                    false);
                                                                                        });
                                                                                    lyt_11[eleven].foreach_cell(
                                                                                        [this, &charge_lyt, &lyt_11,
                                                                                         &eleven](const auto& c1) {
                                                                                            charge_lyt
                                                                                                .assign_charge_state(
                                                                                                    c1,
                                                                                                    lyt_11[eleven]
                                                                                                        .get_charge_state(
                                                                                                            c1),
                                                                                                    false);
                                                                                        });
                                                                                    lyt_12[twelve].foreach_cell(
                                                                                        [this, &charge_lyt, &lyt_12,
                                                                                         &twelve](const auto& c1) {
                                                                                            charge_lyt
                                                                                                .assign_charge_state(
                                                                                                    c1,
                                                                                                    lyt_12[twelve]
                                                                                                        .get_charge_state(
                                                                                                            c1),
                                                                                                    false);
                                                                                        });
                                                                                    lyt_13[thirdteen].foreach_cell(
                                                                                        [this, &charge_lyt, &lyt_13,
                                                                                         &thirdteen](const auto& c1) {
                                                                                            charge_lyt
                                                                                                .assign_charge_state(
                                                                                                    c1,
                                                                                                    lyt_13[thirdteen]
                                                                                                        .get_charge_state(
                                                                                                            c1),
                                                                                                    false);
                                                                                        });
                                                                                    lyt_14[fourteen].foreach_cell(
                                                                                        [this, &charge_lyt, &lyt_14,
                                                                                         &fourteen](const auto& c1) {
                                                                                            charge_lyt
                                                                                                .assign_charge_state(
                                                                                                    c1,
                                                                                                    lyt_14[fourteen]
                                                                                                        .get_charge_state(
                                                                                                            c1),
                                                                                                    false);
                                                                                        });
                                                                                    lyt_15[fiveteen].foreach_cell(
                                                                                        [this, &charge_lyt, &lyt_15,
                                                                                         &fiveteen](const auto& c1) {
                                                                                            charge_lyt
                                                                                                .assign_charge_state(
                                                                                                    c1,
                                                                                                    lyt_15[fiveteen]
                                                                                                        .get_charge_state(
                                                                                                            c1),
                                                                                                    false);
                                                                                        });
                                                                                    lyt_16[sixteen].foreach_cell(
                                                                                        [this, &charge_lyt, &lyt_16,
                                                                                         &sixteen](const auto& c1) {
                                                                                            charge_lyt
                                                                                                .assign_charge_state(
                                                                                                    c1,
                                                                                                    lyt_16[sixteen]
                                                                                                        .get_charge_state(
                                                                                                            c1),
                                                                                                    false);
                                                                                        });
                                                                                    lyt_17[seventeen].foreach_cell(
                                                                                        [this, &charge_lyt, &lyt_17,
                                                                                         &seventeen](const auto& c1) {
                                                                                            charge_lyt
                                                                                                .assign_charge_state(
                                                                                                    c1,
                                                                                                    lyt_17[seventeen]
                                                                                                        .get_charge_state(
                                                                                                            c1),
                                                                                                    false);
                                                                                        });
                                                                                    lyt_18[eightteen].foreach_cell(
                                                                                        [this, &charge_lyt, &lyt_18,
                                                                                         &eightteen](const auto& c1) {
                                                                                            charge_lyt
                                                                                                .assign_charge_state(
                                                                                                    c1,
                                                                                                    lyt_18[eightteen]
                                                                                                        .get_charge_state(
                                                                                                            c1),
                                                                                                    false);
                                                                                        });
                                                                                    lyt_19[nineteen].foreach_cell(
                                                                                        [this, &charge_lyt, &lyt_19,
                                                                                         &nineteen](const auto& c1) {
                                                                                            charge_lyt
                                                                                                .assign_charge_state(
                                                                                                    c1,
                                                                                                    lyt_19[nineteen]
                                                                                                        .get_charge_state(
                                                                                                            c1),
                                                                                                    false);
                                                                                        });
                                                                                    charge_lyt
                                                                                        .update_after_charge_change();
                                                                                    if (charge_lyt
                                                                                            .is_physically_valid())
                                                                                    {
                                                                                        if (charge_lyt
                                                                                                .get_system_energy() <
                                                                                            energy_threas)
                                                                                        {
                                                                                            std::vector<
                                                                                                charge_distribution_surface<
                                                                                                    Lyt>>
                                                                                                lyts{};
                                                                                            std::cout
                                                                                                << charge_lyt
                                                                                                       .get_system_energy()
                                                                                                << std::endl;

                                                                                            sidb_simulation_result<Lyt>
                                                                                                sim_result{};
                                                                                            sim_result.algorithm_name =
                                                                                                "ExGS";
                                                                                            charge_distribution_surface<
                                                                                                Lyt>
                                                                                                charge_lyt_copy{
                                                                                                    charge_lyt};
                                                                                            lyts.emplace_back(
                                                                                                charge_lyt_copy);
                                                                                            sim_result
                                                                                                .charge_distributions =
                                                                                                lyts;
                                                                                            energy_threas =
                                                                                                charge_lyt
                                                                                                    .get_system_energy();
                                                                                            write_sqd_sim_result<Lyt>(
                                                                                                sim_result, "/Users/"
                                                                                                            "jandrewnio"
                                                                                                            "k/"
                                                                                                            "CLionProje"
                                                                                                            "cts/"
                                                                                                            "fiction_"
                                                                                                            "fork/"
                                                                                                            "experiment"
                                                                                                            "s/"
                                                                                                            "result."
                                                                                                            "xml");
                                                                                        }
                                                                                    }
                                                                                    counter += 1;
                                                                                    if (counter % 100000 == 0)
                                                                                    {
                                                                                        std::cout << counter
                                                                                                  << std::endl;
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        if (counter == 0)
        {
            std::cout << "no path found" << std::endl;
        }
    }

    //    void assignChargeState(const typename Lyt::cell& c1, const charge_distribution_surface<Lyt>& lyt)
    //    {
    //        charge_lyt.assign_charge_state(c1, lyt.get_charge_state(c1), false);
    //    }
    //
    //    void processCombination()
    //    {
    //        // Store the threads for synchronization
    //        std::vector<std::thread> threads;
    //
    //        // Iterate over each lyt in combination
    //        for (const auto& lyt : combination)
    //        {
    //            // Create a lambda function to be executed by each thread
    //            auto threadFunc = [this, &lyt]() {
    //                lyt.foreach_cell([this, &lyt](const auto& c1) {
    //                                     assignChargeState(c1, lyt);});
    //            };
    //
    //            // Start a new thread and store it
    //            threads.emplace_back(threadFunc);
    //        }
    //
    //        // Wait for all threads to finish
    //        for (auto& thread : threads)
    //        {
    //            thread.join();
    //        }
    //    }

    void processCombination()
    {
        for (const auto& lyt : combination)
        {
            lyt.foreach_cell([this, &lyt](const auto& c1)
                             { charge_lyt.assign_charge_state(c1, lyt.get_charge_state(c1), false); });
        }

        charge_lyt.update_after_charge_change(true, false);
        if (charge_lyt.is_physically_valid())
        {
            charge_lyt.recompute_system_energy();
            if (charge_lyt.get_system_energy() < energy_threas)
            {
                std::vector<charge_distribution_surface<Lyt>> lyts{};
                std::cout << charge_lyt.get_system_energy() << std::endl;

                sidb_simulation_result<Lyt> sim_result{};
                sim_result.algorithm_name = "ExGS";
                charge_distribution_surface<Lyt> charge_lyt_copy{charge_lyt};
                lyts.emplace_back(charge_lyt_copy);
                sim_result.charge_distributions = lyts;
                energy_threas                   = charge_lyt.get_system_energy();
                write_sqd_sim_result<Lyt>(sim_result, "/Users/"
                                                      "jandrewnio"
                                                      "k/"
                                                      "CLionProje"
                                                      "cts/"
                                                      "fiction_"
                                                      "fork/"
                                                      "experiment"
                                                      "s/"
                                                      "result."
                                                      "xml");
            }
            layout_found = false;
        }
    }

    void init_size()
    {
        indices.reserve(lyts_of_regions.size());
        combination.reserve(lyts_of_regions.size());
    }

    void count_combinations()
    {
        combination_iterator_counter = 0;
        std::cout << "combining starts: " << std::to_string(lyts_of_regions.size()) << std::endl;
        uint64_t counter_lyts = 1;
        for (const auto& lyts_region : lyts_of_regions)
        {
            counter_lyts *= lyts_region.size();
        }
        std::cout << "number enumerations: " << std::to_string(counter_lyts) << std::endl;
    }

    void generateCombinations(const uint64_t depth)
    {
        if (depth == lyts_of_regions.size())
        {
            processCombination();
            if (combination_iterator_counter % 100000 == 0)
            {
                std::cout << combination_iterator_counter << std::endl;
            }

            // std::cout << "path found" << std::endl;
            return;
        }

        const std::vector<charge_distribution_surface<Lyt>>& current_vector = lyts_of_regions[depth];
        for (auto i = 0u; i < current_vector.size(); i++)
        {
            combination_iterator_counter += 1;
            if (depth < indices.size())
            {
                indices[depth]     = i;
                combination[depth] = current_vector[i];
            }
            else
            {
                indices.push_back(i);
                combination.push_back(current_vector[i]);
            }

            uint64_t mismatch_previous = 0;
            for (const auto& lyt_index : all_neighbor_pairs[depth])
            {
                if (lyt_index < depth)
                {

                    if (!previous_layout_fullfilling_constraint(lyt_index, indices[lyt_index], depth, indices[depth]))
                    {
                        mismatch_previous += 1;
                    }
                }
            }
            if (mismatch_previous > 0)
            {
                combination.pop_back();
                indices.pop_back();
                continue;
            }

            // Check the condition and continue if it's not fulfilled
            uint64_t mismatch = 0;
            for (const auto& lyt_index : all_neighbor_pairs[depth])
            {
                if (lyt_index < depth)
                {
                    if (!layout_fullfilling_constraint(current_vector[i], lyt_index, indices[lyt_index]))
                    {
                        mismatch += 1;
                    }
                }
            }
            if (mismatch > 0)
            {
                combination.pop_back();
                indices.pop_back();
                continue;
            }

            generateCombinations(depth + 1);
            combination.pop_back();
            indices.pop_back();
        }
    }

    void combining_all_26_feature()
    {
        auto compareFunc =
            [](const charge_distribution_surface<Lyt>& lyt1, const charge_distribution_surface<Lyt>& lyt2)
        { return lyt1.get_system_energy() < lyt2.get_system_energy(); };

        std::cout << "combining starts: " << std::to_string(lyts_of_regions.size()) << std::endl;
        uint64_t counter_lyts = 1;
        for (const auto& lyts_region : lyts_of_regions)
        {
            counter_lyts *= lyts_region.size();
        }
        std::cout << "number enumerations: " << std::to_string(counter_lyts) << std::endl;

        auto lyt_one   = lyts_of_regions[0];
        auto lyt_two   = lyts_of_regions[1];
        auto lyt_three = lyts_of_regions[2];
        auto lyt_four  = lyts_of_regions[3];
        auto lyt_five  = lyts_of_regions[4];
        auto lyt_six   = lyts_of_regions[5];
        auto lyt_seven = lyts_of_regions[6];
        auto lyt_eight = lyts_of_regions[7];
        auto lyt_nine  = lyts_of_regions[8];
        auto lyt_ten   = lyts_of_regions[9];
        auto lyt_11    = lyts_of_regions[10];
        auto lyt_12    = lyts_of_regions[11];
        auto lyt_13    = lyts_of_regions[12];
        auto lyt_14    = lyts_of_regions[13];
        auto lyt_15    = lyts_of_regions[14];
        auto lyt_16    = lyts_of_regions[15];
        auto lyt_17    = lyts_of_regions[16];
        auto lyt_18    = lyts_of_regions[17];
        auto lyt_19    = lyts_of_regions[18];
        auto lyt_20    = lyts_of_regions[19];
        auto lyt_21    = lyts_of_regions[20];
        auto lyt_22    = lyts_of_regions[21];
        auto lyt_23    = lyts_of_regions[22];
        auto lyt_24    = lyts_of_regions[23];
        auto lyt_25    = lyts_of_regions[24];
        auto lyt_26    = lyts_of_regions[25];

        std::cout << "defect_cells: " << std::to_string(all_defect_cells.size()) << std::endl;
        for (const auto& defects : all_defect_cells)
        {
            std::cout << "number of defects: " << std::to_string(defects.size()) << std::endl;
        }

        charge_distribution_surface<Lyt> charge_lyt{layout};
        uint64_t                         counter = 0;
        std::vector<double>              valid_energies{};
        double                           energy_threas = 1000;

        for (auto one = 0u; one < lyt_one.size(); one++)
        {
            for (auto two = 0u; two < lyt_two.size(); two++)
            {
                for (auto three = 0u; three < lyt_three.size(); three++)
                {
                    for (auto four = 0u; four < lyt_four.size(); four++)
                    {
                        for (auto five = 0u; five < lyt_five.size(); five++)
                        {
                            for (auto six = 0u; six < lyt_six.size(); six++)
                            {
                                if (!layout_fullfilling_constraint(lyt_six[six], 0, one))
                                {
                                    continue;
                                }
                                if (!layout_fullfilling_constraint(lyt_six[six], 1, two))
                                {
                                    continue;
                                }
                                for (auto seven = 0u; seven < lyt_seven.size(); seven++)
                                {
                                    if (!layout_fullfilling_constraint(lyt_seven[seven], 2, three))
                                    {
                                        continue;
                                    }
                                    for (auto eight = 0u; eight < lyt_eight.size(); eight++)
                                    {
                                        if (!layout_fullfilling_constraint(lyt_eight[eight], 3, four))
                                        {
                                            continue;
                                        }
                                        for (auto nine = 0u; nine < lyt_nine.size(); nine++)
                                        {
                                            if (!layout_fullfilling_constraint(lyt_nine[nine], 4, five))
                                            {
                                                continue;
                                            }
                                            for (auto ten = 0u; ten < lyt_ten.size(); ten++)
                                            {
                                                if (!layout_fullfilling_constraint(lyt_ten[ten], 5, six))
                                                {
                                                    continue;
                                                }
                                                for (auto eleven = 0u; eleven < lyt_11.size(); eleven++)
                                                {
                                                    if (!layout_fullfilling_constraint(lyt_11[eleven], 5, six))
                                                    {
                                                        continue;
                                                    }
                                                    if (!layout_fullfilling_constraint(lyt_11[eleven], 6, seven))
                                                    {
                                                        continue;
                                                    }
                                                    for (auto twelve = 0u; twelve < lyt_12.size(); twelve++)
                                                    {
                                                        if (!layout_fullfilling_constraint(lyt_12[twelve], 6, seven))
                                                        {
                                                            continue;
                                                        }
                                                        if (!layout_fullfilling_constraint(lyt_12[twelve], 7, eight))
                                                        {
                                                            continue;
                                                        }
                                                        for (auto thirdteen = 0u; thirdteen < lyt_13.size();
                                                             thirdteen++)
                                                        {
                                                            if (!layout_fullfilling_constraint(lyt_13[thirdteen], 7,
                                                                                               eight))
                                                            {
                                                                continue;
                                                            }
                                                            if (!layout_fullfilling_constraint(lyt_13[thirdteen], 8,
                                                                                               nine))
                                                            {
                                                                continue;
                                                            }
                                                            for (auto fourteen = 0u; fourteen < lyt_14.size();
                                                                 fourteen++)
                                                            {
                                                                if (!layout_fullfilling_constraint(lyt_14[fourteen], 9,
                                                                                                   ten))
                                                                {
                                                                    continue;
                                                                }
                                                                if (!layout_fullfilling_constraint(lyt_14[fourteen], 10,
                                                                                                   eleven))
                                                                {
                                                                    continue;
                                                                }
                                                                for (auto fiveteen = 0u; fiveteen < lyt_15.size();
                                                                     fiveteen++)
                                                                {
                                                                    if (!layout_fullfilling_constraint(lyt_15[fiveteen],
                                                                                                       11, twelve))
                                                                    {
                                                                        continue;
                                                                    }
                                                                    for (auto sixteen = 0u; sixteen < lyt_16.size();
                                                                         sixteen++)
                                                                    {
                                                                        if (!layout_fullfilling_constraint(
                                                                                lyt_16[sixteen], 12, thirdteen))
                                                                        {
                                                                            continue;
                                                                        }
                                                                        for (auto seventeen = 0u;
                                                                             seventeen < lyt_17.size(); seventeen++)
                                                                        {
                                                                            if (!layout_fullfilling_constraint(
                                                                                    lyt_17[seventeen], 13, fourteen))
                                                                            {
                                                                                continue;
                                                                            }
                                                                            for (auto eightteen = 0u;
                                                                                 eightteen < lyt_18.size(); eightteen++)
                                                                            {
                                                                                if (!layout_fullfilling_constraint(
                                                                                        lyt_18[eightteen], 13,
                                                                                        fourteen))
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                if (!layout_fullfilling_constraint(
                                                                                        lyt_18[eightteen], 14,
                                                                                        fiveteen))
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                for (auto nineteen = 0u;
                                                                                     nineteen < lyt_19.size();
                                                                                     nineteen++)
                                                                                {
                                                                                    if (!layout_fullfilling_constraint(
                                                                                            lyt_19[nineteen], 14,
                                                                                            fiveteen))
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    if (!layout_fullfilling_constraint(
                                                                                            lyt_19[nineteen], 15,
                                                                                            sixteen))
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    for (auto twenty = 0u;
                                                                                         twenty < lyt_20.size();
                                                                                         twenty++)
                                                                                    {
                                                                                        if (!layout_fullfilling_constraint(
                                                                                                lyt_20[twenty], 16,
                                                                                                seventeen))
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        for (auto twentyone = 0u;
                                                                                             twentyone < lyt_21.size();
                                                                                             twentyone++)
                                                                                        {
                                                                                            if (!layout_fullfilling_constraint(
                                                                                                    lyt_21[twentyone],
                                                                                                    17, eightteen))
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                            for (auto twentytwo = 0u;
                                                                                                 twentytwo <
                                                                                                 lyt_22.size();
                                                                                                 twentytwo++)
                                                                                            {
                                                                                                if (!layout_fullfilling_constraint(
                                                                                                        lyt_22
                                                                                                            [twentytwo],
                                                                                                        18, nineteen))
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                                for (auto twentythree =
                                                                                                         0u;
                                                                                                     twentythree <
                                                                                                     lyt_23.size();
                                                                                                     twentythree++)
                                                                                                {
                                                                                                    if (!layout_fullfilling_constraint(
                                                                                                            lyt_23
                                                                                                                [twentythree],
                                                                                                            19, twenty))
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                    if (!layout_fullfilling_constraint(
                                                                                                            lyt_23
                                                                                                                [twentythree],
                                                                                                            20,
                                                                                                            twentyone))
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                    for (
                                                                                                        auto
                                                                                                            twentyfour =
                                                                                                                0u;
                                                                                                        twentyfour <
                                                                                                        lyt_24.size();
                                                                                                        twentyfour++)
                                                                                                    {
                                                                                                        if (!layout_fullfilling_constraint(
                                                                                                                lyt_24
                                                                                                                    [twentyfour],
                                                                                                                20,
                                                                                                                twentyone))
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                        if (!layout_fullfilling_constraint(
                                                                                                                lyt_24
                                                                                                                    [twentyfour],
                                                                                                                21,
                                                                                                                twentytwo))
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                        for (
                                                                                                            auto
                                                                                                                twentyfive =
                                                                                                                    0u;
                                                                                                            twentyfive <
                                                                                                            lyt_25
                                                                                                                .size();
                                                                                                            twentyfive++)
                                                                                                        {
                                                                                                            if (!layout_fullfilling_constraint(
                                                                                                                    lyt_25
                                                                                                                        [twentyfive],
                                                                                                                    22,
                                                                                                                    twentythree))
                                                                                                            {
                                                                                                                continue;
                                                                                                            }
                                                                                                            for (
                                                                                                                auto twentysix =
                                                                                                                    0u;
                                                                                                                twentysix <
                                                                                                                lyt_26
                                                                                                                    .size();
                                                                                                                twentysix++)
                                                                                                            {
                                                                                                                if (!layout_fullfilling_constraint(
                                                                                                                        lyt_26
                                                                                                                            [twentysix],
                                                                                                                        23,
                                                                                                                        twentyfour))
                                                                                                                {
                                                                                                                    continue;
                                                                                                                }
                                                                                                                lyt_one[one]
                                                                                                                    .foreach_cell(
                                                                                                                        [this,
                                                                                                                         &charge_lyt,
                                                                                                                         &lyt_one,
                                                                                                                         &one](
                                                                                                                            const auto&
                                                                                                                                c1)
                                                                                                                        {
                                                                                                                            charge_lyt
                                                                                                                                .assign_charge_state(
                                                                                                                                    c1,
                                                                                                                                    lyt_one[one]
                                                                                                                                        .get_charge_state(
                                                                                                                                            c1),
                                                                                                                                    false);
                                                                                                                        });
                                                                                                                lyt_two[two]
                                                                                                                    .foreach_cell(
                                                                                                                        [this,
                                                                                                                         &charge_lyt,
                                                                                                                         &lyt_two,
                                                                                                                         &two](
                                                                                                                            const auto&
                                                                                                                                c1)
                                                                                                                        {
                                                                                                                            charge_lyt
                                                                                                                                .assign_charge_state(
                                                                                                                                    c1,
                                                                                                                                    lyt_two[two]
                                                                                                                                        .get_charge_state(
                                                                                                                                            c1),
                                                                                                                                    false);
                                                                                                                        });
                                                                                                                lyt_three[three]
                                                                                                                    .foreach_cell(
                                                                                                                        [this,
                                                                                                                         &charge_lyt,
                                                                                                                         &lyt_three,
                                                                                                                         &three](
                                                                                                                            const auto&
                                                                                                                                c1)
                                                                                                                        {
                                                                                                                            charge_lyt
                                                                                                                                .assign_charge_state(
                                                                                                                                    c1,
                                                                                                                                    lyt_three[three]
                                                                                                                                        .get_charge_state(
                                                                                                                                            c1),
                                                                                                                                    false);
                                                                                                                        });
                                                                                                                lyt_four[four]
                                                                                                                    .foreach_cell(
                                                                                                                        [this,
                                                                                                                         &charge_lyt,
                                                                                                                         &lyt_four,
                                                                                                                         &four](
                                                                                                                            const auto&
                                                                                                                                c1)
                                                                                                                        {
                                                                                                                            charge_lyt
                                                                                                                                .assign_charge_state(
                                                                                                                                    c1,
                                                                                                                                    lyt_four[four]
                                                                                                                                        .get_charge_state(
                                                                                                                                            c1),
                                                                                                                                    false);
                                                                                                                        });
                                                                                                                lyt_five[five]
                                                                                                                    .foreach_cell(
                                                                                                                        [this,
                                                                                                                         &charge_lyt,
                                                                                                                         &lyt_five,
                                                                                                                         &five](
                                                                                                                            const auto&
                                                                                                                                c1)
                                                                                                                        {
                                                                                                                            charge_lyt
                                                                                                                                .assign_charge_state(
                                                                                                                                    c1,
                                                                                                                                    lyt_five[five]
                                                                                                                                        .get_charge_state(
                                                                                                                                            c1),
                                                                                                                                    false);
                                                                                                                        });
                                                                                                                lyt_six[six]
                                                                                                                    .foreach_cell(
                                                                                                                        [this,
                                                                                                                         &charge_lyt,
                                                                                                                         &lyt_six,
                                                                                                                         &six](
                                                                                                                            const auto&
                                                                                                                                c1)
                                                                                                                        {
                                                                                                                            charge_lyt
                                                                                                                                .assign_charge_state(
                                                                                                                                    c1,
                                                                                                                                    lyt_six[six]
                                                                                                                                        .get_charge_state(
                                                                                                                                            c1),
                                                                                                                                    false);
                                                                                                                        });
                                                                                                                lyt_seven[seven]
                                                                                                                    .foreach_cell(
                                                                                                                        [this,
                                                                                                                         &charge_lyt,
                                                                                                                         &lyt_seven,
                                                                                                                         &seven](
                                                                                                                            const auto&
                                                                                                                                c1)
                                                                                                                        {
                                                                                                                            charge_lyt
                                                                                                                                .assign_charge_state(
                                                                                                                                    c1,
                                                                                                                                    lyt_seven[seven]
                                                                                                                                        .get_charge_state(
                                                                                                                                            c1),
                                                                                                                                    false);
                                                                                                                        });
                                                                                                                lyt_eight[eight]
                                                                                                                    .foreach_cell(
                                                                                                                        [this,
                                                                                                                         &charge_lyt,
                                                                                                                         &lyt_eight,
                                                                                                                         &eight](
                                                                                                                            const auto&
                                                                                                                                c1)
                                                                                                                        {
                                                                                                                            charge_lyt
                                                                                                                                .assign_charge_state(
                                                                                                                                    c1,
                                                                                                                                    lyt_eight[eight]
                                                                                                                                        .get_charge_state(
                                                                                                                                            c1),
                                                                                                                                    false);
                                                                                                                        });
                                                                                                                lyt_nine[nine]
                                                                                                                    .foreach_cell(
                                                                                                                        [this,
                                                                                                                         &charge_lyt,
                                                                                                                         &lyt_nine,
                                                                                                                         &nine](
                                                                                                                            const auto&
                                                                                                                                c1)
                                                                                                                        {
                                                                                                                            charge_lyt
                                                                                                                                .assign_charge_state(
                                                                                                                                    c1,
                                                                                                                                    lyt_nine[nine]
                                                                                                                                        .get_charge_state(
                                                                                                                                            c1),
                                                                                                                                    false);
                                                                                                                        });
                                                                                                                lyt_ten[ten]
                                                                                                                    .foreach_cell(
                                                                                                                        [this,
                                                                                                                         &charge_lyt,
                                                                                                                         &lyt_ten,
                                                                                                                         &ten](
                                                                                                                            const auto&
                                                                                                                                c1)
                                                                                                                        {
                                                                                                                            charge_lyt
                                                                                                                                .assign_charge_state(
                                                                                                                                    c1,
                                                                                                                                    lyt_ten[ten]
                                                                                                                                        .get_charge_state(
                                                                                                                                            c1),
                                                                                                                                    false);
                                                                                                                        });
                                                                                                                lyt_11[eleven]
                                                                                                                    .foreach_cell(
                                                                                                                        [this,
                                                                                                                         &charge_lyt,
                                                                                                                         &lyt_11,
                                                                                                                         &eleven](
                                                                                                                            const auto&
                                                                                                                                c1)
                                                                                                                        {
                                                                                                                            charge_lyt
                                                                                                                                .assign_charge_state(
                                                                                                                                    c1,
                                                                                                                                    lyt_11[eleven]
                                                                                                                                        .get_charge_state(
                                                                                                                                            c1),
                                                                                                                                    false);
                                                                                                                        });
                                                                                                                lyt_12[twelve]
                                                                                                                    .foreach_cell(
                                                                                                                        [this,
                                                                                                                         &charge_lyt,
                                                                                                                         &lyt_12,
                                                                                                                         &twelve](
                                                                                                                            const auto&
                                                                                                                                c1)
                                                                                                                        {
                                                                                                                            charge_lyt
                                                                                                                                .assign_charge_state(
                                                                                                                                    c1,
                                                                                                                                    lyt_12[twelve]
                                                                                                                                        .get_charge_state(
                                                                                                                                            c1),
                                                                                                                                    false);
                                                                                                                        });
                                                                                                                lyt_13[thirdteen]
                                                                                                                    .foreach_cell(
                                                                                                                        [this,
                                                                                                                         &charge_lyt,
                                                                                                                         &lyt_13,
                                                                                                                         &thirdteen](
                                                                                                                            const auto&
                                                                                                                                c1)
                                                                                                                        {
                                                                                                                            charge_lyt
                                                                                                                                .assign_charge_state(
                                                                                                                                    c1,
                                                                                                                                    lyt_13[thirdteen]
                                                                                                                                        .get_charge_state(
                                                                                                                                            c1),
                                                                                                                                    false);
                                                                                                                        });
                                                                                                                lyt_14[fourteen]
                                                                                                                    .foreach_cell(
                                                                                                                        [this,
                                                                                                                         &charge_lyt,
                                                                                                                         &lyt_14,
                                                                                                                         &fourteen](
                                                                                                                            const auto&
                                                                                                                                c1)
                                                                                                                        {
                                                                                                                            charge_lyt
                                                                                                                                .assign_charge_state(
                                                                                                                                    c1,
                                                                                                                                    lyt_14[fourteen]
                                                                                                                                        .get_charge_state(
                                                                                                                                            c1),
                                                                                                                                    false);
                                                                                                                        });
                                                                                                                lyt_15[fiveteen]
                                                                                                                    .foreach_cell(
                                                                                                                        [this,
                                                                                                                         &charge_lyt,
                                                                                                                         &lyt_15,
                                                                                                                         &fiveteen](
                                                                                                                            const auto&
                                                                                                                                c1)
                                                                                                                        {
                                                                                                                            charge_lyt
                                                                                                                                .assign_charge_state(
                                                                                                                                    c1,
                                                                                                                                    lyt_15[fiveteen]
                                                                                                                                        .get_charge_state(
                                                                                                                                            c1),
                                                                                                                                    false);
                                                                                                                        });
                                                                                                                lyt_16[sixteen]
                                                                                                                    .foreach_cell(
                                                                                                                        [this,
                                                                                                                         &charge_lyt,
                                                                                                                         &lyt_16,
                                                                                                                         &sixteen](
                                                                                                                            const auto&
                                                                                                                                c1)
                                                                                                                        {
                                                                                                                            charge_lyt
                                                                                                                                .assign_charge_state(
                                                                                                                                    c1,
                                                                                                                                    lyt_16[sixteen]
                                                                                                                                        .get_charge_state(
                                                                                                                                            c1),
                                                                                                                                    false);
                                                                                                                        });
                                                                                                                lyt_17[seventeen]
                                                                                                                    .foreach_cell(
                                                                                                                        [this,
                                                                                                                         &charge_lyt,
                                                                                                                         &lyt_17,
                                                                                                                         &seventeen](
                                                                                                                            const auto&
                                                                                                                                c1)
                                                                                                                        {
                                                                                                                            charge_lyt
                                                                                                                                .assign_charge_state(
                                                                                                                                    c1,
                                                                                                                                    lyt_17[seventeen]
                                                                                                                                        .get_charge_state(
                                                                                                                                            c1),
                                                                                                                                    false);
                                                                                                                        });
                                                                                                                lyt_18[eightteen]
                                                                                                                    .foreach_cell(
                                                                                                                        [this,
                                                                                                                         &charge_lyt,
                                                                                                                         &lyt_18,
                                                                                                                         &eightteen](
                                                                                                                            const auto&
                                                                                                                                c1)
                                                                                                                        {
                                                                                                                            charge_lyt
                                                                                                                                .assign_charge_state(
                                                                                                                                    c1,
                                                                                                                                    lyt_18[eightteen]
                                                                                                                                        .get_charge_state(
                                                                                                                                            c1),
                                                                                                                                    false);
                                                                                                                        });
                                                                                                                lyt_19[nineteen]
                                                                                                                    .foreach_cell(
                                                                                                                        [this,
                                                                                                                         &charge_lyt,
                                                                                                                         &lyt_19,
                                                                                                                         &nineteen](
                                                                                                                            const auto&
                                                                                                                                c1)
                                                                                                                        {
                                                                                                                            charge_lyt
                                                                                                                                .assign_charge_state(
                                                                                                                                    c1,
                                                                                                                                    lyt_19[nineteen]
                                                                                                                                        .get_charge_state(
                                                                                                                                            c1),
                                                                                                                                    false);
                                                                                                                        });
                                                                                                                lyt_20[twenty]
                                                                                                                    .foreach_cell(
                                                                                                                        [this,
                                                                                                                         &charge_lyt,
                                                                                                                         &lyt_20,
                                                                                                                         &twenty](
                                                                                                                            const auto&
                                                                                                                                c1)
                                                                                                                        {
                                                                                                                            charge_lyt
                                                                                                                                .assign_charge_state(
                                                                                                                                    c1,
                                                                                                                                    lyt_20[twenty]
                                                                                                                                        .get_charge_state(
                                                                                                                                            c1),
                                                                                                                                    false);
                                                                                                                        });
                                                                                                                lyt_21[twentyone]
                                                                                                                    .foreach_cell(
                                                                                                                        [this,
                                                                                                                         &charge_lyt,
                                                                                                                         &lyt_21,
                                                                                                                         &twentyone](
                                                                                                                            const auto&
                                                                                                                                c1)
                                                                                                                        {
                                                                                                                            charge_lyt
                                                                                                                                .assign_charge_state(
                                                                                                                                    c1,
                                                                                                                                    lyt_21[twentyone]
                                                                                                                                        .get_charge_state(
                                                                                                                                            c1),
                                                                                                                                    false);
                                                                                                                        });
                                                                                                                lyt_22[twentytwo]
                                                                                                                    .foreach_cell(
                                                                                                                        [this,
                                                                                                                         &charge_lyt,
                                                                                                                         &lyt_22,
                                                                                                                         &twentytwo](
                                                                                                                            const auto&
                                                                                                                                c1)
                                                                                                                        {
                                                                                                                            charge_lyt
                                                                                                                                .assign_charge_state(
                                                                                                                                    c1,
                                                                                                                                    lyt_22[twentytwo]
                                                                                                                                        .get_charge_state(
                                                                                                                                            c1),
                                                                                                                                    false);
                                                                                                                        });
                                                                                                                lyt_23[twentythree]
                                                                                                                    .foreach_cell(
                                                                                                                        [this,
                                                                                                                         &charge_lyt,
                                                                                                                         &lyt_23,
                                                                                                                         &twentythree](
                                                                                                                            const auto&
                                                                                                                                c1)
                                                                                                                        {
                                                                                                                            charge_lyt
                                                                                                                                .assign_charge_state(
                                                                                                                                    c1,
                                                                                                                                    lyt_23[twentythree]
                                                                                                                                        .get_charge_state(
                                                                                                                                            c1),
                                                                                                                                    false);
                                                                                                                        });
                                                                                                                lyt_24[twentyfour]
                                                                                                                    .foreach_cell(
                                                                                                                        [this,
                                                                                                                         &charge_lyt,
                                                                                                                         &lyt_24,
                                                                                                                         &twentyfour](
                                                                                                                            const auto&
                                                                                                                                c1)
                                                                                                                        {
                                                                                                                            charge_lyt
                                                                                                                                .assign_charge_state(
                                                                                                                                    c1,
                                                                                                                                    lyt_24[twentyfour]
                                                                                                                                        .get_charge_state(
                                                                                                                                            c1),
                                                                                                                                    false);
                                                                                                                        });
                                                                                                                lyt_25[twentyfive]
                                                                                                                    .foreach_cell(
                                                                                                                        [this,
                                                                                                                         &charge_lyt,
                                                                                                                         &lyt_25,
                                                                                                                         &twentyfive](
                                                                                                                            const auto&
                                                                                                                                c1)
                                                                                                                        {
                                                                                                                            charge_lyt
                                                                                                                                .assign_charge_state(
                                                                                                                                    c1,
                                                                                                                                    lyt_25[twentyfive]
                                                                                                                                        .get_charge_state(
                                                                                                                                            c1),
                                                                                                                                    false);
                                                                                                                        });
                                                                                                                lyt_26[twentysix]
                                                                                                                    .foreach_cell(
                                                                                                                        [this,
                                                                                                                         &charge_lyt,
                                                                                                                         &lyt_26,
                                                                                                                         &twentysix](
                                                                                                                            const auto&
                                                                                                                                c1)
                                                                                                                        {
                                                                                                                            charge_lyt
                                                                                                                                .assign_charge_state(
                                                                                                                                    c1,
                                                                                                                                    lyt_26[twentysix]
                                                                                                                                        .get_charge_state(
                                                                                                                                            c1),
                                                                                                                                    false);
                                                                                                                        });

                                                                                                                charge_lyt
                                                                                                                    .update_after_charge_change();
                                                                                                                if (charge_lyt
                                                                                                                        .is_physically_valid())
                                                                                                                {
                                                                                                                    if (charge_lyt
                                                                                                                            .get_system_energy() <
                                                                                                                        energy_threas)
                                                                                                                    {
                                                                                                                        std::vector<
                                                                                                                            charge_distribution_surface<
                                                                                                                                Lyt>>
                                                                                                                            lyts{};
                                                                                                                        std::cout
                                                                                                                            << charge_lyt
                                                                                                                                   .get_system_energy()
                                                                                                                            << std::
                                                                                                                                   endl;

                                                                                                                        sidb_simulation_result<
                                                                                                                            Lyt>
                                                                                                                            sim_result{};
                                                                                                                        sim_result
                                                                                                                            .algorithm_name =
                                                                                                                            "ExGS";
                                                                                                                        charge_distribution_surface<
                                                                                                                            Lyt>
                                                                                                                            charge_lyt_copy{
                                                                                                                                charge_lyt};
                                                                                                                        lyts.emplace_back(
                                                                                                                            charge_lyt_copy);
                                                                                                                        sim_result
                                                                                                                            .charge_distributions =
                                                                                                                            lyts;
                                                                                                                        energy_threas =
                                                                                                                            charge_lyt
                                                                                                                                .get_system_energy();
                                                                                                                        write_sqd_sim_result<
                                                                                                                            Lyt>(
                                                                                                                            sim_result,
                                                                                                                            "/Users/"
                                                                                                                            "jandrewnio"
                                                                                                                            "k/"
                                                                                                                            "CLionProje"
                                                                                                                            "cts/"
                                                                                                                            "fiction_"
                                                                                                                            "fork/"
                                                                                                                            "experiment"
                                                                                                                            "s/"
                                                                                                                            "result."
                                                                                                                            "xml");
                                                                                                                    }
                                                                                                                }
                                                                                                                counter +=
                                                                                                                    1;
                                                                                                                if (counter %
                                                                                                                        100000 ==
                                                                                                                    0)
                                                                                                                {
                                                                                                                    std::cout
                                                                                                                        << counter
                                                                                                                        << std::
                                                                                                                               endl;
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        if (counter == 0)
        {
            std::cout << "no path found" << std::endl;
        }
    }

    int8_t get_charge_state_defect(const uint64_t region, const uint64_t i, const typename Lyt::cell& cell)
    {
        auto neighbor_cell = all_defect_cells[region];
        for (auto l = 0u; l < neighbor_cell.size(); l++)
        {
            if (neighbor_cell[l] == cell)
            {
                return all_defect_charges[region][i][l];
            }
        }
    }

    uint64_t get_index_of_cell(const typename Lyt::cell& cell, std::vector<typename Lyt::cell>& cell_vector) const
    {
        uint64_t counter = 0;
        for (const auto& cell_in_vector : cell_vector)
        {
            if (cell_in_vector == cell)
            {
                counter += 1;
                return counter - 1;
            }
            counter += 1;
        }
    }

    bool previous_layout_fullfilling_constraint(const uint64_t depending_gate_index_previous,
                                                const uint64_t state_index_previous,
                                                const uint64_t depending_gate_index_current,
                                                const uint64_t current_layout_index)
    {
        charge_distribution_surface<Lyt> lyt_previous{
            lyts_of_regions[depending_gate_index_previous][state_index_previous]};
        auto       neighbor_cells_of_current_layout = all_defect_cells[depending_gate_index_current];
        const auto defect_confs_of_given_index_current_layout =
            all_defect_configrations_all_layouts[depending_gate_index_current][current_layout_index];
        bool layout_correct = false;
        for (const auto& conf : defect_confs_of_given_index_current_layout)
        {
            uint64_t incorrect_counter = 0;
            lyt_previous.foreach_cell(
                [this, &lyt_previous, &neighbor_cells_of_current_layout, &depending_gate_index_current,
                 &incorrect_counter, &conf](const auto& c1)
                {
                    for (const auto& cell : neighbor_cells_of_current_layout)
                    {
                        auto cell_index = get_index_of_cell(cell, all_defect_cells[depending_gate_index_current]);
                        if (cell == c1)
                        {
                            if (charge_state_to_sign(lyt_previous.get_charge_state(c1)) != conf[cell_index])
                            {
                                incorrect_counter += 1;
                            }
                        }
                    }
                });
            if (incorrect_counter == 0)
            {
                layout_correct = true;
            }
        }
        return layout_correct;
    }

    bool layout_fullfilling_constraint(const charge_distribution_surface<Lyt>& lyt, const uint64_t depending_gate_index,
                                       const uint64_t state_index)
    {
        const auto defect_confs_of_given_index =
            all_defect_configrations_all_layouts[depending_gate_index][state_index];
        bool layout_correct = false;
        for (const auto& conf : defect_confs_of_given_index)
        {
            uint64_t incorrect_counter = 0;
            auto     neighbor_cell     = all_defect_cells[depending_gate_index];
            lyt.foreach_cell(
                [this, &neighbor_cell, &depending_gate_index, &lyt, &incorrect_counter, &conf](const auto& c1)
                {
                    for (const auto& cell : neighbor_cell)
                    {
                        auto cell_index = get_index_of_cell(cell, all_defect_cells[depending_gate_index]);
                        if (cell == c1)
                        {
                            if (charge_state_to_sign(lyt.get_charge_state(c1)) != conf[cell_index])
                            {
                                incorrect_counter += 1;
                            }
                        }
                    }
                });
            if (incorrect_counter == 0)
            {
                layout_correct = true;
            }
        }
        return layout_correct;
    }

  private:
    Lyt&                                                                     layout;
    sidb_simulation_parameters                                               parameter{};
    layout_sim_stats<Lyt>&                                                   statistic{};
    typename cube::coord_t                                                   start_cell{};
    typename cube::coord_t                                                   rightest_cell{};
    typename cube::coord_t                                                   lowest_cell{};
    typename cube::coord_t                                                   left_corner_cell{};
    std::set<typename Lyt::cell>                                             cells{};
    std::vector<std::set<uint64_t>>                                          all_neighbor_pairs{};
    std::vector<typename Lyt::cell>                                          border_cells{};
    std::vector<sidb_charge_state>                                           border_cell_charge{};
    uint64_t                                                                 border_cell_index{};
    uint64_t                                                                 border_cell_max_charge_index{};
    std::vector<typename Lyt::cell>                                          defect_cell{};
    std::vector<int8_t>                                                      defect_charge{};
    std::set<typename Lyt::cell>                                             total_cells{};
    uint64_t                                                                 layout_num{};
    std::vector<std::vector<std::unordered_map<typename Lyt::cell, int8_t>>> border_cells_and_charge{};
    std::vector<std::vector<charge_distribution_surface<Lyt>>>               all_charge_lyts{};
    std::vector<std::vector<charge_distribution_surface<Lyt>>>               lyts_of_regions{};
    std::vector<std::vector<uint64_t>>                                       charge_index_innen{};
    std::vector<std::vector<typename Lyt::cell>>                             all_defect_cells{};
    std::vector<std::vector<std::vector<int8_t>>>                            all_defect_charges{};
    std::vector<std::vector<std::vector<std::vector<int8_t>>>>               all_defect_configrations_all_layouts{};
    std::vector<Lyt>                                                         all_layouts{};
    std::vector<uint64_t>                                                    region_num{};
    uint64_t                                                                 region_col_counter{0};
    uint64_t                                                                 region_counter{0};
    std::unordered_map<uint64_t, std::vector<typename Lyt::cell>>            border_cell_region{};
    double                                                                   energy_threas = 100;
    std::vector<charge_distribution_surface<Lyt>>                            combination{};
    std::vector<uint64_t>                                                    indices{};
    charge_distribution_surface<Lyt>                                         charge_lyt{};
    uint64_t                                                                 combination_iterator_counter{};
    std::set<uint64_t>                                                       number_same_column{};
    bool                                                                     layout_found = true;
};

template <typename Lyt>
bool layout_simulation(Lyt& lyt, const sidb_simulation_parameters& params = sidb_simulation_parameters{},
                       layout_sim_stats<Lyt>* ps = nullptr)
{

    layout_sim_stats<Lyt> st{};

    detail::layout_simulation_impl<Lyt> p{lyt, params, st};

    auto result = p.run_simulation_hexagon();
    p.finding_nn();
    p.init_size();
    p.count_combinations();
    p.generateCombinations(0);
    // p.combining_all_2_small_layout_test();

    if (ps)
    {
        *ps = st;
    }

    return result;
}

}  // namespace detail

}  // namespace fiction
#endif  // FICTION_LAYOUT_SIMULATION_HPP

        //    bool layout_generation_hexagon()
//    {
//        cells           = {};
//        uint64_t length = 0;
//
//        uint64_t allowed   = start_cell.x + 26;
//        uint64_t allowed_y = start_cell.y + 32;
//
//        border_cells       = {};
//        border_cell_charge = {};
//
//        //        cells.insert(start_cell);
//        //        total_cells.insert(start_cell);
//
//        //        if (start_cell == siqad::to_fiction_coord<cube::coord_t>(left_corner_cell))
//        //        {
//        //            cells.insert(siqad::to_siqad_coord(start_cell));
//        //            total_cells.insert(siqad::to_siqad_coord(start_cell));
//        //        }
//
//        layout.foreach_cell(
//            [&allowed, &allowed_y, this](const cell<Lyt>& c)
//            {
//                if (std::find(cells.begin(), cells.end(), c) == cells.end())
//                {
//                    auto cell_conv = fiction::siqad::to_fiction_coord<cube::coord_t>(c);
//                    if (cell_conv.y <= allowed_y && cell_conv.y >= start_cell.y)
//                    {
//                        cells.insert(c);
//                        total_cells.insert(c);
//                    }
//                }
//            });
//
//        //            std::cout << allowed << std::endl;
//        //            std::cout << allowed_y << std::endl;
//        //            std::cout << "all collected cells: " << std::to_string(total_cells.size()) << std::endl;
//        //            std::cout << "all collected cells: " << std::to_string(cells.size()) << std::endl;
//
//        std::cout << "part cells: " << std::to_string(cells.size()) << std::endl;
//        std::cout << "all collected cells: " << std::to_string(total_cells.size()) << std::endl;
//        std::cout << allowed << std::endl;
//        std::cout << allowed_y << std::endl;
//
//        layout.foreach_cell(
//            [this](const cell<Lyt>& c)
//            {
//                if (std::find(cells.begin(), cells.end(), c) == cells.end())
//                {
//                    uint64_t counter = 0;
//                    for (auto it = cells.begin(); it != cells.end(); it++)
//                    {
//                        if (sidb_nanometer_distance<Lyt>(layout, *it, c, parameter) < 6)
//                        {
//                            //                            if (c.x > siqad::to_siqad_coord(start_cell).x && c.y >
//                            //                            siqad::to_siqad_coord(start_cell).y)
//                            //                            {
//                            counter += 1;
//                            //}
//                        }
//                    }
//                    if (counter != 0)
//                    {
//                        border_cells.push_back(c);
//                        border_cell_charge.push_back(sidb_charge_state::NEUTRAL);
//                    }
//                }
//            });
//
//        border_cell_max_charge_index = std::pow(2, border_cells.size()) - 1;
//        start_cell.x                 = start_cell.x + length;
//        start_cell.y                 = start_cell.y + length;
//    }

//    bool layout_generation_hexagon()
//    {
//        cells           = {};
//        uint64_t length = 0;
//
//        uint64_t allowed   = start_cell.x + 26;
//        uint64_t allowed_y = start_cell.y + 32;
//
//        border_cells       = {};
//        border_cell_charge = {};
//
//        //        cells.insert(start_cell);
//        //        total_cells.insert(start_cell);
//
//        //        if (start_cell == siqad::to_fiction_coord<cube::coord_t>(left_corner_cell))
//        //        {
//        //            cells.insert(siqad::to_siqad_coord(start_cell));
//        //            total_cells.insert(siqad::to_siqad_coord(start_cell));
//        //        }
//
//            layout.foreach_cell(
//                [&allowed, &allowed_y, this](const cell<Lyt>& c)
//                {
//                    if (std::find(cells.begin(), cells.end(), c) == cells.end())
//                    {
//                        auto cell_conv = fiction::siqad::to_fiction_coord<cube::coord_t>(c);
//                        if (cell_conv.y <= allowed_y && cell_conv.y >= start_cell.y)
//                        {
//                            cells.insert(c);
//                            total_cells.insert(c);
//                        }
//                    }
//                });
//
//            //            std::cout << allowed << std::endl;
//            //            std::cout << allowed_y << std::endl;
//            //            std::cout << "all collected cells: " << std::to_string(total_cells.size()) << std::endl;
//            //            std::cout << "all collected cells: " << std::to_string(cells.size()) << std::endl;
//
//        std::cout << "part cells: " << std::to_string(cells.size()) << std::endl;
//        std::cout << "all collected cells: " << std::to_string(total_cells.size()) << std::endl;
//        std::cout << allowed << std::endl;
//        std::cout << allowed_y << std::endl;
//
//        layout.foreach_cell(
//            [this](const cell<Lyt>& c)
//            {
//                if (std::find(cells.begin(), cells.end(), c) == cells.end())
//                {
//                    uint64_t counter = 0;
//                    for (auto it = cells.begin(); it != cells.end(); it++)
//                    {
//                        if (sidb_nanometer_distance<Lyt>(layout, *it, c, parameter) < 6)
//                        {
//                            //                            if (c.x > siqad::to_siqad_coord(start_cell).x && c.y >
//                            //                            siqad::to_siqad_coord(start_cell).y)
//                            //                            {
//                            counter += 1;
//                            //}
//                        }
//                    }
//                    if (counter != 0)
//                    {
//                        border_cells.push_back(c);
//                        border_cell_charge.push_back(sidb_charge_state::NEUTRAL);
//                    }
//                }
//            });
//
//        border_cell_max_charge_index = std::pow(2, border_cells.size()) - 1;
//        start_cell.x                 = start_cell.x + length;
//        start_cell.y                 = start_cell.y + length;
//    }

//    bool layout_generation_top_down()
//    {
//        cells           = {};
//        uint64_t length = 0;
//
//        uint64_t allowed   = start_cell.x;
//        uint64_t allowed_y = start_cell.y + length;
//
//        border_cells       = {};
//        border_cell_charge = {};
//
//        //        cells.insert(start_cell);
//        //        total_cells.insert(start_cell);
//
//        //        if (start_cell == siqad::to_fiction_coord<cube::coord_t>(left_corner_cell))
//        //        {
//        //            cells.insert(siqad::to_siqad_coord(start_cell));
//        //            total_cells.insert(siqad::to_siqad_coord(start_cell));
//        //        }
//
//        while (total_cells.size() < layout.num_cells() && cells.size() < 40)
//        {
//            layout.foreach_cell(
//                [&allowed, &allowed_y, this](const cell<Lyt>& c)
//                {
//                    if (std::find(cells.begin(), cells.end(), c) == cells.end())
//                    {
//                        auto cell_conv = fiction::siqad::to_fiction_coord<cube::coord_t>(c);
//                        if (cell_conv.y <= allowed_y && cell_conv.y >= start_cell.y)
//                        {
//                            cells.insert(c);
//                            total_cells.insert(c);
//                        }
//                        //                        if (cell_conv.x == start_cell.x && cell_conv.y <= allowed_y &&
//                        //                        cell_conv.y > start_cell.y)
//                        //                        {
//                        //                            cells.insert(c);
//                        //                            total_cells.insert(c);
//                        //                        }
//                    }
//                });
//            length += 1;
//            allowed   = start_cell.x + length;
//            allowed_y = start_cell.y + length;
//            //            std::cout << allowed << std::endl;
//            //            std::cout << allowed_y << std::endl;
//            //            std::cout << "all collected cells: " << std::to_string(total_cells.size()) << std::endl;
//            //            std::cout << "all collected cells: " << std::to_string(cells.size()) << std::endl;
//        }
//        std::cout << "part cells: " << std::to_string(cells.size()) << std::endl;
//        std::cout << "all collected cells: " << std::to_string(total_cells.size()) << std::endl;
//        std::cout << allowed << std::endl;
//        std::cout << allowed_y << std::endl;
//
//        layout.foreach_cell(
//            [this](const cell<Lyt>& c)
//            {
//                if (std::find(cells.begin(), cells.end(), c) == cells.end())
//                {
//                    uint64_t counter = 0;
//                    for (auto it = cells.begin(); it != cells.end(); it++)
//                    {
//                        if (sidb_nanometer_distance<Lyt>(layout, *it, c, parameter) < 6)
//                        {
//                            //                            if (c.x > siqad::to_siqad_coord(start_cell).x && c.y >
//                            //                            siqad::to_siqad_coord(start_cell).y)
//                            //                            {
//                            counter += 1;
//                            //}
//                        }
//                    }
//                    if (counter != 0)
//                    {
//                        border_cells.push_back(c);
//                        border_cell_charge.push_back(sidb_charge_state::NEUTRAL);
//                    }
//                }
//            });
//
//        border_cell_max_charge_index = std::pow(2, border_cells.size()) - 1;
//        start_cell.x                 = start_cell.x + length;
//        start_cell.y                 = start_cell.y + length;
//    }

//    bool layout_generation()
//    {
//        cells           = {};
//        uint64_t length = 0;
//
//        uint64_t allowed   = start_cell.x + length;
//        uint64_t allowed_y = start_cell.y + length;
//
//        border_cells       = {};
//        border_cell_charge = {};
//
//        //        cells.insert(start_cell);
//        //        total_cells.insert(start_cell);
//
//        //        if (start_cell == siqad::to_fiction_coord<cube::coord_t>(left_corner_cell))
//        //        {
//        //            cells.insert(siqad::to_siqad_coord(start_cell));
//        //            total_cells.insert(siqad::to_siqad_coord(start_cell));
//        //        }
//
//        while (total_cells.size() < layout.num_cells() && cells.size() < 27)
//        {
//            layout.foreach_cell(
//                [&allowed, &allowed_y, this](const cell<Lyt>& c)
//                {
//                    if (std::find(cells.begin(), cells.end(), c) == cells.end())
//                    {
//                        auto cell_conv = fiction::siqad::to_fiction_coord<cube::coord_t>(c);
//                        if (cell_conv.x < start_cell.x && cell_conv.y <= allowed_y && cell_conv.y >= start_cell.y)
//                        {
//                            cells.insert(c);
//                            total_cells.insert(c);
//                        }
//                        if (cell_conv.x >= start_cell.x && cell_conv.y <= allowed_y && cell_conv.x <= allowed)
//                        {
//                            cells.insert(c);
//                            total_cells.insert(c);
//                        }
//                        //                        if (cell_conv.x == start_cell.x && cell_conv.y <= allowed_y &&
//                        //                        cell_conv.y > start_cell.y)
//                        //                        {
//                        //                            cells.insert(c);
//                        //                            total_cells.insert(c);
//                        //                        }
//                    }
//                });
//            length += 1;
//            allowed   = start_cell.x + length;
//            allowed_y = start_cell.y + length;
//            //            std::cout << allowed << std::endl;
//            //            std::cout << allowed_y << std::endl;
//            //            std::cout << "all collected cells: " << std::to_string(total_cells.size()) << std::endl;
//            //            std::cout << "all collected cells: " << std::to_string(cells.size()) << std::endl;
//        }
//        std::cout << "part cells: " << std::to_string(cells.size()) << std::endl;
//        std::cout << "all collected cells: " << std::to_string(total_cells.size()) << std::endl;
//        std::cout << allowed << std::endl;
//        std::cout << allowed_y << std::endl;
//
//        layout.foreach_cell(
//            [this](const cell<Lyt>& c)
//            {
//                if (std::find(cells.begin(), cells.end(), c) == cells.end())
//                {
//                    uint64_t counter = 0;
//                    for (auto it = cells.begin(); it != cells.end(); it++)
//                    {
//                        if (sidb_nanometer_distance<Lyt>(layout, *it, c, parameter) < 3)
//                        {
//                            //                            if (c.x > siqad::to_siqad_coord(start_cell).x && c.y >
//                            //                            siqad::to_siqad_coord(start_cell).y)
//                            //                            {
//                            counter += 1;
//                            //}
//                        }
//                    }
//                    if (counter != 0)
//                    {
//                        border_cells.push_back(c);
//                        border_cell_charge.push_back(sidb_charge_state::NEUTRAL);
//                    }
//                }
//            });
//
//        border_cell_max_charge_index = std::pow(2, border_cells.size()) - 1;
//        start_cell.x                 = start_cell.x + length;
//        start_cell.y                 = start_cell.y + length;
//    }